State 0:
                program -> * deflist . {#}
                    To (state 001) program -> deflist .
                    To (state 000) deflist -> * tp def deflist .
                    To (state 000) deflist -> .
                deflist -> * tp def deflist . {#}
                    To (state 002) deflist -> tp * def deflist .
             (2)deflist -> . {#}
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .

                                   # reduce 2
                                 INT shift 5
                               FLOAT shift 9
                             program accept
                             deflist shift 1
                                  tp shift 2

State 1:
             (0)program -> deflist . {#}
                    From (state 000) program -> * deflist .

                                   # reduce 0

State 2:
                deflist -> tp * def deflist . {#}
                    To (state 003) deflist -> tp def * deflist .
                    To (state 002) def -> * vallist SEMICOLON .
                    To (state 002) def -> * fundef LGB stmtlist RGB .
                    From (state 003) deflist -> * tp def deflist .
                    From (state 000) deflist -> * tp def deflist .
                vallist -> * ID COMMA vallist . {SEMICOLON}
                    To (state 013) vallist -> ID * COMMA vallist .
                vallist -> * ID . {SEMICOLON}
                    To (state 013) vallist -> ID .
                def -> * vallist SEMICOLON . {#,INT,FLOAT}
                    To (state 026) def -> vallist * SEMICOLON .
                def -> * fundef LGB stmtlist RGB . {#,INT,FLOAT}
                    To (state 028) def -> fundef * LGB stmtlist RGB .
                fundef -> * ID LLB args RLB . {LGB}
                    To (state 013) fundef -> ID * LLB args RLB .
                fundef -> * ID LLB RLB . {LGB}
                    To (state 013) fundef -> ID * LLB RLB .

                                  ID shift 13
                                 def shift 3
                             vallist shift 26
                              fundef shift 28

State 3:
                deflist -> * tp def deflist . {#}
                    To (state 002) deflist -> tp * def deflist .
                deflist -> tp def * deflist . {#}
                    To (state 004) deflist -> tp def deflist .
                    To (state 003) deflist -> * tp def deflist .
                    To (state 003) deflist -> .
                    From (state 002) deflist -> tp * def deflist .
             (2)deflist -> . {#}
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .

                                   # reduce 2
                                 INT shift 5
                               FLOAT shift 9
                             deflist shift 4
                                  tp shift 2

State 4:
             (1)deflist -> tp def deflist . {#}
                    From (state 003) deflist -> tp def * deflist .

                                   # reduce 1

State 5:
             (3)tp -> INT . {ID}
                    From (state 000) tp -> * INT .
                    From (state 158) tp -> * INT .
                    From (state 150) tp -> * INT .
                    From (state 146) tp -> * INT .
                    From (state 118) tp -> * INT .
                    From (state 109) tp -> * INT .
                    From (state 104) tp -> * INT .
                    From (state 101) tp -> * INT .
                    From (state 097) tp -> * INT .
                    From (state 091) tp -> * INT .
                    From (state 032) tp -> * INT .
                    From (state 029) tp -> * INT .
                    From (state 022) tp -> * INT .
                    From (state 017) tp -> * INT .
                    From (state 003) tp -> * INT .
                tp -> INT * LMB INUM RMB . {ID}
                    To (state 006) tp -> INT LMB * INUM RMB .
                    From (state 000) tp -> * INT LMB INUM RMB .
                    From (state 158) tp -> * INT LMB INUM RMB .
                    From (state 150) tp -> * INT LMB INUM RMB .
                    From (state 146) tp -> * INT LMB INUM RMB .
                    From (state 118) tp -> * INT LMB INUM RMB .
                    From (state 109) tp -> * INT LMB INUM RMB .
                    From (state 104) tp -> * INT LMB INUM RMB .
                    From (state 101) tp -> * INT LMB INUM RMB .
                    From (state 097) tp -> * INT LMB INUM RMB .
                    From (state 091) tp -> * INT LMB INUM RMB .
                    From (state 032) tp -> * INT LMB INUM RMB .
                    From (state 029) tp -> * INT LMB INUM RMB .
                    From (state 022) tp -> * INT LMB INUM RMB .
                    From (state 017) tp -> * INT LMB INUM RMB .
                    From (state 003) tp -> * INT LMB INUM RMB .

                                 LMB shift 6
                                  ID reduce 3

State 6:
                tp -> INT LMB * INUM RMB . {ID}
                    To (state 007) tp -> INT LMB INUM * RMB .
                    From (state 005) tp -> INT * LMB INUM RMB .

                                INUM shift 7

State 7:
                tp -> INT LMB INUM * RMB . {ID}
                    To (state 008) tp -> INT LMB INUM RMB .
                    From (state 006) tp -> INT LMB * INUM RMB .

                                 RMB shift 8

State 8:
             (5)tp -> INT LMB INUM RMB . {ID}
                    From (state 007) tp -> INT LMB INUM * RMB .

                                  ID reduce 5

State 9:
             (4)tp -> FLOAT . {ID}
                    From (state 000) tp -> * FLOAT .
                    From (state 158) tp -> * FLOAT .
                    From (state 150) tp -> * FLOAT .
                    From (state 146) tp -> * FLOAT .
                    From (state 118) tp -> * FLOAT .
                    From (state 109) tp -> * FLOAT .
                    From (state 104) tp -> * FLOAT .
                    From (state 101) tp -> * FLOAT .
                    From (state 097) tp -> * FLOAT .
                    From (state 091) tp -> * FLOAT .
                    From (state 032) tp -> * FLOAT .
                    From (state 029) tp -> * FLOAT .
                    From (state 022) tp -> * FLOAT .
                    From (state 017) tp -> * FLOAT .
                    From (state 003) tp -> * FLOAT .
                tp -> FLOAT * LMB INUM RMB . {ID}
                    To (state 010) tp -> FLOAT LMB * INUM RMB .
                    From (state 000) tp -> * FLOAT LMB INUM RMB .
                    From (state 158) tp -> * FLOAT LMB INUM RMB .
                    From (state 150) tp -> * FLOAT LMB INUM RMB .
                    From (state 146) tp -> * FLOAT LMB INUM RMB .
                    From (state 118) tp -> * FLOAT LMB INUM RMB .
                    From (state 109) tp -> * FLOAT LMB INUM RMB .
                    From (state 104) tp -> * FLOAT LMB INUM RMB .
                    From (state 101) tp -> * FLOAT LMB INUM RMB .
                    From (state 097) tp -> * FLOAT LMB INUM RMB .
                    From (state 091) tp -> * FLOAT LMB INUM RMB .
                    From (state 032) tp -> * FLOAT LMB INUM RMB .
                    From (state 029) tp -> * FLOAT LMB INUM RMB .
                    From (state 022) tp -> * FLOAT LMB INUM RMB .
                    From (state 017) tp -> * FLOAT LMB INUM RMB .
                    From (state 003) tp -> * FLOAT LMB INUM RMB .

                                 LMB shift 10
                                  ID reduce 4

State 10:
                tp -> FLOAT LMB * INUM RMB . {ID}
                    To (state 011) tp -> FLOAT LMB INUM * RMB .
                    From (state 009) tp -> FLOAT * LMB INUM RMB .

                                INUM shift 11

State 11:
                tp -> FLOAT LMB INUM * RMB . {ID}
                    To (state 012) tp -> FLOAT LMB INUM RMB .
                    From (state 010) tp -> FLOAT LMB * INUM RMB .

                                 RMB shift 12

State 12:
             (6)tp -> FLOAT LMB INUM RMB . {ID}
                    From (state 011) tp -> FLOAT LMB INUM * RMB .

                                  ID reduce 6

State 13:
                vallist -> ID * COMMA vallist . {SEMICOLON}
                    To (state 014) vallist -> ID COMMA * vallist .
                    From (state 002) vallist -> * ID COMMA vallist .
             (8)vallist -> ID . {SEMICOLON}
                    From (state 002) vallist -> * ID .
                fundef -> ID * LLB args RLB . {LGB}
                    To (state 017) fundef -> ID LLB * args RLB .
                    From (state 002) fundef -> * ID LLB args RLB .
                fundef -> ID * LLB RLB . {LGB}
                    To (state 017) fundef -> ID LLB * RLB .
                    From (state 002) fundef -> * ID LLB RLB .

                               COMMA shift 14
                           SEMICOLON reduce 8
                                 LLB shift 17

State 14:
                vallist -> * ID COMMA vallist . {SEMICOLON}
                    To (state 015) vallist -> ID * COMMA vallist .
                vallist -> ID COMMA * vallist . {SEMICOLON}
                    To (state 016) vallist -> ID COMMA vallist .
                    To (state 014) vallist -> * ID COMMA vallist .
                    To (state 014) vallist -> * ID .
                    From (state 015) vallist -> ID * COMMA vallist .
                    From (state 013) vallist -> ID * COMMA vallist .
                vallist -> * ID . {SEMICOLON}
                    To (state 015) vallist -> ID .

                                  ID shift 15
                             vallist shift 16

State 15:
                vallist -> ID * COMMA vallist . {SEMICOLON}
                    To (state 014) vallist -> ID COMMA * vallist .
                    From (state 085) vallist -> * ID COMMA vallist .
                    From (state 014) vallist -> * ID COMMA vallist .
             (8)vallist -> ID . {SEMICOLON}
                    From (state 085) vallist -> * ID .
                    From (state 014) vallist -> * ID .

                               COMMA shift 14
                           SEMICOLON reduce 8

State 16:
             (7)vallist -> ID COMMA vallist . {SEMICOLON}
                    From (state 014) vallist -> ID COMMA * vallist .

                           SEMICOLON reduce 7

State 17:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                fundef -> ID LLB * args RLB . {LGB}
                    To (state 018) fundef -> ID LLB args * RLB .
                    From (state 013) fundef -> ID * LLB args RLB .
                fundef -> ID LLB * RLB . {LGB}
                    To (state 020) fundef -> ID LLB RLB .
                    From (state 013) fundef -> ID * LLB RLB .
                args -> * param COMMA args . {RLB}
                    To (state 021) args -> param * COMMA args .
                args -> * param . {RLB}
                    To (state 021) args -> param .
                    To (state 017) param -> * tp ID .
                param -> * tp ID . {COMMA,RLB}
                    To (state 024) param -> tp * ID .

                                 INT shift 5
                               FLOAT shift 9
                                 RLB shift 20
                                  tp shift 24
                                args shift 18
                               param shift 21

State 18:
                fundef -> ID LLB args * RLB . {LGB}
                    To (state 019) fundef -> ID LLB args RLB .
                    From (state 017) fundef -> ID LLB * args RLB .

                                 RLB shift 19

State 19:
            (11)fundef -> ID LLB args RLB . {LGB}
                    From (state 018) fundef -> ID LLB args * RLB .

                                 LGB reduce 11

State 20:
            (12)fundef -> ID LLB RLB . {LGB}
                    From (state 017) fundef -> ID LLB * RLB .

                                 LGB reduce 12

State 21:
                args -> param * COMMA args . {RLB}
                    To (state 022) args -> param COMMA * args .
                    From (state 022) args -> * param COMMA args .
                    From (state 017) args -> * param COMMA args .
            (14)args -> param . {RLB}
                    From (state 022) args -> * param .
                    From (state 017) args -> * param .

                               COMMA shift 22
                                 RLB reduce 14

State 22:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                args -> * param COMMA args . {RLB}
                    To (state 021) args -> param * COMMA args .
                args -> param COMMA * args . {RLB}
                    To (state 023) args -> param COMMA args .
                    To (state 022) args -> * param COMMA args .
                    To (state 022) args -> * param .
                    From (state 021) args -> param * COMMA args .
                args -> * param . {RLB}
                    To (state 021) args -> param .
                    To (state 022) param -> * tp ID .
                param -> * tp ID . {COMMA,RLB}
                    To (state 024) param -> tp * ID .

                                 INT shift 5
                               FLOAT shift 9
                                  tp shift 24
                                args shift 23
                               param shift 21

State 23:
            (13)args -> param COMMA args . {RLB}
                    From (state 022) args -> param COMMA * args .

                                 RLB reduce 13

State 24:
                param -> tp * ID . {COMMA,RLB}
                    To (state 025) param -> tp ID .
                    From (state 017) param -> * tp ID .
                    From (state 022) param -> * tp ID .

                                  ID shift 25

State 25:
            (15)param -> tp ID . {COMMA,RLB}
                    From (state 024) param -> tp * ID .

                           [default] reduce 15

State 26:
                def -> vallist * SEMICOLON . {#,INT,FLOAT}
                    To (state 027) def -> vallist SEMICOLON .
                    From (state 002) def -> * vallist SEMICOLON .

                           SEMICOLON shift 27

State 27:
             (9)def -> vallist SEMICOLON . {#,INT,FLOAT}
                    From (state 026) def -> vallist * SEMICOLON .

                           [default] reduce 9

State 28:
                def -> fundef * LGB stmtlist RGB . {#,INT,FLOAT}
                    To (state 029) def -> fundef LGB * stmtlist RGB .
                    From (state 002) def -> * fundef LGB stmtlist RGB .

                                 LGB shift 29

State 29:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                def -> fundef LGB * stmtlist RGB . {#,INT,FLOAT}
                    To (state 030) def -> fundef LGB stmtlist * RGB .
                    From (state 028) def -> fundef * LGB stmtlist RGB .
                stmtlist -> * stmt stmtlist . {RGB}
                    To (state 032) stmtlist -> stmt * stmtlist .
                    To (state 029) stmt -> * exp SEMICOLON .
                    To (state 029) stmt -> * tp vallist SEMICOLON .
                    To (state 029) stmt -> * RETURN exp SEMICOLON .
                    To (state 029) stmt -> * LGB stmt RGB .
                    To (state 029) stmt -> * IF LLB exp RLB stmt .
                    To (state 029) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 029) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 029) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
            (17)stmtlist -> . {RGB}
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 147) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 151) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 RGB reduce 17
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 94
                               WHILE shift 147
                                 FOR shift 151
                                FNUM shift 75
                                  tp shift 85
                            stmtlist shift 30
                                stmt shift 32
                                 exp shift 34

State 30:
                def -> fundef LGB stmtlist * RGB . {#,INT,FLOAT}
                    To (state 031) def -> fundef LGB stmtlist RGB .
                    From (state 029) def -> fundef LGB * stmtlist RGB .

                                 RGB shift 31

State 31:
            (10)def -> fundef LGB stmtlist RGB . {#,INT,FLOAT}
                    From (state 030) def -> fundef LGB stmtlist * RGB .

                           [default] reduce 10

State 32:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmtlist -> * stmt stmtlist . {RGB}
                    To (state 032) stmtlist -> stmt * stmtlist .
                    To (state 032) stmt -> * exp SEMICOLON .
                    To (state 032) stmt -> * tp vallist SEMICOLON .
                    To (state 032) stmt -> * RETURN exp SEMICOLON .
                    To (state 032) stmt -> * LGB stmt RGB .
                    To (state 032) stmt -> * IF LLB exp RLB stmt .
                    To (state 032) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 032) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 032) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmtlist -> stmt * stmtlist . {RGB}
                    To (state 033) stmtlist -> stmt stmtlist .
                    To (state 032) stmtlist -> * stmt stmtlist .
                    To (state 032) stmtlist -> .
                    From (state 032) stmtlist -> * stmt stmtlist .
                    From (state 029) stmtlist -> * stmt stmtlist .
            (17)stmtlist -> . {RGB}
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 147) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 151) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 RGB reduce 17
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 94
                               WHILE shift 147
                                 FOR shift 151
                                FNUM shift 75
                                  tp shift 85
                            stmtlist shift 33
                                stmt shift 32
                                 exp shift 34

State 33:
            (16)stmtlist -> stmt stmtlist . {RGB}
                    From (state 032) stmtlist -> stmt * stmtlist .

                                 RGB reduce 16

State 34:
                stmt -> exp * SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 035) stmt -> exp SEMICOLON .
                    From (state 029) stmt -> * exp SEMICOLON .
                    From (state 158) stmt -> * exp SEMICOLON .
                    From (state 150) stmt -> * exp SEMICOLON .
                    From (state 146) stmt -> * exp SEMICOLON .
                    From (state 118) stmt -> * exp SEMICOLON .
                    From (state 109) stmt -> * exp SEMICOLON .
                    From (state 104) stmt -> * exp SEMICOLON .
                    From (state 101) stmt -> * exp SEMICOLON .
                    From (state 097) stmt -> * exp SEMICOLON .
                    From (state 091) stmt -> * exp SEMICOLON .
                    From (state 032) stmt -> * exp SEMICOLON .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 029) exp -> * exp BIAND exp .
                    From (state 158) exp -> * exp BIAND exp .
                    From (state 150) exp -> * exp BIAND exp .
                    From (state 146) exp -> * exp BIAND exp .
                    From (state 118) exp -> * exp BIAND exp .
                    From (state 109) exp -> * exp BIAND exp .
                    From (state 104) exp -> * exp BIAND exp .
                    From (state 101) exp -> * exp BIAND exp .
                    From (state 097) exp -> * exp BIAND exp .
                    From (state 091) exp -> * exp BIAND exp .
                    From (state 032) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 029) exp -> * exp BIOR exp .
                    From (state 158) exp -> * exp BIOR exp .
                    From (state 150) exp -> * exp BIOR exp .
                    From (state 146) exp -> * exp BIOR exp .
                    From (state 118) exp -> * exp BIOR exp .
                    From (state 109) exp -> * exp BIOR exp .
                    From (state 104) exp -> * exp BIOR exp .
                    From (state 101) exp -> * exp BIOR exp .
                    From (state 097) exp -> * exp BIOR exp .
                    From (state 091) exp -> * exp BIOR exp .
                    From (state 032) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 029) exp -> * exp LSS exp .
                    From (state 158) exp -> * exp LSS exp .
                    From (state 150) exp -> * exp LSS exp .
                    From (state 146) exp -> * exp LSS exp .
                    From (state 118) exp -> * exp LSS exp .
                    From (state 109) exp -> * exp LSS exp .
                    From (state 104) exp -> * exp LSS exp .
                    From (state 101) exp -> * exp LSS exp .
                    From (state 097) exp -> * exp LSS exp .
                    From (state 091) exp -> * exp LSS exp .
                    From (state 032) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 029) exp -> * exp LSSEQ exp .
                    From (state 158) exp -> * exp LSSEQ exp .
                    From (state 150) exp -> * exp LSSEQ exp .
                    From (state 146) exp -> * exp LSSEQ exp .
                    From (state 118) exp -> * exp LSSEQ exp .
                    From (state 109) exp -> * exp LSSEQ exp .
                    From (state 104) exp -> * exp LSSEQ exp .
                    From (state 101) exp -> * exp LSSEQ exp .
                    From (state 097) exp -> * exp LSSEQ exp .
                    From (state 091) exp -> * exp LSSEQ exp .
                    From (state 032) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 029) exp -> * exp GRT exp .
                    From (state 158) exp -> * exp GRT exp .
                    From (state 150) exp -> * exp GRT exp .
                    From (state 146) exp -> * exp GRT exp .
                    From (state 118) exp -> * exp GRT exp .
                    From (state 109) exp -> * exp GRT exp .
                    From (state 104) exp -> * exp GRT exp .
                    From (state 101) exp -> * exp GRT exp .
                    From (state 097) exp -> * exp GRT exp .
                    From (state 091) exp -> * exp GRT exp .
                    From (state 032) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 029) exp -> * exp GRTEQ exp .
                    From (state 158) exp -> * exp GRTEQ exp .
                    From (state 150) exp -> * exp GRTEQ exp .
                    From (state 146) exp -> * exp GRTEQ exp .
                    From (state 118) exp -> * exp GRTEQ exp .
                    From (state 109) exp -> * exp GRTEQ exp .
                    From (state 104) exp -> * exp GRTEQ exp .
                    From (state 101) exp -> * exp GRTEQ exp .
                    From (state 097) exp -> * exp GRTEQ exp .
                    From (state 091) exp -> * exp GRTEQ exp .
                    From (state 032) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 029) exp -> * exp EQ exp .
                    From (state 158) exp -> * exp EQ exp .
                    From (state 150) exp -> * exp EQ exp .
                    From (state 146) exp -> * exp EQ exp .
                    From (state 118) exp -> * exp EQ exp .
                    From (state 109) exp -> * exp EQ exp .
                    From (state 104) exp -> * exp EQ exp .
                    From (state 101) exp -> * exp EQ exp .
                    From (state 097) exp -> * exp EQ exp .
                    From (state 091) exp -> * exp EQ exp .
                    From (state 032) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 029) exp -> * exp NOTEQ exp .
                    From (state 158) exp -> * exp NOTEQ exp .
                    From (state 150) exp -> * exp NOTEQ exp .
                    From (state 146) exp -> * exp NOTEQ exp .
                    From (state 118) exp -> * exp NOTEQ exp .
                    From (state 109) exp -> * exp NOTEQ exp .
                    From (state 104) exp -> * exp NOTEQ exp .
                    From (state 101) exp -> * exp NOTEQ exp .
                    From (state 097) exp -> * exp NOTEQ exp .
                    From (state 091) exp -> * exp NOTEQ exp .
                    From (state 032) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 029) exp -> * exp ADD exp .
                    From (state 158) exp -> * exp ADD exp .
                    From (state 150) exp -> * exp ADD exp .
                    From (state 146) exp -> * exp ADD exp .
                    From (state 118) exp -> * exp ADD exp .
                    From (state 109) exp -> * exp ADD exp .
                    From (state 104) exp -> * exp ADD exp .
                    From (state 101) exp -> * exp ADD exp .
                    From (state 097) exp -> * exp ADD exp .
                    From (state 091) exp -> * exp ADD exp .
                    From (state 032) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 029) exp -> * exp MINUS exp .
                    From (state 158) exp -> * exp MINUS exp .
                    From (state 150) exp -> * exp MINUS exp .
                    From (state 146) exp -> * exp MINUS exp .
                    From (state 118) exp -> * exp MINUS exp .
                    From (state 109) exp -> * exp MINUS exp .
                    From (state 104) exp -> * exp MINUS exp .
                    From (state 101) exp -> * exp MINUS exp .
                    From (state 097) exp -> * exp MINUS exp .
                    From (state 091) exp -> * exp MINUS exp .
                    From (state 032) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 029) exp -> * exp MULTI exp .
                    From (state 158) exp -> * exp MULTI exp .
                    From (state 150) exp -> * exp MULTI exp .
                    From (state 146) exp -> * exp MULTI exp .
                    From (state 118) exp -> * exp MULTI exp .
                    From (state 109) exp -> * exp MULTI exp .
                    From (state 104) exp -> * exp MULTI exp .
                    From (state 101) exp -> * exp MULTI exp .
                    From (state 097) exp -> * exp MULTI exp .
                    From (state 091) exp -> * exp MULTI exp .
                    From (state 032) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 029) exp -> * exp DIV exp .
                    From (state 158) exp -> * exp DIV exp .
                    From (state 150) exp -> * exp DIV exp .
                    From (state 146) exp -> * exp DIV exp .
                    From (state 118) exp -> * exp DIV exp .
                    From (state 109) exp -> * exp DIV exp .
                    From (state 104) exp -> * exp DIV exp .
                    From (state 101) exp -> * exp DIV exp .
                    From (state 097) exp -> * exp DIV exp .
                    From (state 091) exp -> * exp DIV exp .
                    From (state 032) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 029) exp -> * exp MOD exp .
                    From (state 158) exp -> * exp MOD exp .
                    From (state 150) exp -> * exp MOD exp .
                    From (state 146) exp -> * exp MOD exp .
                    From (state 118) exp -> * exp MOD exp .
                    From (state 109) exp -> * exp MOD exp .
                    From (state 104) exp -> * exp MOD exp .
                    From (state 101) exp -> * exp MOD exp .
                    From (state 097) exp -> * exp MOD exp .
                    From (state 091) exp -> * exp MOD exp .
                    From (state 032) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 062) exp -> exp AND * exp .
                    From (state 029) exp -> * exp AND exp .
                    From (state 158) exp -> * exp AND exp .
                    From (state 150) exp -> * exp AND exp .
                    From (state 146) exp -> * exp AND exp .
                    From (state 118) exp -> * exp AND exp .
                    From (state 109) exp -> * exp AND exp .
                    From (state 104) exp -> * exp AND exp .
                    From (state 101) exp -> * exp AND exp .
                    From (state 097) exp -> * exp AND exp .
                    From (state 091) exp -> * exp AND exp .
                    From (state 032) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 064) exp -> exp OR * exp .
                    From (state 029) exp -> * exp OR exp .
                    From (state 158) exp -> * exp OR exp .
                    From (state 150) exp -> * exp OR exp .
                    From (state 146) exp -> * exp OR exp .
                    From (state 118) exp -> * exp OR exp .
                    From (state 109) exp -> * exp OR exp .
                    From (state 104) exp -> * exp OR exp .
                    From (state 101) exp -> * exp OR exp .
                    From (state 097) exp -> * exp OR exp .
                    From (state 091) exp -> * exp OR exp .
                    From (state 032) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 029) exp -> * exp XOR exp .
                    From (state 158) exp -> * exp XOR exp .
                    From (state 150) exp -> * exp XOR exp .
                    From (state 146) exp -> * exp XOR exp .
                    From (state 118) exp -> * exp XOR exp .
                    From (state 109) exp -> * exp XOR exp .
                    From (state 104) exp -> * exp XOR exp .
                    From (state 101) exp -> * exp XOR exp .
                    From (state 097) exp -> * exp XOR exp .
                    From (state 091) exp -> * exp XOR exp .
                    From (state 032) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 029) exp -> * exp BITNOT exp .
                    From (state 158) exp -> * exp BITNOT exp .
                    From (state 150) exp -> * exp BITNOT exp .
                    From (state 146) exp -> * exp BITNOT exp .
                    From (state 118) exp -> * exp BITNOT exp .
                    From (state 109) exp -> * exp BITNOT exp .
                    From (state 104) exp -> * exp BITNOT exp .
                    From (state 101) exp -> * exp BITNOT exp .
                    From (state 097) exp -> * exp BITNOT exp .
                    From (state 091) exp -> * exp BITNOT exp .
                    From (state 032) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 029) exp -> * exp COMMA exp .
                    From (state 158) exp -> * exp COMMA exp .
                    From (state 150) exp -> * exp COMMA exp .
                    From (state 146) exp -> * exp COMMA exp .
                    From (state 118) exp -> * exp COMMA exp .
                    From (state 109) exp -> * exp COMMA exp .
                    From (state 104) exp -> * exp COMMA exp .
                    From (state 101) exp -> * exp COMMA exp .
                    From (state 097) exp -> * exp COMMA exp .
                    From (state 091) exp -> * exp COMMA exp .
                    From (state 032) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 029) exp -> * exp ASSIGN exp .
                    From (state 158) exp -> * exp ASSIGN exp .
                    From (state 150) exp -> * exp ASSIGN exp .
                    From (state 146) exp -> * exp ASSIGN exp .
                    From (state 118) exp -> * exp ASSIGN exp .
                    From (state 109) exp -> * exp ASSIGN exp .
                    From (state 104) exp -> * exp ASSIGN exp .
                    From (state 101) exp -> * exp ASSIGN exp .
                    From (state 097) exp -> * exp ASSIGN exp .
                    From (state 091) exp -> * exp ASSIGN exp .
                    From (state 032) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLON shift 35

State 35:
            (18)stmt -> exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 034) stmt -> exp * SEMICOLON .

                           [default] reduce 18

State 36:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * BIAND exp .
                exp -> exp BIAND * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp BIAND exp .
                    To (state 036) exp -> * exp BIAND exp .
                    To (state 036) exp -> * exp BIOR exp .
                    To (state 036) exp -> * exp LSS exp .
                    To (state 036) exp -> * exp LSSEQ exp .
                    To (state 036) exp -> * exp GRT exp .
                    To (state 036) exp -> * exp GRTEQ exp .
                    To (state 036) exp -> * exp EQ exp .
                    To (state 036) exp -> * exp NOTEQ exp .
                    To (state 036) exp -> * exp ADD exp .
                    To (state 036) exp -> * exp MINUS exp .
                    To (state 036) exp -> * exp MULTI exp .
                    To (state 036) exp -> * exp DIV exp .
                    To (state 036) exp -> * exp MOD exp .
                    To (state 036) exp -> * INUM .
                    To (state 036) exp -> * FNUM .
                    To (state 036) exp -> * ID .
                    To (state 036) exp -> * LLB exp RLB .
                    To (state 036) exp -> * NOT exp .
                    To (state 036) exp -> * exp AND exp .
                    To (state 036) exp -> * exp OR exp .
                    To (state 036) exp -> * exp XOR exp .
                    To (state 036) exp -> * exp BITNOT exp .
                    To (state 036) exp -> * exp COMMA exp .
                    To (state 036) exp -> * ID LMB exp RMB .
                    To (state 036) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * BIAND exp .
                    From (state 149) exp -> exp * BIAND exp .
                    From (state 155) exp -> exp * BIAND exp .
                    From (state 100) exp -> exp * BIAND exp .
                    From (state 108) exp -> exp * BIAND exp .
                    From (state 142) exp -> exp * BIAND exp .
                    From (state 140) exp -> exp * BIAND exp .
                    From (state 138) exp -> exp * BIAND exp .
                    From (state 115) exp -> exp * BIAND exp .
                    From (state 130) exp -> exp * BIAND exp .
                    From (state 089) exp -> exp * BIAND exp .
                    From (state 084) exp -> exp * BIAND exp .
                    From (state 081) exp -> exp * BIAND exp .
                    From (state 078) exp -> exp * BIAND exp .
                    From (state 073) exp -> exp * BIAND exp .
                    From (state 071) exp -> exp * BIAND exp .
                    From (state 069) exp -> exp * BIAND exp .
                    From (state 067) exp -> exp * BIAND exp .
                    From (state 065) exp -> exp * BIAND exp .
                    From (state 063) exp -> exp * BIAND exp .
                    From (state 061) exp -> exp * BIAND exp .
                    From (state 059) exp -> exp * BIAND exp .
                    From (state 057) exp -> exp * BIAND exp .
                    From (state 055) exp -> exp * BIAND exp .
                    From (state 053) exp -> exp * BIAND exp .
                    From (state 051) exp -> exp * BIAND exp .
                    From (state 049) exp -> exp * BIAND exp .
                    From (state 047) exp -> exp * BIAND exp .
                    From (state 045) exp -> exp * BIAND exp .
                    From (state 043) exp -> exp * BIAND exp .
                    From (state 041) exp -> exp * BIAND exp .
                    From (state 039) exp -> exp * BIAND exp .
                    From (state 037) exp -> exp * BIAND exp .
                    From (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 037) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 37

State 37:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 036) exp -> * exp BIAND exp .
            (41)exp -> exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 036) exp -> exp BIAND * exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 036) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 036) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 036) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 036) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 036) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 036) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 036) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 036) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 036) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 036) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 036) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 036) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 036) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 036) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 036) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 036) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 036) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 036) exp -> * exp ASSIGN exp .

                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 41

State 38:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * BIOR exp .
                exp -> exp BIOR * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp BIOR exp .
                    To (state 038) exp -> * exp BIAND exp .
                    To (state 038) exp -> * exp BIOR exp .
                    To (state 038) exp -> * exp LSS exp .
                    To (state 038) exp -> * exp LSSEQ exp .
                    To (state 038) exp -> * exp GRT exp .
                    To (state 038) exp -> * exp GRTEQ exp .
                    To (state 038) exp -> * exp EQ exp .
                    To (state 038) exp -> * exp NOTEQ exp .
                    To (state 038) exp -> * exp ADD exp .
                    To (state 038) exp -> * exp MINUS exp .
                    To (state 038) exp -> * exp MULTI exp .
                    To (state 038) exp -> * exp DIV exp .
                    To (state 038) exp -> * exp MOD exp .
                    To (state 038) exp -> * INUM .
                    To (state 038) exp -> * FNUM .
                    To (state 038) exp -> * ID .
                    To (state 038) exp -> * LLB exp RLB .
                    To (state 038) exp -> * NOT exp .
                    To (state 038) exp -> * exp AND exp .
                    To (state 038) exp -> * exp OR exp .
                    To (state 038) exp -> * exp XOR exp .
                    To (state 038) exp -> * exp BITNOT exp .
                    To (state 038) exp -> * exp COMMA exp .
                    To (state 038) exp -> * ID LMB exp RMB .
                    To (state 038) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * BIOR exp .
                    From (state 149) exp -> exp * BIOR exp .
                    From (state 155) exp -> exp * BIOR exp .
                    From (state 100) exp -> exp * BIOR exp .
                    From (state 108) exp -> exp * BIOR exp .
                    From (state 142) exp -> exp * BIOR exp .
                    From (state 140) exp -> exp * BIOR exp .
                    From (state 138) exp -> exp * BIOR exp .
                    From (state 115) exp -> exp * BIOR exp .
                    From (state 130) exp -> exp * BIOR exp .
                    From (state 089) exp -> exp * BIOR exp .
                    From (state 034) exp -> exp * BIOR exp .
                    From (state 084) exp -> exp * BIOR exp .
                    From (state 081) exp -> exp * BIOR exp .
                    From (state 078) exp -> exp * BIOR exp .
                    From (state 073) exp -> exp * BIOR exp .
                    From (state 071) exp -> exp * BIOR exp .
                    From (state 069) exp -> exp * BIOR exp .
                    From (state 067) exp -> exp * BIOR exp .
                    From (state 065) exp -> exp * BIOR exp .
                    From (state 063) exp -> exp * BIOR exp .
                    From (state 061) exp -> exp * BIOR exp .
                    From (state 059) exp -> exp * BIOR exp .
                    From (state 057) exp -> exp * BIOR exp .
                    From (state 055) exp -> exp * BIOR exp .
                    From (state 053) exp -> exp * BIOR exp .
                    From (state 051) exp -> exp * BIOR exp .
                    From (state 049) exp -> exp * BIOR exp .
                    From (state 047) exp -> exp * BIOR exp .
                    From (state 045) exp -> exp * BIOR exp .
                    From (state 043) exp -> exp * BIOR exp .
                    From (state 041) exp -> exp * BIOR exp .
                    From (state 039) exp -> exp * BIOR exp .
                    From (state 037) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 039) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 39

State 39:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 038) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 038) exp -> * exp BIOR exp .
            (42)exp -> exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 038) exp -> exp BIOR * exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 038) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 038) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 038) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 038) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 038) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 038) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 038) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 038) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 038) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 038) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 038) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 038) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 038) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 038) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 038) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 038) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 038) exp -> * exp ASSIGN exp .

                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 42

State 40:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * LSS exp .
                exp -> exp LSS * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp LSS exp .
                    To (state 040) exp -> * exp BIAND exp .
                    To (state 040) exp -> * exp BIOR exp .
                    To (state 040) exp -> * exp LSS exp .
                    To (state 040) exp -> * exp LSSEQ exp .
                    To (state 040) exp -> * exp GRT exp .
                    To (state 040) exp -> * exp GRTEQ exp .
                    To (state 040) exp -> * exp EQ exp .
                    To (state 040) exp -> * exp NOTEQ exp .
                    To (state 040) exp -> * exp ADD exp .
                    To (state 040) exp -> * exp MINUS exp .
                    To (state 040) exp -> * exp MULTI exp .
                    To (state 040) exp -> * exp DIV exp .
                    To (state 040) exp -> * exp MOD exp .
                    To (state 040) exp -> * INUM .
                    To (state 040) exp -> * FNUM .
                    To (state 040) exp -> * ID .
                    To (state 040) exp -> * LLB exp RLB .
                    To (state 040) exp -> * NOT exp .
                    To (state 040) exp -> * exp AND exp .
                    To (state 040) exp -> * exp OR exp .
                    To (state 040) exp -> * exp XOR exp .
                    To (state 040) exp -> * exp BITNOT exp .
                    To (state 040) exp -> * exp COMMA exp .
                    To (state 040) exp -> * ID LMB exp RMB .
                    To (state 040) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * LSS exp .
                    From (state 149) exp -> exp * LSS exp .
                    From (state 155) exp -> exp * LSS exp .
                    From (state 100) exp -> exp * LSS exp .
                    From (state 108) exp -> exp * LSS exp .
                    From (state 142) exp -> exp * LSS exp .
                    From (state 140) exp -> exp * LSS exp .
                    From (state 138) exp -> exp * LSS exp .
                    From (state 115) exp -> exp * LSS exp .
                    From (state 130) exp -> exp * LSS exp .
                    From (state 089) exp -> exp * LSS exp .
                    From (state 034) exp -> exp * LSS exp .
                    From (state 037) exp -> exp * LSS exp .
                    From (state 084) exp -> exp * LSS exp .
                    From (state 081) exp -> exp * LSS exp .
                    From (state 078) exp -> exp * LSS exp .
                    From (state 073) exp -> exp * LSS exp .
                    From (state 071) exp -> exp * LSS exp .
                    From (state 069) exp -> exp * LSS exp .
                    From (state 067) exp -> exp * LSS exp .
                    From (state 065) exp -> exp * LSS exp .
                    From (state 063) exp -> exp * LSS exp .
                    From (state 061) exp -> exp * LSS exp .
                    From (state 059) exp -> exp * LSS exp .
                    From (state 057) exp -> exp * LSS exp .
                    From (state 055) exp -> exp * LSS exp .
                    From (state 053) exp -> exp * LSS exp .
                    From (state 051) exp -> exp * LSS exp .
                    From (state 049) exp -> exp * LSS exp .
                    From (state 047) exp -> exp * LSS exp .
                    From (state 045) exp -> exp * LSS exp .
                    From (state 043) exp -> exp * LSS exp .
                    From (state 041) exp -> exp * LSS exp .
                    From (state 039) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 041) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 41

State 41:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 040) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 040) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 040) exp -> * exp LSS exp .
            (43)exp -> exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 040) exp -> exp LSS * exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 040) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 040) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 040) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 040) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 040) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 040) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 040) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 040) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 040) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 040) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 040) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 040) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 040) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 040) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 040) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 040) exp -> * exp ASSIGN exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 43

State 42:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * LSSEQ exp .
                exp -> exp LSSEQ * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp LSSEQ exp .
                    To (state 042) exp -> * exp BIAND exp .
                    To (state 042) exp -> * exp BIOR exp .
                    To (state 042) exp -> * exp LSS exp .
                    To (state 042) exp -> * exp LSSEQ exp .
                    To (state 042) exp -> * exp GRT exp .
                    To (state 042) exp -> * exp GRTEQ exp .
                    To (state 042) exp -> * exp EQ exp .
                    To (state 042) exp -> * exp NOTEQ exp .
                    To (state 042) exp -> * exp ADD exp .
                    To (state 042) exp -> * exp MINUS exp .
                    To (state 042) exp -> * exp MULTI exp .
                    To (state 042) exp -> * exp DIV exp .
                    To (state 042) exp -> * exp MOD exp .
                    To (state 042) exp -> * INUM .
                    To (state 042) exp -> * FNUM .
                    To (state 042) exp -> * ID .
                    To (state 042) exp -> * LLB exp RLB .
                    To (state 042) exp -> * NOT exp .
                    To (state 042) exp -> * exp AND exp .
                    To (state 042) exp -> * exp OR exp .
                    To (state 042) exp -> * exp XOR exp .
                    To (state 042) exp -> * exp BITNOT exp .
                    To (state 042) exp -> * exp COMMA exp .
                    To (state 042) exp -> * ID LMB exp RMB .
                    To (state 042) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * LSSEQ exp .
                    From (state 149) exp -> exp * LSSEQ exp .
                    From (state 155) exp -> exp * LSSEQ exp .
                    From (state 100) exp -> exp * LSSEQ exp .
                    From (state 108) exp -> exp * LSSEQ exp .
                    From (state 142) exp -> exp * LSSEQ exp .
                    From (state 140) exp -> exp * LSSEQ exp .
                    From (state 138) exp -> exp * LSSEQ exp .
                    From (state 115) exp -> exp * LSSEQ exp .
                    From (state 130) exp -> exp * LSSEQ exp .
                    From (state 089) exp -> exp * LSSEQ exp .
                    From (state 034) exp -> exp * LSSEQ exp .
                    From (state 037) exp -> exp * LSSEQ exp .
                    From (state 039) exp -> exp * LSSEQ exp .
                    From (state 084) exp -> exp * LSSEQ exp .
                    From (state 081) exp -> exp * LSSEQ exp .
                    From (state 078) exp -> exp * LSSEQ exp .
                    From (state 073) exp -> exp * LSSEQ exp .
                    From (state 071) exp -> exp * LSSEQ exp .
                    From (state 069) exp -> exp * LSSEQ exp .
                    From (state 067) exp -> exp * LSSEQ exp .
                    From (state 065) exp -> exp * LSSEQ exp .
                    From (state 063) exp -> exp * LSSEQ exp .
                    From (state 061) exp -> exp * LSSEQ exp .
                    From (state 059) exp -> exp * LSSEQ exp .
                    From (state 057) exp -> exp * LSSEQ exp .
                    From (state 055) exp -> exp * LSSEQ exp .
                    From (state 053) exp -> exp * LSSEQ exp .
                    From (state 051) exp -> exp * LSSEQ exp .
                    From (state 049) exp -> exp * LSSEQ exp .
                    From (state 047) exp -> exp * LSSEQ exp .
                    From (state 045) exp -> exp * LSSEQ exp .
                    From (state 043) exp -> exp * LSSEQ exp .
                    From (state 041) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 043) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 43

State 43:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 042) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 042) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 042) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 042) exp -> * exp LSSEQ exp .
            (44)exp -> exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 042) exp -> exp LSSEQ * exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 042) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 042) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 042) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 042) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 042) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 042) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 042) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 042) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 042) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 042) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 042) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 042) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 042) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 042) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 042) exp -> * exp ASSIGN exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 44

State 44:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * GRT exp .
                exp -> exp GRT * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp GRT exp .
                    To (state 044) exp -> * exp BIAND exp .
                    To (state 044) exp -> * exp BIOR exp .
                    To (state 044) exp -> * exp LSS exp .
                    To (state 044) exp -> * exp LSSEQ exp .
                    To (state 044) exp -> * exp GRT exp .
                    To (state 044) exp -> * exp GRTEQ exp .
                    To (state 044) exp -> * exp EQ exp .
                    To (state 044) exp -> * exp NOTEQ exp .
                    To (state 044) exp -> * exp ADD exp .
                    To (state 044) exp -> * exp MINUS exp .
                    To (state 044) exp -> * exp MULTI exp .
                    To (state 044) exp -> * exp DIV exp .
                    To (state 044) exp -> * exp MOD exp .
                    To (state 044) exp -> * INUM .
                    To (state 044) exp -> * FNUM .
                    To (state 044) exp -> * ID .
                    To (state 044) exp -> * LLB exp RLB .
                    To (state 044) exp -> * NOT exp .
                    To (state 044) exp -> * exp AND exp .
                    To (state 044) exp -> * exp OR exp .
                    To (state 044) exp -> * exp XOR exp .
                    To (state 044) exp -> * exp BITNOT exp .
                    To (state 044) exp -> * exp COMMA exp .
                    To (state 044) exp -> * ID LMB exp RMB .
                    To (state 044) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * GRT exp .
                    From (state 149) exp -> exp * GRT exp .
                    From (state 155) exp -> exp * GRT exp .
                    From (state 100) exp -> exp * GRT exp .
                    From (state 108) exp -> exp * GRT exp .
                    From (state 142) exp -> exp * GRT exp .
                    From (state 140) exp -> exp * GRT exp .
                    From (state 138) exp -> exp * GRT exp .
                    From (state 115) exp -> exp * GRT exp .
                    From (state 130) exp -> exp * GRT exp .
                    From (state 089) exp -> exp * GRT exp .
                    From (state 034) exp -> exp * GRT exp .
                    From (state 037) exp -> exp * GRT exp .
                    From (state 039) exp -> exp * GRT exp .
                    From (state 041) exp -> exp * GRT exp .
                    From (state 084) exp -> exp * GRT exp .
                    From (state 081) exp -> exp * GRT exp .
                    From (state 078) exp -> exp * GRT exp .
                    From (state 073) exp -> exp * GRT exp .
                    From (state 071) exp -> exp * GRT exp .
                    From (state 069) exp -> exp * GRT exp .
                    From (state 067) exp -> exp * GRT exp .
                    From (state 065) exp -> exp * GRT exp .
                    From (state 063) exp -> exp * GRT exp .
                    From (state 061) exp -> exp * GRT exp .
                    From (state 059) exp -> exp * GRT exp .
                    From (state 057) exp -> exp * GRT exp .
                    From (state 055) exp -> exp * GRT exp .
                    From (state 053) exp -> exp * GRT exp .
                    From (state 051) exp -> exp * GRT exp .
                    From (state 049) exp -> exp * GRT exp .
                    From (state 047) exp -> exp * GRT exp .
                    From (state 045) exp -> exp * GRT exp .
                    From (state 043) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 045) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 45

State 45:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 044) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 044) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 044) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 044) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 044) exp -> * exp GRT exp .
            (45)exp -> exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 044) exp -> exp GRT * exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 044) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 044) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 044) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 044) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 044) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 044) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 044) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 044) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 044) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 044) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 044) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 044) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 044) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 044) exp -> * exp ASSIGN exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 45

State 46:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * GRTEQ exp .
                exp -> exp GRTEQ * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp GRTEQ exp .
                    To (state 046) exp -> * exp BIAND exp .
                    To (state 046) exp -> * exp BIOR exp .
                    To (state 046) exp -> * exp LSS exp .
                    To (state 046) exp -> * exp LSSEQ exp .
                    To (state 046) exp -> * exp GRT exp .
                    To (state 046) exp -> * exp GRTEQ exp .
                    To (state 046) exp -> * exp EQ exp .
                    To (state 046) exp -> * exp NOTEQ exp .
                    To (state 046) exp -> * exp ADD exp .
                    To (state 046) exp -> * exp MINUS exp .
                    To (state 046) exp -> * exp MULTI exp .
                    To (state 046) exp -> * exp DIV exp .
                    To (state 046) exp -> * exp MOD exp .
                    To (state 046) exp -> * INUM .
                    To (state 046) exp -> * FNUM .
                    To (state 046) exp -> * ID .
                    To (state 046) exp -> * LLB exp RLB .
                    To (state 046) exp -> * NOT exp .
                    To (state 046) exp -> * exp AND exp .
                    To (state 046) exp -> * exp OR exp .
                    To (state 046) exp -> * exp XOR exp .
                    To (state 046) exp -> * exp BITNOT exp .
                    To (state 046) exp -> * exp COMMA exp .
                    To (state 046) exp -> * ID LMB exp RMB .
                    To (state 046) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * GRTEQ exp .
                    From (state 149) exp -> exp * GRTEQ exp .
                    From (state 155) exp -> exp * GRTEQ exp .
                    From (state 100) exp -> exp * GRTEQ exp .
                    From (state 108) exp -> exp * GRTEQ exp .
                    From (state 142) exp -> exp * GRTEQ exp .
                    From (state 140) exp -> exp * GRTEQ exp .
                    From (state 138) exp -> exp * GRTEQ exp .
                    From (state 115) exp -> exp * GRTEQ exp .
                    From (state 130) exp -> exp * GRTEQ exp .
                    From (state 089) exp -> exp * GRTEQ exp .
                    From (state 034) exp -> exp * GRTEQ exp .
                    From (state 037) exp -> exp * GRTEQ exp .
                    From (state 039) exp -> exp * GRTEQ exp .
                    From (state 041) exp -> exp * GRTEQ exp .
                    From (state 043) exp -> exp * GRTEQ exp .
                    From (state 084) exp -> exp * GRTEQ exp .
                    From (state 081) exp -> exp * GRTEQ exp .
                    From (state 078) exp -> exp * GRTEQ exp .
                    From (state 073) exp -> exp * GRTEQ exp .
                    From (state 071) exp -> exp * GRTEQ exp .
                    From (state 069) exp -> exp * GRTEQ exp .
                    From (state 067) exp -> exp * GRTEQ exp .
                    From (state 065) exp -> exp * GRTEQ exp .
                    From (state 063) exp -> exp * GRTEQ exp .
                    From (state 061) exp -> exp * GRTEQ exp .
                    From (state 059) exp -> exp * GRTEQ exp .
                    From (state 057) exp -> exp * GRTEQ exp .
                    From (state 055) exp -> exp * GRTEQ exp .
                    From (state 053) exp -> exp * GRTEQ exp .
                    From (state 051) exp -> exp * GRTEQ exp .
                    From (state 049) exp -> exp * GRTEQ exp .
                    From (state 047) exp -> exp * GRTEQ exp .
                    From (state 045) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 047) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 47

State 47:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 046) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 046) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 046) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 046) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 046) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 046) exp -> * exp GRTEQ exp .
            (46)exp -> exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 046) exp -> exp GRTEQ * exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 046) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 046) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 046) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 046) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 046) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 046) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 046) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 046) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 046) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 046) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 046) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 046) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 046) exp -> * exp ASSIGN exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 46

State 48:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * EQ exp .
                exp -> exp EQ * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp EQ exp .
                    To (state 048) exp -> * exp BIAND exp .
                    To (state 048) exp -> * exp BIOR exp .
                    To (state 048) exp -> * exp LSS exp .
                    To (state 048) exp -> * exp LSSEQ exp .
                    To (state 048) exp -> * exp GRT exp .
                    To (state 048) exp -> * exp GRTEQ exp .
                    To (state 048) exp -> * exp EQ exp .
                    To (state 048) exp -> * exp NOTEQ exp .
                    To (state 048) exp -> * exp ADD exp .
                    To (state 048) exp -> * exp MINUS exp .
                    To (state 048) exp -> * exp MULTI exp .
                    To (state 048) exp -> * exp DIV exp .
                    To (state 048) exp -> * exp MOD exp .
                    To (state 048) exp -> * INUM .
                    To (state 048) exp -> * FNUM .
                    To (state 048) exp -> * ID .
                    To (state 048) exp -> * LLB exp RLB .
                    To (state 048) exp -> * NOT exp .
                    To (state 048) exp -> * exp AND exp .
                    To (state 048) exp -> * exp OR exp .
                    To (state 048) exp -> * exp XOR exp .
                    To (state 048) exp -> * exp BITNOT exp .
                    To (state 048) exp -> * exp COMMA exp .
                    To (state 048) exp -> * ID LMB exp RMB .
                    To (state 048) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * EQ exp .
                    From (state 149) exp -> exp * EQ exp .
                    From (state 155) exp -> exp * EQ exp .
                    From (state 100) exp -> exp * EQ exp .
                    From (state 108) exp -> exp * EQ exp .
                    From (state 142) exp -> exp * EQ exp .
                    From (state 140) exp -> exp * EQ exp .
                    From (state 138) exp -> exp * EQ exp .
                    From (state 115) exp -> exp * EQ exp .
                    From (state 130) exp -> exp * EQ exp .
                    From (state 089) exp -> exp * EQ exp .
                    From (state 034) exp -> exp * EQ exp .
                    From (state 037) exp -> exp * EQ exp .
                    From (state 039) exp -> exp * EQ exp .
                    From (state 041) exp -> exp * EQ exp .
                    From (state 043) exp -> exp * EQ exp .
                    From (state 045) exp -> exp * EQ exp .
                    From (state 084) exp -> exp * EQ exp .
                    From (state 081) exp -> exp * EQ exp .
                    From (state 078) exp -> exp * EQ exp .
                    From (state 073) exp -> exp * EQ exp .
                    From (state 071) exp -> exp * EQ exp .
                    From (state 069) exp -> exp * EQ exp .
                    From (state 067) exp -> exp * EQ exp .
                    From (state 065) exp -> exp * EQ exp .
                    From (state 063) exp -> exp * EQ exp .
                    From (state 061) exp -> exp * EQ exp .
                    From (state 059) exp -> exp * EQ exp .
                    From (state 057) exp -> exp * EQ exp .
                    From (state 055) exp -> exp * EQ exp .
                    From (state 053) exp -> exp * EQ exp .
                    From (state 051) exp -> exp * EQ exp .
                    From (state 049) exp -> exp * EQ exp .
                    From (state 047) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 049) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 49

State 49:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 048) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 048) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 048) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 048) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 048) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 048) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 048) exp -> * exp EQ exp .
            (47)exp -> exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 048) exp -> exp EQ * exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 048) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 048) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 048) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 048) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 048) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 048) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 048) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 048) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 048) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 048) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 048) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 048) exp -> * exp ASSIGN exp .

                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 47

State 50:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * NOTEQ exp .
                exp -> exp NOTEQ * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp NOTEQ exp .
                    To (state 050) exp -> * exp BIAND exp .
                    To (state 050) exp -> * exp BIOR exp .
                    To (state 050) exp -> * exp LSS exp .
                    To (state 050) exp -> * exp LSSEQ exp .
                    To (state 050) exp -> * exp GRT exp .
                    To (state 050) exp -> * exp GRTEQ exp .
                    To (state 050) exp -> * exp EQ exp .
                    To (state 050) exp -> * exp NOTEQ exp .
                    To (state 050) exp -> * exp ADD exp .
                    To (state 050) exp -> * exp MINUS exp .
                    To (state 050) exp -> * exp MULTI exp .
                    To (state 050) exp -> * exp DIV exp .
                    To (state 050) exp -> * exp MOD exp .
                    To (state 050) exp -> * INUM .
                    To (state 050) exp -> * FNUM .
                    To (state 050) exp -> * ID .
                    To (state 050) exp -> * LLB exp RLB .
                    To (state 050) exp -> * NOT exp .
                    To (state 050) exp -> * exp AND exp .
                    To (state 050) exp -> * exp OR exp .
                    To (state 050) exp -> * exp XOR exp .
                    To (state 050) exp -> * exp BITNOT exp .
                    To (state 050) exp -> * exp COMMA exp .
                    To (state 050) exp -> * ID LMB exp RMB .
                    To (state 050) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * NOTEQ exp .
                    From (state 149) exp -> exp * NOTEQ exp .
                    From (state 155) exp -> exp * NOTEQ exp .
                    From (state 100) exp -> exp * NOTEQ exp .
                    From (state 108) exp -> exp * NOTEQ exp .
                    From (state 142) exp -> exp * NOTEQ exp .
                    From (state 140) exp -> exp * NOTEQ exp .
                    From (state 138) exp -> exp * NOTEQ exp .
                    From (state 115) exp -> exp * NOTEQ exp .
                    From (state 130) exp -> exp * NOTEQ exp .
                    From (state 089) exp -> exp * NOTEQ exp .
                    From (state 034) exp -> exp * NOTEQ exp .
                    From (state 037) exp -> exp * NOTEQ exp .
                    From (state 039) exp -> exp * NOTEQ exp .
                    From (state 041) exp -> exp * NOTEQ exp .
                    From (state 043) exp -> exp * NOTEQ exp .
                    From (state 045) exp -> exp * NOTEQ exp .
                    From (state 047) exp -> exp * NOTEQ exp .
                    From (state 084) exp -> exp * NOTEQ exp .
                    From (state 081) exp -> exp * NOTEQ exp .
                    From (state 078) exp -> exp * NOTEQ exp .
                    From (state 073) exp -> exp * NOTEQ exp .
                    From (state 071) exp -> exp * NOTEQ exp .
                    From (state 069) exp -> exp * NOTEQ exp .
                    From (state 067) exp -> exp * NOTEQ exp .
                    From (state 065) exp -> exp * NOTEQ exp .
                    From (state 063) exp -> exp * NOTEQ exp .
                    From (state 061) exp -> exp * NOTEQ exp .
                    From (state 059) exp -> exp * NOTEQ exp .
                    From (state 057) exp -> exp * NOTEQ exp .
                    From (state 055) exp -> exp * NOTEQ exp .
                    From (state 053) exp -> exp * NOTEQ exp .
                    From (state 051) exp -> exp * NOTEQ exp .
                    From (state 049) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 051) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 51

State 51:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 050) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 050) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 050) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 050) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 050) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 050) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 050) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 050) exp -> * exp NOTEQ exp .
            (48)exp -> exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 050) exp -> exp NOTEQ * exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 050) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 050) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 050) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 050) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 050) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 050) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 050) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 050) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 050) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 050) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 050) exp -> * exp ASSIGN exp .

                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 48

State 52:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * ADD exp .
                exp -> exp ADD * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp ADD exp .
                    To (state 052) exp -> * exp BIAND exp .
                    To (state 052) exp -> * exp BIOR exp .
                    To (state 052) exp -> * exp LSS exp .
                    To (state 052) exp -> * exp LSSEQ exp .
                    To (state 052) exp -> * exp GRT exp .
                    To (state 052) exp -> * exp GRTEQ exp .
                    To (state 052) exp -> * exp EQ exp .
                    To (state 052) exp -> * exp NOTEQ exp .
                    To (state 052) exp -> * exp ADD exp .
                    To (state 052) exp -> * exp MINUS exp .
                    To (state 052) exp -> * exp MULTI exp .
                    To (state 052) exp -> * exp DIV exp .
                    To (state 052) exp -> * exp MOD exp .
                    To (state 052) exp -> * INUM .
                    To (state 052) exp -> * FNUM .
                    To (state 052) exp -> * ID .
                    To (state 052) exp -> * LLB exp RLB .
                    To (state 052) exp -> * NOT exp .
                    To (state 052) exp -> * exp AND exp .
                    To (state 052) exp -> * exp OR exp .
                    To (state 052) exp -> * exp XOR exp .
                    To (state 052) exp -> * exp BITNOT exp .
                    To (state 052) exp -> * exp COMMA exp .
                    To (state 052) exp -> * ID LMB exp RMB .
                    To (state 052) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * ADD exp .
                    From (state 149) exp -> exp * ADD exp .
                    From (state 155) exp -> exp * ADD exp .
                    From (state 100) exp -> exp * ADD exp .
                    From (state 108) exp -> exp * ADD exp .
                    From (state 142) exp -> exp * ADD exp .
                    From (state 140) exp -> exp * ADD exp .
                    From (state 138) exp -> exp * ADD exp .
                    From (state 115) exp -> exp * ADD exp .
                    From (state 130) exp -> exp * ADD exp .
                    From (state 089) exp -> exp * ADD exp .
                    From (state 034) exp -> exp * ADD exp .
                    From (state 037) exp -> exp * ADD exp .
                    From (state 039) exp -> exp * ADD exp .
                    From (state 041) exp -> exp * ADD exp .
                    From (state 043) exp -> exp * ADD exp .
                    From (state 045) exp -> exp * ADD exp .
                    From (state 047) exp -> exp * ADD exp .
                    From (state 049) exp -> exp * ADD exp .
                    From (state 084) exp -> exp * ADD exp .
                    From (state 081) exp -> exp * ADD exp .
                    From (state 078) exp -> exp * ADD exp .
                    From (state 073) exp -> exp * ADD exp .
                    From (state 071) exp -> exp * ADD exp .
                    From (state 069) exp -> exp * ADD exp .
                    From (state 067) exp -> exp * ADD exp .
                    From (state 065) exp -> exp * ADD exp .
                    From (state 063) exp -> exp * ADD exp .
                    From (state 061) exp -> exp * ADD exp .
                    From (state 059) exp -> exp * ADD exp .
                    From (state 057) exp -> exp * ADD exp .
                    From (state 055) exp -> exp * ADD exp .
                    From (state 053) exp -> exp * ADD exp .
                    From (state 051) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 053) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 53

State 53:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 052) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 052) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 052) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 052) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 052) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 052) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 052) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 052) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 052) exp -> * exp ADD exp .
            (49)exp -> exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 052) exp -> exp ADD * exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 052) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 052) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 052) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 052) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 052) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 052) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 052) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 052) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 052) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 052) exp -> * exp ASSIGN exp .

                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 49

State 54:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * MINUS exp .
                exp -> exp MINUS * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp MINUS exp .
                    To (state 054) exp -> * exp BIAND exp .
                    To (state 054) exp -> * exp BIOR exp .
                    To (state 054) exp -> * exp LSS exp .
                    To (state 054) exp -> * exp LSSEQ exp .
                    To (state 054) exp -> * exp GRT exp .
                    To (state 054) exp -> * exp GRTEQ exp .
                    To (state 054) exp -> * exp EQ exp .
                    To (state 054) exp -> * exp NOTEQ exp .
                    To (state 054) exp -> * exp ADD exp .
                    To (state 054) exp -> * exp MINUS exp .
                    To (state 054) exp -> * exp MULTI exp .
                    To (state 054) exp -> * exp DIV exp .
                    To (state 054) exp -> * exp MOD exp .
                    To (state 054) exp -> * INUM .
                    To (state 054) exp -> * FNUM .
                    To (state 054) exp -> * ID .
                    To (state 054) exp -> * LLB exp RLB .
                    To (state 054) exp -> * NOT exp .
                    To (state 054) exp -> * exp AND exp .
                    To (state 054) exp -> * exp OR exp .
                    To (state 054) exp -> * exp XOR exp .
                    To (state 054) exp -> * exp BITNOT exp .
                    To (state 054) exp -> * exp COMMA exp .
                    To (state 054) exp -> * ID LMB exp RMB .
                    To (state 054) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * MINUS exp .
                    From (state 149) exp -> exp * MINUS exp .
                    From (state 155) exp -> exp * MINUS exp .
                    From (state 100) exp -> exp * MINUS exp .
                    From (state 108) exp -> exp * MINUS exp .
                    From (state 142) exp -> exp * MINUS exp .
                    From (state 140) exp -> exp * MINUS exp .
                    From (state 138) exp -> exp * MINUS exp .
                    From (state 115) exp -> exp * MINUS exp .
                    From (state 130) exp -> exp * MINUS exp .
                    From (state 089) exp -> exp * MINUS exp .
                    From (state 034) exp -> exp * MINUS exp .
                    From (state 037) exp -> exp * MINUS exp .
                    From (state 039) exp -> exp * MINUS exp .
                    From (state 041) exp -> exp * MINUS exp .
                    From (state 043) exp -> exp * MINUS exp .
                    From (state 045) exp -> exp * MINUS exp .
                    From (state 047) exp -> exp * MINUS exp .
                    From (state 049) exp -> exp * MINUS exp .
                    From (state 051) exp -> exp * MINUS exp .
                    From (state 084) exp -> exp * MINUS exp .
                    From (state 081) exp -> exp * MINUS exp .
                    From (state 078) exp -> exp * MINUS exp .
                    From (state 073) exp -> exp * MINUS exp .
                    From (state 071) exp -> exp * MINUS exp .
                    From (state 069) exp -> exp * MINUS exp .
                    From (state 067) exp -> exp * MINUS exp .
                    From (state 065) exp -> exp * MINUS exp .
                    From (state 063) exp -> exp * MINUS exp .
                    From (state 061) exp -> exp * MINUS exp .
                    From (state 059) exp -> exp * MINUS exp .
                    From (state 057) exp -> exp * MINUS exp .
                    From (state 055) exp -> exp * MINUS exp .
                    From (state 053) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 055) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 55

State 55:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 054) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 054) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 054) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 054) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 054) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 054) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 054) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 054) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 054) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 054) exp -> * exp MINUS exp .
            (50)exp -> exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 054) exp -> exp MINUS * exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 054) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 054) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 054) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 054) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 054) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 054) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 054) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 054) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 054) exp -> * exp ASSIGN exp .

                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 50

State 56:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * MULTI exp .
                exp -> exp MULTI * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp MULTI exp .
                    To (state 056) exp -> * exp BIAND exp .
                    To (state 056) exp -> * exp BIOR exp .
                    To (state 056) exp -> * exp LSS exp .
                    To (state 056) exp -> * exp LSSEQ exp .
                    To (state 056) exp -> * exp GRT exp .
                    To (state 056) exp -> * exp GRTEQ exp .
                    To (state 056) exp -> * exp EQ exp .
                    To (state 056) exp -> * exp NOTEQ exp .
                    To (state 056) exp -> * exp ADD exp .
                    To (state 056) exp -> * exp MINUS exp .
                    To (state 056) exp -> * exp MULTI exp .
                    To (state 056) exp -> * exp DIV exp .
                    To (state 056) exp -> * exp MOD exp .
                    To (state 056) exp -> * INUM .
                    To (state 056) exp -> * FNUM .
                    To (state 056) exp -> * ID .
                    To (state 056) exp -> * LLB exp RLB .
                    To (state 056) exp -> * NOT exp .
                    To (state 056) exp -> * exp AND exp .
                    To (state 056) exp -> * exp OR exp .
                    To (state 056) exp -> * exp XOR exp .
                    To (state 056) exp -> * exp BITNOT exp .
                    To (state 056) exp -> * exp COMMA exp .
                    To (state 056) exp -> * ID LMB exp RMB .
                    To (state 056) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * MULTI exp .
                    From (state 149) exp -> exp * MULTI exp .
                    From (state 155) exp -> exp * MULTI exp .
                    From (state 100) exp -> exp * MULTI exp .
                    From (state 108) exp -> exp * MULTI exp .
                    From (state 142) exp -> exp * MULTI exp .
                    From (state 140) exp -> exp * MULTI exp .
                    From (state 138) exp -> exp * MULTI exp .
                    From (state 115) exp -> exp * MULTI exp .
                    From (state 130) exp -> exp * MULTI exp .
                    From (state 089) exp -> exp * MULTI exp .
                    From (state 034) exp -> exp * MULTI exp .
                    From (state 037) exp -> exp * MULTI exp .
                    From (state 039) exp -> exp * MULTI exp .
                    From (state 041) exp -> exp * MULTI exp .
                    From (state 043) exp -> exp * MULTI exp .
                    From (state 045) exp -> exp * MULTI exp .
                    From (state 047) exp -> exp * MULTI exp .
                    From (state 049) exp -> exp * MULTI exp .
                    From (state 051) exp -> exp * MULTI exp .
                    From (state 053) exp -> exp * MULTI exp .
                    From (state 084) exp -> exp * MULTI exp .
                    From (state 081) exp -> exp * MULTI exp .
                    From (state 078) exp -> exp * MULTI exp .
                    From (state 073) exp -> exp * MULTI exp .
                    From (state 071) exp -> exp * MULTI exp .
                    From (state 069) exp -> exp * MULTI exp .
                    From (state 067) exp -> exp * MULTI exp .
                    From (state 065) exp -> exp * MULTI exp .
                    From (state 063) exp -> exp * MULTI exp .
                    From (state 061) exp -> exp * MULTI exp .
                    From (state 059) exp -> exp * MULTI exp .
                    From (state 057) exp -> exp * MULTI exp .
                    From (state 055) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 057) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 57

State 57:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 056) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 056) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 056) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 056) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 056) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 056) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 056) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 056) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 056) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 056) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 056) exp -> * exp MULTI exp .
            (51)exp -> exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 056) exp -> exp MULTI * exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 056) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 056) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 056) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 056) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 056) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 056) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 056) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 056) exp -> * exp ASSIGN exp .

                              BITNOT shift 68
                           [default] reduce 51

State 58:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * DIV exp .
                exp -> exp DIV * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp DIV exp .
                    To (state 058) exp -> * exp BIAND exp .
                    To (state 058) exp -> * exp BIOR exp .
                    To (state 058) exp -> * exp LSS exp .
                    To (state 058) exp -> * exp LSSEQ exp .
                    To (state 058) exp -> * exp GRT exp .
                    To (state 058) exp -> * exp GRTEQ exp .
                    To (state 058) exp -> * exp EQ exp .
                    To (state 058) exp -> * exp NOTEQ exp .
                    To (state 058) exp -> * exp ADD exp .
                    To (state 058) exp -> * exp MINUS exp .
                    To (state 058) exp -> * exp MULTI exp .
                    To (state 058) exp -> * exp DIV exp .
                    To (state 058) exp -> * exp MOD exp .
                    To (state 058) exp -> * INUM .
                    To (state 058) exp -> * FNUM .
                    To (state 058) exp -> * ID .
                    To (state 058) exp -> * LLB exp RLB .
                    To (state 058) exp -> * NOT exp .
                    To (state 058) exp -> * exp AND exp .
                    To (state 058) exp -> * exp OR exp .
                    To (state 058) exp -> * exp XOR exp .
                    To (state 058) exp -> * exp BITNOT exp .
                    To (state 058) exp -> * exp COMMA exp .
                    To (state 058) exp -> * ID LMB exp RMB .
                    To (state 058) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * DIV exp .
                    From (state 149) exp -> exp * DIV exp .
                    From (state 155) exp -> exp * DIV exp .
                    From (state 100) exp -> exp * DIV exp .
                    From (state 108) exp -> exp * DIV exp .
                    From (state 142) exp -> exp * DIV exp .
                    From (state 140) exp -> exp * DIV exp .
                    From (state 138) exp -> exp * DIV exp .
                    From (state 115) exp -> exp * DIV exp .
                    From (state 130) exp -> exp * DIV exp .
                    From (state 089) exp -> exp * DIV exp .
                    From (state 034) exp -> exp * DIV exp .
                    From (state 037) exp -> exp * DIV exp .
                    From (state 039) exp -> exp * DIV exp .
                    From (state 041) exp -> exp * DIV exp .
                    From (state 043) exp -> exp * DIV exp .
                    From (state 045) exp -> exp * DIV exp .
                    From (state 047) exp -> exp * DIV exp .
                    From (state 049) exp -> exp * DIV exp .
                    From (state 051) exp -> exp * DIV exp .
                    From (state 053) exp -> exp * DIV exp .
                    From (state 055) exp -> exp * DIV exp .
                    From (state 084) exp -> exp * DIV exp .
                    From (state 081) exp -> exp * DIV exp .
                    From (state 078) exp -> exp * DIV exp .
                    From (state 073) exp -> exp * DIV exp .
                    From (state 071) exp -> exp * DIV exp .
                    From (state 069) exp -> exp * DIV exp .
                    From (state 067) exp -> exp * DIV exp .
                    From (state 065) exp -> exp * DIV exp .
                    From (state 063) exp -> exp * DIV exp .
                    From (state 061) exp -> exp * DIV exp .
                    From (state 059) exp -> exp * DIV exp .
                    From (state 057) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 059) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 59

State 59:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 058) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 058) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 058) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 058) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 058) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 058) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 058) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 058) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 058) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 058) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 058) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 058) exp -> * exp DIV exp .
            (52)exp -> exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 058) exp -> exp DIV * exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 058) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 058) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 058) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 058) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 058) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 058) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 058) exp -> * exp ASSIGN exp .

                              BITNOT shift 68
                           [default] reduce 52

State 60:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * MOD exp .
                exp -> exp MOD * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp MOD exp .
                    To (state 060) exp -> * exp BIAND exp .
                    To (state 060) exp -> * exp BIOR exp .
                    To (state 060) exp -> * exp LSS exp .
                    To (state 060) exp -> * exp LSSEQ exp .
                    To (state 060) exp -> * exp GRT exp .
                    To (state 060) exp -> * exp GRTEQ exp .
                    To (state 060) exp -> * exp EQ exp .
                    To (state 060) exp -> * exp NOTEQ exp .
                    To (state 060) exp -> * exp ADD exp .
                    To (state 060) exp -> * exp MINUS exp .
                    To (state 060) exp -> * exp MULTI exp .
                    To (state 060) exp -> * exp DIV exp .
                    To (state 060) exp -> * exp MOD exp .
                    To (state 060) exp -> * INUM .
                    To (state 060) exp -> * FNUM .
                    To (state 060) exp -> * ID .
                    To (state 060) exp -> * LLB exp RLB .
                    To (state 060) exp -> * NOT exp .
                    To (state 060) exp -> * exp AND exp .
                    To (state 060) exp -> * exp OR exp .
                    To (state 060) exp -> * exp XOR exp .
                    To (state 060) exp -> * exp BITNOT exp .
                    To (state 060) exp -> * exp COMMA exp .
                    To (state 060) exp -> * ID LMB exp RMB .
                    To (state 060) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * MOD exp .
                    From (state 149) exp -> exp * MOD exp .
                    From (state 155) exp -> exp * MOD exp .
                    From (state 100) exp -> exp * MOD exp .
                    From (state 108) exp -> exp * MOD exp .
                    From (state 142) exp -> exp * MOD exp .
                    From (state 140) exp -> exp * MOD exp .
                    From (state 138) exp -> exp * MOD exp .
                    From (state 115) exp -> exp * MOD exp .
                    From (state 130) exp -> exp * MOD exp .
                    From (state 089) exp -> exp * MOD exp .
                    From (state 034) exp -> exp * MOD exp .
                    From (state 037) exp -> exp * MOD exp .
                    From (state 039) exp -> exp * MOD exp .
                    From (state 041) exp -> exp * MOD exp .
                    From (state 043) exp -> exp * MOD exp .
                    From (state 045) exp -> exp * MOD exp .
                    From (state 047) exp -> exp * MOD exp .
                    From (state 049) exp -> exp * MOD exp .
                    From (state 051) exp -> exp * MOD exp .
                    From (state 053) exp -> exp * MOD exp .
                    From (state 055) exp -> exp * MOD exp .
                    From (state 057) exp -> exp * MOD exp .
                    From (state 084) exp -> exp * MOD exp .
                    From (state 081) exp -> exp * MOD exp .
                    From (state 078) exp -> exp * MOD exp .
                    From (state 073) exp -> exp * MOD exp .
                    From (state 071) exp -> exp * MOD exp .
                    From (state 069) exp -> exp * MOD exp .
                    From (state 067) exp -> exp * MOD exp .
                    From (state 065) exp -> exp * MOD exp .
                    From (state 063) exp -> exp * MOD exp .
                    From (state 061) exp -> exp * MOD exp .
                    From (state 059) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 061) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 61

State 61:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 060) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 060) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 060) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 060) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 060) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 060) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 060) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 060) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 060) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 060) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 060) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 060) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 060) exp -> * exp MOD exp .
            (53)exp -> exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 060) exp -> exp MOD * exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 060) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 060) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 060) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 060) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 060) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 060) exp -> * exp ASSIGN exp .

                              BITNOT shift 68
                           [default] reduce 53

State 62:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * AND exp .
                exp -> exp AND * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp AND exp .
                    To (state 062) exp -> * exp BIAND exp .
                    To (state 062) exp -> * exp BIOR exp .
                    To (state 062) exp -> * exp LSS exp .
                    To (state 062) exp -> * exp LSSEQ exp .
                    To (state 062) exp -> * exp GRT exp .
                    To (state 062) exp -> * exp GRTEQ exp .
                    To (state 062) exp -> * exp EQ exp .
                    To (state 062) exp -> * exp NOTEQ exp .
                    To (state 062) exp -> * exp ADD exp .
                    To (state 062) exp -> * exp MINUS exp .
                    To (state 062) exp -> * exp MULTI exp .
                    To (state 062) exp -> * exp DIV exp .
                    To (state 062) exp -> * exp MOD exp .
                    To (state 062) exp -> * INUM .
                    To (state 062) exp -> * FNUM .
                    To (state 062) exp -> * ID .
                    To (state 062) exp -> * LLB exp RLB .
                    To (state 062) exp -> * NOT exp .
                    To (state 062) exp -> * exp AND exp .
                    To (state 062) exp -> * exp OR exp .
                    To (state 062) exp -> * exp XOR exp .
                    To (state 062) exp -> * exp BITNOT exp .
                    To (state 062) exp -> * exp COMMA exp .
                    To (state 062) exp -> * ID LMB exp RMB .
                    To (state 062) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * AND exp .
                    From (state 149) exp -> exp * AND exp .
                    From (state 155) exp -> exp * AND exp .
                    From (state 100) exp -> exp * AND exp .
                    From (state 108) exp -> exp * AND exp .
                    From (state 142) exp -> exp * AND exp .
                    From (state 140) exp -> exp * AND exp .
                    From (state 138) exp -> exp * AND exp .
                    From (state 115) exp -> exp * AND exp .
                    From (state 130) exp -> exp * AND exp .
                    From (state 089) exp -> exp * AND exp .
                    From (state 034) exp -> exp * AND exp .
                    From (state 037) exp -> exp * AND exp .
                    From (state 039) exp -> exp * AND exp .
                    From (state 041) exp -> exp * AND exp .
                    From (state 043) exp -> exp * AND exp .
                    From (state 045) exp -> exp * AND exp .
                    From (state 047) exp -> exp * AND exp .
                    From (state 049) exp -> exp * AND exp .
                    From (state 051) exp -> exp * AND exp .
                    From (state 053) exp -> exp * AND exp .
                    From (state 055) exp -> exp * AND exp .
                    From (state 057) exp -> exp * AND exp .
                    From (state 059) exp -> exp * AND exp .
                    From (state 084) exp -> exp * AND exp .
                    From (state 081) exp -> exp * AND exp .
                    From (state 078) exp -> exp * AND exp .
                    From (state 073) exp -> exp * AND exp .
                    From (state 071) exp -> exp * AND exp .
                    From (state 069) exp -> exp * AND exp .
                    From (state 067) exp -> exp * AND exp .
                    From (state 065) exp -> exp * AND exp .
                    From (state 063) exp -> exp * AND exp .
                    From (state 061) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 063) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 63

State 63:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 062) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 062) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 062) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 062) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 062) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 062) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 062) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 062) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 062) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 062) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 062) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 062) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 062) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 062) exp -> * exp AND exp .
            (59)exp -> exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 062) exp -> exp AND * exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 062) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 062) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 062) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 062) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 062) exp -> * exp ASSIGN exp .

                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 59

State 64:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * OR exp .
                exp -> exp OR * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp OR exp .
                    To (state 064) exp -> * exp BIAND exp .
                    To (state 064) exp -> * exp BIOR exp .
                    To (state 064) exp -> * exp LSS exp .
                    To (state 064) exp -> * exp LSSEQ exp .
                    To (state 064) exp -> * exp GRT exp .
                    To (state 064) exp -> * exp GRTEQ exp .
                    To (state 064) exp -> * exp EQ exp .
                    To (state 064) exp -> * exp NOTEQ exp .
                    To (state 064) exp -> * exp ADD exp .
                    To (state 064) exp -> * exp MINUS exp .
                    To (state 064) exp -> * exp MULTI exp .
                    To (state 064) exp -> * exp DIV exp .
                    To (state 064) exp -> * exp MOD exp .
                    To (state 064) exp -> * INUM .
                    To (state 064) exp -> * FNUM .
                    To (state 064) exp -> * ID .
                    To (state 064) exp -> * LLB exp RLB .
                    To (state 064) exp -> * NOT exp .
                    To (state 064) exp -> * exp AND exp .
                    To (state 064) exp -> * exp OR exp .
                    To (state 064) exp -> * exp XOR exp .
                    To (state 064) exp -> * exp BITNOT exp .
                    To (state 064) exp -> * exp COMMA exp .
                    To (state 064) exp -> * ID LMB exp RMB .
                    To (state 064) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * OR exp .
                    From (state 149) exp -> exp * OR exp .
                    From (state 155) exp -> exp * OR exp .
                    From (state 100) exp -> exp * OR exp .
                    From (state 108) exp -> exp * OR exp .
                    From (state 142) exp -> exp * OR exp .
                    From (state 140) exp -> exp * OR exp .
                    From (state 138) exp -> exp * OR exp .
                    From (state 115) exp -> exp * OR exp .
                    From (state 130) exp -> exp * OR exp .
                    From (state 089) exp -> exp * OR exp .
                    From (state 034) exp -> exp * OR exp .
                    From (state 037) exp -> exp * OR exp .
                    From (state 039) exp -> exp * OR exp .
                    From (state 041) exp -> exp * OR exp .
                    From (state 043) exp -> exp * OR exp .
                    From (state 045) exp -> exp * OR exp .
                    From (state 047) exp -> exp * OR exp .
                    From (state 049) exp -> exp * OR exp .
                    From (state 051) exp -> exp * OR exp .
                    From (state 053) exp -> exp * OR exp .
                    From (state 055) exp -> exp * OR exp .
                    From (state 057) exp -> exp * OR exp .
                    From (state 059) exp -> exp * OR exp .
                    From (state 061) exp -> exp * OR exp .
                    From (state 084) exp -> exp * OR exp .
                    From (state 081) exp -> exp * OR exp .
                    From (state 078) exp -> exp * OR exp .
                    From (state 073) exp -> exp * OR exp .
                    From (state 071) exp -> exp * OR exp .
                    From (state 069) exp -> exp * OR exp .
                    From (state 067) exp -> exp * OR exp .
                    From (state 065) exp -> exp * OR exp .
                    From (state 063) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 065) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 65

State 65:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 064) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 064) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 064) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 064) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 064) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 064) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 064) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 064) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 064) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 064) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 064) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 064) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 064) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 064) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 064) exp -> * exp OR exp .
            (60)exp -> exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 064) exp -> exp OR * exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 064) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 064) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 064) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 064) exp -> * exp ASSIGN exp .

                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 60

State 66:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * XOR exp .
                exp -> exp XOR * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp XOR exp .
                    To (state 066) exp -> * exp BIAND exp .
                    To (state 066) exp -> * exp BIOR exp .
                    To (state 066) exp -> * exp LSS exp .
                    To (state 066) exp -> * exp LSSEQ exp .
                    To (state 066) exp -> * exp GRT exp .
                    To (state 066) exp -> * exp GRTEQ exp .
                    To (state 066) exp -> * exp EQ exp .
                    To (state 066) exp -> * exp NOTEQ exp .
                    To (state 066) exp -> * exp ADD exp .
                    To (state 066) exp -> * exp MINUS exp .
                    To (state 066) exp -> * exp MULTI exp .
                    To (state 066) exp -> * exp DIV exp .
                    To (state 066) exp -> * exp MOD exp .
                    To (state 066) exp -> * INUM .
                    To (state 066) exp -> * FNUM .
                    To (state 066) exp -> * ID .
                    To (state 066) exp -> * LLB exp RLB .
                    To (state 066) exp -> * NOT exp .
                    To (state 066) exp -> * exp AND exp .
                    To (state 066) exp -> * exp OR exp .
                    To (state 066) exp -> * exp XOR exp .
                    To (state 066) exp -> * exp BITNOT exp .
                    To (state 066) exp -> * exp COMMA exp .
                    To (state 066) exp -> * ID LMB exp RMB .
                    To (state 066) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * XOR exp .
                    From (state 149) exp -> exp * XOR exp .
                    From (state 155) exp -> exp * XOR exp .
                    From (state 100) exp -> exp * XOR exp .
                    From (state 108) exp -> exp * XOR exp .
                    From (state 142) exp -> exp * XOR exp .
                    From (state 140) exp -> exp * XOR exp .
                    From (state 138) exp -> exp * XOR exp .
                    From (state 115) exp -> exp * XOR exp .
                    From (state 130) exp -> exp * XOR exp .
                    From (state 089) exp -> exp * XOR exp .
                    From (state 034) exp -> exp * XOR exp .
                    From (state 037) exp -> exp * XOR exp .
                    From (state 039) exp -> exp * XOR exp .
                    From (state 041) exp -> exp * XOR exp .
                    From (state 043) exp -> exp * XOR exp .
                    From (state 045) exp -> exp * XOR exp .
                    From (state 047) exp -> exp * XOR exp .
                    From (state 049) exp -> exp * XOR exp .
                    From (state 051) exp -> exp * XOR exp .
                    From (state 053) exp -> exp * XOR exp .
                    From (state 055) exp -> exp * XOR exp .
                    From (state 057) exp -> exp * XOR exp .
                    From (state 059) exp -> exp * XOR exp .
                    From (state 061) exp -> exp * XOR exp .
                    From (state 063) exp -> exp * XOR exp .
                    From (state 084) exp -> exp * XOR exp .
                    From (state 081) exp -> exp * XOR exp .
                    From (state 078) exp -> exp * XOR exp .
                    From (state 073) exp -> exp * XOR exp .
                    From (state 071) exp -> exp * XOR exp .
                    From (state 069) exp -> exp * XOR exp .
                    From (state 067) exp -> exp * XOR exp .
                    From (state 065) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 067) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 67

State 67:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 066) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 066) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 066) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 066) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 066) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 066) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 066) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 066) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 066) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 066) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 066) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 066) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 066) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 066) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 066) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 066) exp -> * exp XOR exp .
            (61)exp -> exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 066) exp -> exp XOR * exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 066) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 066) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 066) exp -> * exp ASSIGN exp .

                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 61

State 68:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * BITNOT exp .
                exp -> exp BITNOT * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp BITNOT exp .
                    To (state 068) exp -> * exp BIAND exp .
                    To (state 068) exp -> * exp BIOR exp .
                    To (state 068) exp -> * exp LSS exp .
                    To (state 068) exp -> * exp LSSEQ exp .
                    To (state 068) exp -> * exp GRT exp .
                    To (state 068) exp -> * exp GRTEQ exp .
                    To (state 068) exp -> * exp EQ exp .
                    To (state 068) exp -> * exp NOTEQ exp .
                    To (state 068) exp -> * exp ADD exp .
                    To (state 068) exp -> * exp MINUS exp .
                    To (state 068) exp -> * exp MULTI exp .
                    To (state 068) exp -> * exp DIV exp .
                    To (state 068) exp -> * exp MOD exp .
                    To (state 068) exp -> * INUM .
                    To (state 068) exp -> * FNUM .
                    To (state 068) exp -> * ID .
                    To (state 068) exp -> * LLB exp RLB .
                    To (state 068) exp -> * NOT exp .
                    To (state 068) exp -> * exp AND exp .
                    To (state 068) exp -> * exp OR exp .
                    To (state 068) exp -> * exp XOR exp .
                    To (state 068) exp -> * exp BITNOT exp .
                    To (state 068) exp -> * exp COMMA exp .
                    To (state 068) exp -> * ID LMB exp RMB .
                    To (state 068) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * BITNOT exp .
                    From (state 149) exp -> exp * BITNOT exp .
                    From (state 155) exp -> exp * BITNOT exp .
                    From (state 100) exp -> exp * BITNOT exp .
                    From (state 108) exp -> exp * BITNOT exp .
                    From (state 142) exp -> exp * BITNOT exp .
                    From (state 140) exp -> exp * BITNOT exp .
                    From (state 138) exp -> exp * BITNOT exp .
                    From (state 115) exp -> exp * BITNOT exp .
                    From (state 130) exp -> exp * BITNOT exp .
                    From (state 089) exp -> exp * BITNOT exp .
                    From (state 034) exp -> exp * BITNOT exp .
                    From (state 037) exp -> exp * BITNOT exp .
                    From (state 039) exp -> exp * BITNOT exp .
                    From (state 041) exp -> exp * BITNOT exp .
                    From (state 043) exp -> exp * BITNOT exp .
                    From (state 045) exp -> exp * BITNOT exp .
                    From (state 047) exp -> exp * BITNOT exp .
                    From (state 049) exp -> exp * BITNOT exp .
                    From (state 051) exp -> exp * BITNOT exp .
                    From (state 053) exp -> exp * BITNOT exp .
                    From (state 055) exp -> exp * BITNOT exp .
                    From (state 057) exp -> exp * BITNOT exp .
                    From (state 059) exp -> exp * BITNOT exp .
                    From (state 061) exp -> exp * BITNOT exp .
                    From (state 063) exp -> exp * BITNOT exp .
                    From (state 065) exp -> exp * BITNOT exp .
                    From (state 084) exp -> exp * BITNOT exp .
                    From (state 081) exp -> exp * BITNOT exp .
                    From (state 078) exp -> exp * BITNOT exp .
                    From (state 073) exp -> exp * BITNOT exp .
                    From (state 071) exp -> exp * BITNOT exp .
                    From (state 069) exp -> exp * BITNOT exp .
                    From (state 067) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 069) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 69

State 69:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 068) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 068) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 068) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 068) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 068) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 068) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 068) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 068) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 068) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 068) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 068) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 068) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 068) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 068) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 068) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 068) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 068) exp -> * exp BITNOT exp .
            (62)exp -> exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 068) exp -> exp BITNOT * exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 068) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 068) exp -> * exp ASSIGN exp .

                              BITNOT shift 68
                           [default] reduce 62

State 70:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * COMMA exp .
                exp -> exp COMMA * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp COMMA exp .
                    To (state 070) exp -> * exp BIAND exp .
                    To (state 070) exp -> * exp BIOR exp .
                    To (state 070) exp -> * exp LSS exp .
                    To (state 070) exp -> * exp LSSEQ exp .
                    To (state 070) exp -> * exp GRT exp .
                    To (state 070) exp -> * exp GRTEQ exp .
                    To (state 070) exp -> * exp EQ exp .
                    To (state 070) exp -> * exp NOTEQ exp .
                    To (state 070) exp -> * exp ADD exp .
                    To (state 070) exp -> * exp MINUS exp .
                    To (state 070) exp -> * exp MULTI exp .
                    To (state 070) exp -> * exp DIV exp .
                    To (state 070) exp -> * exp MOD exp .
                    To (state 070) exp -> * INUM .
                    To (state 070) exp -> * FNUM .
                    To (state 070) exp -> * ID .
                    To (state 070) exp -> * LLB exp RLB .
                    To (state 070) exp -> * NOT exp .
                    To (state 070) exp -> * exp AND exp .
                    To (state 070) exp -> * exp OR exp .
                    To (state 070) exp -> * exp XOR exp .
                    To (state 070) exp -> * exp BITNOT exp .
                    To (state 070) exp -> * exp COMMA exp .
                    To (state 070) exp -> * ID LMB exp RMB .
                    To (state 070) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * COMMA exp .
                    From (state 149) exp -> exp * COMMA exp .
                    From (state 155) exp -> exp * COMMA exp .
                    From (state 100) exp -> exp * COMMA exp .
                    From (state 108) exp -> exp * COMMA exp .
                    From (state 142) exp -> exp * COMMA exp .
                    From (state 140) exp -> exp * COMMA exp .
                    From (state 138) exp -> exp * COMMA exp .
                    From (state 115) exp -> exp * COMMA exp .
                    From (state 130) exp -> exp * COMMA exp .
                    From (state 089) exp -> exp * COMMA exp .
                    From (state 034) exp -> exp * COMMA exp .
                    From (state 037) exp -> exp * COMMA exp .
                    From (state 039) exp -> exp * COMMA exp .
                    From (state 041) exp -> exp * COMMA exp .
                    From (state 043) exp -> exp * COMMA exp .
                    From (state 045) exp -> exp * COMMA exp .
                    From (state 047) exp -> exp * COMMA exp .
                    From (state 049) exp -> exp * COMMA exp .
                    From (state 051) exp -> exp * COMMA exp .
                    From (state 053) exp -> exp * COMMA exp .
                    From (state 055) exp -> exp * COMMA exp .
                    From (state 057) exp -> exp * COMMA exp .
                    From (state 059) exp -> exp * COMMA exp .
                    From (state 061) exp -> exp * COMMA exp .
                    From (state 063) exp -> exp * COMMA exp .
                    From (state 065) exp -> exp * COMMA exp .
                    From (state 067) exp -> exp * COMMA exp .
                    From (state 084) exp -> exp * COMMA exp .
                    From (state 081) exp -> exp * COMMA exp .
                    From (state 078) exp -> exp * COMMA exp .
                    From (state 073) exp -> exp * COMMA exp .
                    From (state 071) exp -> exp * COMMA exp .
                    From (state 069) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 071) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 71

State 71:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 070) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 070) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 070) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 070) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 070) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 070) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 070) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 070) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 070) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 070) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 070) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 070) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 070) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 070) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 070) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 070) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 070) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 070) exp -> * exp COMMA exp .
            (63)exp -> exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 070) exp -> exp COMMA * exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 070) exp -> * exp ASSIGN exp .

                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 63

State 72:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp * ASSIGN exp .
                exp -> exp ASSIGN * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 073) exp -> exp ASSIGN exp .
                    To (state 072) exp -> * exp BIAND exp .
                    To (state 072) exp -> * exp BIOR exp .
                    To (state 072) exp -> * exp LSS exp .
                    To (state 072) exp -> * exp LSSEQ exp .
                    To (state 072) exp -> * exp GRT exp .
                    To (state 072) exp -> * exp GRTEQ exp .
                    To (state 072) exp -> * exp EQ exp .
                    To (state 072) exp -> * exp NOTEQ exp .
                    To (state 072) exp -> * exp ADD exp .
                    To (state 072) exp -> * exp MINUS exp .
                    To (state 072) exp -> * exp MULTI exp .
                    To (state 072) exp -> * exp DIV exp .
                    To (state 072) exp -> * exp MOD exp .
                    To (state 072) exp -> * INUM .
                    To (state 072) exp -> * FNUM .
                    To (state 072) exp -> * ID .
                    To (state 072) exp -> * LLB exp RLB .
                    To (state 072) exp -> * NOT exp .
                    To (state 072) exp -> * exp AND exp .
                    To (state 072) exp -> * exp OR exp .
                    To (state 072) exp -> * exp XOR exp .
                    To (state 072) exp -> * exp BITNOT exp .
                    To (state 072) exp -> * exp COMMA exp .
                    To (state 072) exp -> * ID LMB exp RMB .
                    To (state 072) exp -> * exp ASSIGN exp .
                    From (state 096) exp -> exp * ASSIGN exp .
                    From (state 149) exp -> exp * ASSIGN exp .
                    From (state 155) exp -> exp * ASSIGN exp .
                    From (state 100) exp -> exp * ASSIGN exp .
                    From (state 108) exp -> exp * ASSIGN exp .
                    From (state 142) exp -> exp * ASSIGN exp .
                    From (state 140) exp -> exp * ASSIGN exp .
                    From (state 138) exp -> exp * ASSIGN exp .
                    From (state 115) exp -> exp * ASSIGN exp .
                    From (state 130) exp -> exp * ASSIGN exp .
                    From (state 089) exp -> exp * ASSIGN exp .
                    From (state 034) exp -> exp * ASSIGN exp .
                    From (state 037) exp -> exp * ASSIGN exp .
                    From (state 039) exp -> exp * ASSIGN exp .
                    From (state 041) exp -> exp * ASSIGN exp .
                    From (state 043) exp -> exp * ASSIGN exp .
                    From (state 045) exp -> exp * ASSIGN exp .
                    From (state 047) exp -> exp * ASSIGN exp .
                    From (state 049) exp -> exp * ASSIGN exp .
                    From (state 051) exp -> exp * ASSIGN exp .
                    From (state 053) exp -> exp * ASSIGN exp .
                    From (state 055) exp -> exp * ASSIGN exp .
                    From (state 057) exp -> exp * ASSIGN exp .
                    From (state 059) exp -> exp * ASSIGN exp .
                    From (state 061) exp -> exp * ASSIGN exp .
                    From (state 063) exp -> exp * ASSIGN exp .
                    From (state 065) exp -> exp * ASSIGN exp .
                    From (state 067) exp -> exp * ASSIGN exp .
                    From (state 069) exp -> exp * ASSIGN exp .
                    From (state 084) exp -> exp * ASSIGN exp .
                    From (state 081) exp -> exp * ASSIGN exp .
                    From (state 078) exp -> exp * ASSIGN exp .
                    From (state 073) exp -> exp * ASSIGN exp .
                    From (state 071) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 73

State 73:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 072) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 072) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 072) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 072) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 072) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 072) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 072) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 072) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 072) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 072) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 072) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 072) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 072) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 072) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 072) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 072) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 072) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 072) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 072) exp -> * exp ASSIGN exp .
            (65)exp -> exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 072) exp -> exp ASSIGN * exp .

                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 65

State 74:
            (54)exp -> INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 029) exp -> * INUM .
                    From (state 032) exp -> * INUM .
                    From (state 091) exp -> * INUM .
                    From (state 095) exp -> * INUM .
                    From (state 097) exp -> * INUM .
                    From (state 146) exp -> * INUM .
                    From (state 148) exp -> * INUM .
                    From (state 150) exp -> * INUM .
                    From (state 154) exp -> * INUM .
                    From (state 158) exp -> * INUM .
                    From (state 099) exp -> * INUM .
                    From (state 101) exp -> * INUM .
                    From (state 104) exp -> * INUM .
                    From (state 107) exp -> * INUM .
                    From (state 109) exp -> * INUM .
                    From (state 141) exp -> * INUM .
                    From (state 139) exp -> * INUM .
                    From (state 137) exp -> * INUM .
                    From (state 114) exp -> * INUM .
                    From (state 129) exp -> * INUM .
                    From (state 118) exp -> * INUM .
                    From (state 088) exp -> * INUM .
                    From (state 036) exp -> * INUM .
                    From (state 038) exp -> * INUM .
                    From (state 040) exp -> * INUM .
                    From (state 042) exp -> * INUM .
                    From (state 044) exp -> * INUM .
                    From (state 046) exp -> * INUM .
                    From (state 048) exp -> * INUM .
                    From (state 050) exp -> * INUM .
                    From (state 052) exp -> * INUM .
                    From (state 054) exp -> * INUM .
                    From (state 056) exp -> * INUM .
                    From (state 058) exp -> * INUM .
                    From (state 060) exp -> * INUM .
                    From (state 062) exp -> * INUM .
                    From (state 064) exp -> * INUM .
                    From (state 066) exp -> * INUM .
                    From (state 068) exp -> * INUM .
                    From (state 070) exp -> * INUM .
                    From (state 083) exp -> * INUM .
                    From (state 080) exp -> * INUM .
                    From (state 077) exp -> * INUM .
                    From (state 072) exp -> * INUM .

                           [default] reduce 54

State 75:
            (55)exp -> FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 029) exp -> * FNUM .
                    From (state 032) exp -> * FNUM .
                    From (state 091) exp -> * FNUM .
                    From (state 095) exp -> * FNUM .
                    From (state 097) exp -> * FNUM .
                    From (state 146) exp -> * FNUM .
                    From (state 148) exp -> * FNUM .
                    From (state 150) exp -> * FNUM .
                    From (state 154) exp -> * FNUM .
                    From (state 158) exp -> * FNUM .
                    From (state 099) exp -> * FNUM .
                    From (state 101) exp -> * FNUM .
                    From (state 104) exp -> * FNUM .
                    From (state 107) exp -> * FNUM .
                    From (state 109) exp -> * FNUM .
                    From (state 141) exp -> * FNUM .
                    From (state 139) exp -> * FNUM .
                    From (state 137) exp -> * FNUM .
                    From (state 114) exp -> * FNUM .
                    From (state 129) exp -> * FNUM .
                    From (state 118) exp -> * FNUM .
                    From (state 088) exp -> * FNUM .
                    From (state 036) exp -> * FNUM .
                    From (state 038) exp -> * FNUM .
                    From (state 040) exp -> * FNUM .
                    From (state 042) exp -> * FNUM .
                    From (state 044) exp -> * FNUM .
                    From (state 046) exp -> * FNUM .
                    From (state 048) exp -> * FNUM .
                    From (state 050) exp -> * FNUM .
                    From (state 052) exp -> * FNUM .
                    From (state 054) exp -> * FNUM .
                    From (state 056) exp -> * FNUM .
                    From (state 058) exp -> * FNUM .
                    From (state 060) exp -> * FNUM .
                    From (state 062) exp -> * FNUM .
                    From (state 064) exp -> * FNUM .
                    From (state 066) exp -> * FNUM .
                    From (state 068) exp -> * FNUM .
                    From (state 070) exp -> * FNUM .
                    From (state 083) exp -> * FNUM .
                    From (state 080) exp -> * FNUM .
                    From (state 077) exp -> * FNUM .
                    From (state 072) exp -> * FNUM .

                           [default] reduce 55

State 76:
            (56)exp -> ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 029) exp -> * ID .
                    From (state 032) exp -> * ID .
                    From (state 091) exp -> * ID .
                    From (state 095) exp -> * ID .
                    From (state 097) exp -> * ID .
                    From (state 146) exp -> * ID .
                    From (state 148) exp -> * ID .
                    From (state 150) exp -> * ID .
                    From (state 154) exp -> * ID .
                    From (state 158) exp -> * ID .
                    From (state 099) exp -> * ID .
                    From (state 101) exp -> * ID .
                    From (state 104) exp -> * ID .
                    From (state 107) exp -> * ID .
                    From (state 109) exp -> * ID .
                    From (state 141) exp -> * ID .
                    From (state 139) exp -> * ID .
                    From (state 137) exp -> * ID .
                    From (state 114) exp -> * ID .
                    From (state 129) exp -> * ID .
                    From (state 118) exp -> * ID .
                    From (state 088) exp -> * ID .
                    From (state 036) exp -> * ID .
                    From (state 038) exp -> * ID .
                    From (state 040) exp -> * ID .
                    From (state 042) exp -> * ID .
                    From (state 044) exp -> * ID .
                    From (state 046) exp -> * ID .
                    From (state 048) exp -> * ID .
                    From (state 050) exp -> * ID .
                    From (state 052) exp -> * ID .
                    From (state 054) exp -> * ID .
                    From (state 056) exp -> * ID .
                    From (state 058) exp -> * ID .
                    From (state 060) exp -> * ID .
                    From (state 062) exp -> * ID .
                    From (state 064) exp -> * ID .
                    From (state 066) exp -> * ID .
                    From (state 068) exp -> * ID .
                    From (state 070) exp -> * ID .
                    From (state 083) exp -> * ID .
                    From (state 080) exp -> * ID .
                    From (state 077) exp -> * ID .
                    From (state 072) exp -> * ID .
                exp -> ID * LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 077) exp -> ID LMB * exp RMB .
                    From (state 029) exp -> * ID LMB exp RMB .
                    From (state 032) exp -> * ID LMB exp RMB .
                    From (state 091) exp -> * ID LMB exp RMB .
                    From (state 095) exp -> * ID LMB exp RMB .
                    From (state 097) exp -> * ID LMB exp RMB .
                    From (state 146) exp -> * ID LMB exp RMB .
                    From (state 148) exp -> * ID LMB exp RMB .
                    From (state 150) exp -> * ID LMB exp RMB .
                    From (state 154) exp -> * ID LMB exp RMB .
                    From (state 158) exp -> * ID LMB exp RMB .
                    From (state 099) exp -> * ID LMB exp RMB .
                    From (state 101) exp -> * ID LMB exp RMB .
                    From (state 104) exp -> * ID LMB exp RMB .
                    From (state 107) exp -> * ID LMB exp RMB .
                    From (state 109) exp -> * ID LMB exp RMB .
                    From (state 141) exp -> * ID LMB exp RMB .
                    From (state 139) exp -> * ID LMB exp RMB .
                    From (state 137) exp -> * ID LMB exp RMB .
                    From (state 114) exp -> * ID LMB exp RMB .
                    From (state 129) exp -> * ID LMB exp RMB .
                    From (state 118) exp -> * ID LMB exp RMB .
                    From (state 088) exp -> * ID LMB exp RMB .
                    From (state 036) exp -> * ID LMB exp RMB .
                    From (state 038) exp -> * ID LMB exp RMB .
                    From (state 040) exp -> * ID LMB exp RMB .
                    From (state 042) exp -> * ID LMB exp RMB .
                    From (state 044) exp -> * ID LMB exp RMB .
                    From (state 046) exp -> * ID LMB exp RMB .
                    From (state 048) exp -> * ID LMB exp RMB .
                    From (state 050) exp -> * ID LMB exp RMB .
                    From (state 052) exp -> * ID LMB exp RMB .
                    From (state 054) exp -> * ID LMB exp RMB .
                    From (state 056) exp -> * ID LMB exp RMB .
                    From (state 058) exp -> * ID LMB exp RMB .
                    From (state 060) exp -> * ID LMB exp RMB .
                    From (state 062) exp -> * ID LMB exp RMB .
                    From (state 064) exp -> * ID LMB exp RMB .
                    From (state 066) exp -> * ID LMB exp RMB .
                    From (state 068) exp -> * ID LMB exp RMB .
                    From (state 070) exp -> * ID LMB exp RMB .
                    From (state 083) exp -> * ID LMB exp RMB .
                    From (state 080) exp -> * ID LMB exp RMB .
                    From (state 077) exp -> * ID LMB exp RMB .
                    From (state 072) exp -> * ID LMB exp RMB .

                                 LMB shift 77
                           [default] reduce 56

State 77:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> ID LMB * exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 078) exp -> ID LMB exp * RMB .
                    From (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 78

State 78:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 077) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 077) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 077) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 077) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 077) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 077) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 077) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 077) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 077) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 077) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 077) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 077) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 077) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 077) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 077) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 077) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 077) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 077) exp -> * exp COMMA exp .
                exp -> ID LMB exp * RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 079) exp -> ID LMB exp RMB .
                    From (state 077) exp -> ID LMB * exp RMB .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 077) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RMB shift 79

State 79:
            (64)exp -> ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 078) exp -> ID LMB exp * RMB .

                           [default] reduce 64

State 80:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> LLB * exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 081) exp -> LLB exp * RLB .
                    From (state 029) exp -> * LLB exp RLB .
                    From (state 032) exp -> * LLB exp RLB .
                    From (state 091) exp -> * LLB exp RLB .
                    From (state 095) exp -> * LLB exp RLB .
                    From (state 097) exp -> * LLB exp RLB .
                    From (state 146) exp -> * LLB exp RLB .
                    From (state 148) exp -> * LLB exp RLB .
                    From (state 150) exp -> * LLB exp RLB .
                    From (state 154) exp -> * LLB exp RLB .
                    From (state 158) exp -> * LLB exp RLB .
                    From (state 099) exp -> * LLB exp RLB .
                    From (state 101) exp -> * LLB exp RLB .
                    From (state 104) exp -> * LLB exp RLB .
                    From (state 107) exp -> * LLB exp RLB .
                    From (state 109) exp -> * LLB exp RLB .
                    From (state 141) exp -> * LLB exp RLB .
                    From (state 139) exp -> * LLB exp RLB .
                    From (state 137) exp -> * LLB exp RLB .
                    From (state 114) exp -> * LLB exp RLB .
                    From (state 129) exp -> * LLB exp RLB .
                    From (state 118) exp -> * LLB exp RLB .
                    From (state 088) exp -> * LLB exp RLB .
                    From (state 036) exp -> * LLB exp RLB .
                    From (state 038) exp -> * LLB exp RLB .
                    From (state 040) exp -> * LLB exp RLB .
                    From (state 042) exp -> * LLB exp RLB .
                    From (state 044) exp -> * LLB exp RLB .
                    From (state 046) exp -> * LLB exp RLB .
                    From (state 048) exp -> * LLB exp RLB .
                    From (state 050) exp -> * LLB exp RLB .
                    From (state 052) exp -> * LLB exp RLB .
                    From (state 054) exp -> * LLB exp RLB .
                    From (state 056) exp -> * LLB exp RLB .
                    From (state 058) exp -> * LLB exp RLB .
                    From (state 060) exp -> * LLB exp RLB .
                    From (state 062) exp -> * LLB exp RLB .
                    From (state 064) exp -> * LLB exp RLB .
                    From (state 066) exp -> * LLB exp RLB .
                    From (state 068) exp -> * LLB exp RLB .
                    From (state 070) exp -> * LLB exp RLB .
                    From (state 072) exp -> * LLB exp RLB .
                    From (state 083) exp -> * LLB exp RLB .
                    From (state 080) exp -> * LLB exp RLB .
                    From (state 077) exp -> * LLB exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 81

State 81:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 080) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 080) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 080) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 080) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 080) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 080) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 080) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 080) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 080) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 080) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 080) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 080) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 080) exp -> * exp MOD exp .
                exp -> LLB exp * RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 082) exp -> LLB exp RLB .
                    From (state 080) exp -> LLB * exp RLB .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 080) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 080) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 080) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 080) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 080) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 080) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 82

State 82:
            (57)exp -> LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 081) exp -> LLB exp * RLB .

                           [default] reduce 57

State 83:
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> NOT * exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> NOT exp .
                    To (state 083) exp -> * exp BIAND exp .
                    To (state 083) exp -> * exp BIOR exp .
                    To (state 083) exp -> * exp LSS exp .
                    To (state 083) exp -> * exp LSSEQ exp .
                    To (state 083) exp -> * exp GRT exp .
                    To (state 083) exp -> * exp GRTEQ exp .
                    To (state 083) exp -> * exp EQ exp .
                    To (state 083) exp -> * exp NOTEQ exp .
                    To (state 083) exp -> * exp ADD exp .
                    To (state 083) exp -> * exp MINUS exp .
                    To (state 083) exp -> * exp MULTI exp .
                    To (state 083) exp -> * exp DIV exp .
                    To (state 083) exp -> * exp MOD exp .
                    To (state 083) exp -> * INUM .
                    To (state 083) exp -> * FNUM .
                    To (state 083) exp -> * ID .
                    To (state 083) exp -> * LLB exp RLB .
                    To (state 083) exp -> * NOT exp .
                    To (state 083) exp -> * exp AND exp .
                    To (state 083) exp -> * exp OR exp .
                    To (state 083) exp -> * exp XOR exp .
                    To (state 083) exp -> * exp BITNOT exp .
                    To (state 083) exp -> * exp COMMA exp .
                    To (state 083) exp -> * ID LMB exp RMB .
                    To (state 083) exp -> * exp ASSIGN exp .
                    From (state 029) exp -> * NOT exp .
                    From (state 032) exp -> * NOT exp .
                    From (state 091) exp -> * NOT exp .
                    From (state 095) exp -> * NOT exp .
                    From (state 097) exp -> * NOT exp .
                    From (state 146) exp -> * NOT exp .
                    From (state 148) exp -> * NOT exp .
                    From (state 150) exp -> * NOT exp .
                    From (state 154) exp -> * NOT exp .
                    From (state 158) exp -> * NOT exp .
                    From (state 099) exp -> * NOT exp .
                    From (state 101) exp -> * NOT exp .
                    From (state 104) exp -> * NOT exp .
                    From (state 107) exp -> * NOT exp .
                    From (state 109) exp -> * NOT exp .
                    From (state 141) exp -> * NOT exp .
                    From (state 139) exp -> * NOT exp .
                    From (state 137) exp -> * NOT exp .
                    From (state 114) exp -> * NOT exp .
                    From (state 129) exp -> * NOT exp .
                    From (state 118) exp -> * NOT exp .
                    From (state 088) exp -> * NOT exp .
                    From (state 036) exp -> * NOT exp .
                    From (state 038) exp -> * NOT exp .
                    From (state 040) exp -> * NOT exp .
                    From (state 042) exp -> * NOT exp .
                    From (state 044) exp -> * NOT exp .
                    From (state 046) exp -> * NOT exp .
                    From (state 048) exp -> * NOT exp .
                    From (state 050) exp -> * NOT exp .
                    From (state 052) exp -> * NOT exp .
                    From (state 054) exp -> * NOT exp .
                    From (state 056) exp -> * NOT exp .
                    From (state 058) exp -> * NOT exp .
                    From (state 060) exp -> * NOT exp .
                    From (state 062) exp -> * NOT exp .
                    From (state 064) exp -> * NOT exp .
                    From (state 066) exp -> * NOT exp .
                    From (state 068) exp -> * NOT exp .
                    From (state 070) exp -> * NOT exp .
                    From (state 072) exp -> * NOT exp .
                    From (state 077) exp -> * NOT exp .
                    From (state 083) exp -> * NOT exp .
                    From (state 080) exp -> * NOT exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 084) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 84

State 84:
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 083) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 083) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 083) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 083) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 083) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 083) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 083) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 083) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 083) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 083) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 083) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 083) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 083) exp -> * exp MOD exp .
            (58)exp -> NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    From (state 083) exp -> NOT * exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 083) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 083) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 083) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 083) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 083) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLON,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 083) exp -> * exp ASSIGN exp .

                              BITNOT shift 68
                           [default] reduce 58

State 85:
                vallist -> * ID COMMA vallist . {SEMICOLON}
                    To (state 015) vallist -> ID * COMMA vallist .
                vallist -> * ID . {SEMICOLON}
                    To (state 015) vallist -> ID .
                stmt -> tp * vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> tp vallist * SEMICOLON .
                    From (state 029) stmt -> * tp vallist SEMICOLON .
                    From (state 158) stmt -> * tp vallist SEMICOLON .
                    From (state 150) stmt -> * tp vallist SEMICOLON .
                    From (state 146) stmt -> * tp vallist SEMICOLON .
                    From (state 118) stmt -> * tp vallist SEMICOLON .
                    From (state 109) stmt -> * tp vallist SEMICOLON .
                    From (state 104) stmt -> * tp vallist SEMICOLON .
                    From (state 101) stmt -> * tp vallist SEMICOLON .
                    From (state 097) stmt -> * tp vallist SEMICOLON .
                    From (state 091) stmt -> * tp vallist SEMICOLON .
                    From (state 032) stmt -> * tp vallist SEMICOLON .

                                  ID shift 15
                             vallist shift 86

State 86:
                stmt -> tp vallist * SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 087) stmt -> tp vallist SEMICOLON .
                    From (state 085) stmt -> tp * vallist SEMICOLON .

                           SEMICOLON shift 87

State 87:
            (19)stmt -> tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 086) stmt -> tp vallist * SEMICOLON .

                           [default] reduce 19

State 88:
                stmt -> RETURN * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> RETURN exp * SEMICOLON .
                    From (state 029) stmt -> * RETURN exp SEMICOLON .
                    From (state 158) stmt -> * RETURN exp SEMICOLON .
                    From (state 150) stmt -> * RETURN exp SEMICOLON .
                    From (state 146) stmt -> * RETURN exp SEMICOLON .
                    From (state 118) stmt -> * RETURN exp SEMICOLON .
                    From (state 109) stmt -> * RETURN exp SEMICOLON .
                    From (state 104) stmt -> * RETURN exp SEMICOLON .
                    From (state 101) stmt -> * RETURN exp SEMICOLON .
                    From (state 097) stmt -> * RETURN exp SEMICOLON .
                    From (state 091) stmt -> * RETURN exp SEMICOLON .
                    From (state 032) stmt -> * RETURN exp SEMICOLON .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 089) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 89

State 89:
                stmt -> RETURN exp * SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 090) stmt -> RETURN exp SEMICOLON .
                    From (state 088) stmt -> RETURN * exp SEMICOLON .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 088) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 088) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 088) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 088) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 088) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 088) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 088) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 088) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 088) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 088) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 088) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 088) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 088) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 062) exp -> exp AND * exp .
                    From (state 088) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 064) exp -> exp OR * exp .
                    From (state 088) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 088) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 088) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 088) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 088) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLON shift 90

State 90:
            (20)stmt -> RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 089) stmt -> RETURN exp * SEMICOLON .

                           [default] reduce 20

State 91:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {RGB}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {RGB}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {RGB}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {RGB}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> LGB * stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> LGB stmt * RGB .
                    From (state 029) stmt -> * LGB stmt RGB .
                    From (state 158) stmt -> * LGB stmt RGB .
                    From (state 150) stmt -> * LGB stmt RGB .
                    From (state 146) stmt -> * LGB stmt RGB .
                    From (state 118) stmt -> * LGB stmt RGB .
                    From (state 109) stmt -> * LGB stmt RGB .
                    From (state 104) stmt -> * LGB stmt RGB .
                    From (state 101) stmt -> * LGB stmt RGB .
                    From (state 097) stmt -> * LGB stmt RGB .
                    From (state 091) stmt -> * LGB stmt RGB .
                    From (state 032) stmt -> * LGB stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {RGB}
                    To (state 094) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {RGB}
                    To (state 094) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {RGB}
                    To (state 147) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {RGB}
                    To (state 151) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 94
                               WHILE shift 147
                                 FOR shift 151
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 92
                                 exp shift 34

State 92:
                stmt -> LGB stmt * RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 093) stmt -> LGB stmt RGB .
                    From (state 091) stmt -> LGB * stmt RGB .

                                 RGB shift 93

State 93:
            (21)stmt -> LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 092) stmt -> LGB stmt * RGB .

                           [default] reduce 21

State 94:
                stmt -> IF * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 095) stmt -> IF LLB * exp RLB stmt .
                    From (state 029) stmt -> * IF LLB exp RLB stmt .
                    From (state 032) stmt -> * IF LLB exp RLB stmt .
                    From (state 158) stmt -> * IF LLB exp RLB stmt .
                    From (state 150) stmt -> * IF LLB exp RLB stmt .
                    From (state 146) stmt -> * IF LLB exp RLB stmt .
                    From (state 091) stmt -> * IF LLB exp RLB stmt .
                stmt -> IF * LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 095) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                    From (state 029) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 032) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 158) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 150) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 146) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 091) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .

                                 LLB shift 95

State 95:
                stmt -> IF LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF LLB exp * RLB stmt .
                    From (state 094) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB * exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                    From (state 094) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 096) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 96

State 96:
                stmt -> IF LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 097) stmt -> IF LLB exp RLB * stmt .
                    From (state 095) stmt -> IF LLB * exp RLB stmt .
                stmt -> IF LLB exp * RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 097) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .
                    From (state 095) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 095) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 095) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 095) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 095) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 095) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 095) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 095) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 095) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 095) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 095) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 095) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 095) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 095) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 095) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 095) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 095) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 095) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 095) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 095) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 97

State 97:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 102) stmt -> IF LLB exp RLB stmt .
                    To (state 097) stmt -> * exp SEMICOLON .
                    To (state 097) stmt -> * tp vallist SEMICOLON .
                    To (state 097) stmt -> * RETURN exp SEMICOLON .
                    To (state 097) stmt -> * LGB stmt RGB .
                    To (state 097) stmt -> * IF LLB exp RLB stmt .
                    To (state 097) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 097) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 097) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 096) stmt -> IF LLB exp * RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB * stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 145) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                    From (state 096) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 106) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 111) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 098) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 106) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 111) stmt1 -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 98
                               WHILE shift 106
                                 FOR shift 111
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 102
                                 exp shift 34
                               stmt1 shift 145

State 98:
                stmt -> IF * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 099) stmt -> IF LLB * exp RLB stmt .
                    From (state 118) stmt -> * IF LLB exp RLB stmt .
                    From (state 109) stmt -> * IF LLB exp RLB stmt .
                    From (state 104) stmt -> * IF LLB exp RLB stmt .
                    From (state 101) stmt -> * IF LLB exp RLB stmt .
                    From (state 097) stmt -> * IF LLB exp RLB stmt .
                stmt -> IF * LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 099) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                    From (state 118) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 109) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 104) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 101) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 097) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 099) stmt1 -> IF LLB * exp RLB stmt1 ELSE stmt1 .
                    From (state 118) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 109) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 104) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 101) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 097) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .

                                 LLB shift 99

State 99:
                stmt -> IF LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 100) stmt -> IF LLB exp * RLB stmt .
                    From (state 098) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB * exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 100) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                    From (state 098) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt1 -> IF LLB * exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 100) stmt1 -> IF LLB exp * RLB stmt1 ELSE stmt1 .
                    From (state 098) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 100) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 100

State 100:
                stmt -> IF LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 101) stmt -> IF LLB exp RLB * stmt .
                    From (state 099) stmt -> IF LLB * exp RLB stmt .
                stmt -> IF LLB exp * RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 101) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .
                    From (state 099) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                stmt1 -> IF LLB exp * RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 101) stmt1 -> IF LLB exp RLB * stmt1 ELSE stmt1 .
                    From (state 099) stmt1 -> IF LLB * exp RLB stmt1 ELSE stmt1 .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 099) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 099) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 099) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 099) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 099) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 099) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 099) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 099) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 099) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 099) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 099) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 099) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 099) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 099) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 099) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 099) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 099) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 099) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 099) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 101

State 101:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 102) stmt -> IF LLB exp RLB stmt .
                    To (state 101) stmt -> * exp SEMICOLON .
                    To (state 101) stmt -> * tp vallist SEMICOLON .
                    To (state 101) stmt -> * RETURN exp SEMICOLON .
                    To (state 101) stmt -> * LGB stmt RGB .
                    To (state 101) stmt -> * IF LLB exp RLB stmt .
                    To (state 101) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 101) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 101) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 100) stmt -> IF LLB exp * RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB * stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 103) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                    From (state 100) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 106) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 111) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 098) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> IF LLB exp RLB * stmt1 ELSE stmt1 . {ELSE}
                    To (state 103) stmt1 -> IF LLB exp RLB stmt1 * ELSE stmt1 .
                    From (state 100) stmt1 -> IF LLB exp * RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 106) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 111) stmt1 -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 98
                               WHILE shift 106
                                 FOR shift 111
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 102
                                 exp shift 34
                               stmt1 shift 103

State 102:
            (22)stmt -> IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 097) stmt -> IF LLB exp RLB * stmt .
                    From (state 101) stmt -> IF LLB exp RLB * stmt .

                           [default] reduce 22

State 103:
                stmt -> IF LLB exp RLB stmt1 * ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 104) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .
                    From (state 101) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .
                stmt1 -> IF LLB exp RLB stmt1 * ELSE stmt1 . {ELSE}
                    To (state 104) stmt1 -> IF LLB exp RLB stmt1 ELSE * stmt1 .
                    From (state 101) stmt1 -> IF LLB exp RLB * stmt1 ELSE stmt1 .

                                ELSE shift 104

State 104:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB stmt1 ELSE * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 105) stmt -> IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 104) stmt -> * exp SEMICOLON .
                    To (state 104) stmt -> * tp vallist SEMICOLON .
                    To (state 104) stmt -> * RETURN exp SEMICOLON .
                    To (state 104) stmt -> * LGB stmt RGB .
                    To (state 104) stmt -> * IF LLB exp RLB stmt .
                    To (state 104) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 104) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 104) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 103) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 106) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 111) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 098) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> IF LLB exp RLB stmt1 ELSE * stmt1 . {ELSE}
                    To (state 144) stmt1 -> IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 104) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 104) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    To (state 104) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 103) stmt1 -> IF LLB exp RLB stmt1 * ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 106) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 111) stmt1 -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 98
                               WHILE shift 106
                                 FOR shift 111
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 105
                                 exp shift 34
                               stmt1 shift 144

State 105:
            (23)stmt -> IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 146) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .
                    From (state 104) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .

                           [default] reduce 23

State 106:
                stmt -> WHILE * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 107) stmt -> WHILE LLB * exp RLB stmt .
                    From (state 097) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 101) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 118) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 109) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 104) stmt -> * WHILE LLB exp RLB stmt .
                stmt1 -> WHILE * LLB exp RLB stmt1 . {ELSE}
                    To (state 107) stmt1 -> WHILE LLB * exp RLB stmt1 .
                    From (state 097) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 101) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 118) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 109) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 104) stmt1 -> * WHILE LLB exp RLB stmt1 .

                                 LLB shift 107

State 107:
                stmt -> WHILE LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 108) stmt -> WHILE LLB exp * RLB stmt .
                    From (state 106) stmt -> WHILE * LLB exp RLB stmt .
                stmt1 -> WHILE LLB * exp RLB stmt1 . {ELSE}
                    To (state 108) stmt1 -> WHILE LLB exp * RLB stmt1 .
                    From (state 106) stmt1 -> WHILE * LLB exp RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 108) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 108

State 108:
                stmt -> WHILE LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 109) stmt -> WHILE LLB exp RLB * stmt .
                    From (state 107) stmt -> WHILE LLB * exp RLB stmt .
                stmt1 -> WHILE LLB exp * RLB stmt1 . {ELSE}
                    To (state 109) stmt1 -> WHILE LLB exp RLB * stmt1 .
                    From (state 107) stmt1 -> WHILE LLB * exp RLB stmt1 .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 107) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 107) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 107) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 107) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 107) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 107) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 107) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 107) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 107) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 107) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 107) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 107) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 107) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 107) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 107) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 107) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 107) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 107) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 107) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 109

State 109:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 106) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> WHILE LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 110) stmt -> WHILE LLB exp RLB stmt .
                    To (state 109) stmt -> * exp SEMICOLON .
                    To (state 109) stmt -> * tp vallist SEMICOLON .
                    To (state 109) stmt -> * RETURN exp SEMICOLON .
                    To (state 109) stmt -> * LGB stmt RGB .
                    To (state 109) stmt -> * IF LLB exp RLB stmt .
                    To (state 109) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 109) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 109) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 108) stmt -> WHILE LLB exp * RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 111) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 098) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 106) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> WHILE LLB exp RLB * stmt1 . {ELSE}
                    To (state 143) stmt1 -> WHILE LLB exp RLB stmt1 .
                    To (state 109) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 109) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    To (state 109) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 108) stmt1 -> WHILE LLB exp * RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 111) stmt1 -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 98
                               WHILE shift 106
                                 FOR shift 111
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 110
                                 exp shift 34
                               stmt1 shift 143

State 110:
            (24)stmt -> WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 150) stmt -> WHILE LLB exp RLB * stmt .
                    From (state 109) stmt -> WHILE LLB exp RLB * stmt .

                           [default] reduce 24

State 111:
                stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 112) stmt -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 097) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 101) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 104) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 118) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 109) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt1 -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 112) stmt1 -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 097) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 101) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 104) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 118) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 109) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .

                                 LLB shift 112

State 112:
                stmt -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 113) stmt -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 111) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                initlist -> * init COMMA initlist . {SEMICOLON}
                    To (state 133) initlist -> init * COMMA initlist .
                initlist -> * init . {SEMICOLON}
                    To (state 133) initlist -> init .
                    To (state 112) init -> * ID ASSIGN exp .
                    To (state 112) init -> * ID ADDEQ exp .
                    To (state 112) init -> * ID MINUSEQ exp .
                init -> * ID ASSIGN exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * ASSIGN exp .
                init -> * ID ADDEQ exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * ADDEQ exp .
                init -> * ID MINUSEQ exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * MINUSEQ exp .
                stmt1 -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 113) stmt1 -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 111) stmt1 -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .

                                  ID shift 136
                            initlist shift 113
                                init shift 133

State 113:
                stmt -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 114) stmt -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt .
                    From (state 112) stmt -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt1 -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 114) stmt1 -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt1 .
                    From (state 112) stmt1 -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .

                           SEMICOLON shift 114

State 114:
                stmt -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 115) stmt -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt .
                    From (state 113) stmt -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt1 -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 115) stmt1 -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt1 .
                    From (state 113) stmt1 -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 115) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 115

State 115:
                stmt -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 116) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt .
                    From (state 114) stmt -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt .
                stmt1 -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 116) stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt1 .
                    From (state 114) stmt1 -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt1 .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 114) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 114) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 114) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 114) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 114) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 114) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 114) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 114) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 114) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 114) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 114) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 114) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 114) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 062) exp -> exp AND * exp .
                    From (state 114) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 064) exp -> exp OR * exp .
                    From (state 114) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 114) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 114) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 114) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 114) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLON shift 116

State 116:
                stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 117) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt .
                    From (state 115) stmt -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt .
                steplist -> * step COMMA steplist . {RLB}
                    To (state 121) steplist -> step * COMMA steplist .
                steplist -> * step . {RLB}
                    To (state 121) steplist -> step .
                    To (state 116) step -> * BIADD ID .
                    To (state 116) step -> * ID BIADD .
                    To (state 116) step -> * BIMINUS ID .
                    To (state 116) step -> * ID BIMINUS .
                    To (state 116) step -> * ID ASSIGN exp .
                step -> * BIADD ID . {COMMA,RLB}
                    To (state 124) step -> BIADD * ID .
                step -> * ID BIADD . {COMMA,RLB}
                    To (state 126) step -> ID * BIADD .
                step -> * BIMINUS ID . {COMMA,RLB}
                    To (state 131) step -> BIMINUS * ID .
                step -> * ID BIMINUS . {COMMA,RLB}
                    To (state 126) step -> ID * BIMINUS .
                step -> * ID ASSIGN exp . {COMMA,RLB}
                    To (state 126) step -> ID * ASSIGN exp .
                stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt1 . {ELSE}
                    To (state 117) stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt1 .
                    From (state 115) stmt1 -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt1 .

                               BIADD shift 124
                             BIMINUS shift 131
                                  ID shift 126
                            steplist shift 117
                                step shift 121

State 117:
                stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 118) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt .
                    From (state 116) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt .
                stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt1 . {ELSE}
                    To (state 118) stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt1 .
                    From (state 116) stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt1 .

                                 RLB shift 118

State 118:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 106) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 111) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 119) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    To (state 118) stmt -> * exp SEMICOLON .
                    To (state 118) stmt -> * tp vallist SEMICOLON .
                    To (state 118) stmt -> * RETURN exp SEMICOLON .
                    To (state 118) stmt -> * LGB stmt RGB .
                    To (state 118) stmt -> * IF LLB exp RLB stmt .
                    To (state 118) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 118) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 118) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 117) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 098) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 106) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    To (state 111) stmt1 -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt1 . {ELSE}
                    To (state 120) stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    To (state 118) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 118) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    To (state 118) stmt1 -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 .
                    From (state 117) stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 98
                               WHILE shift 106
                                 FOR shift 111
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 119
                                 exp shift 34
                               stmt1 shift 120

State 119:
            (25)stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 158) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt .
                    From (state 118) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt .

                           [default] reduce 25

State 120:
            (40)stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt1 . {ELSE}
                    From (state 118) stmt1 -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt1 .

                                ELSE reduce 40

State 121:
                steplist -> step * COMMA steplist . {RLB}
                    To (state 122) steplist -> step COMMA * steplist .
                    From (state 156) steplist -> * step COMMA steplist .
                    From (state 122) steplist -> * step COMMA steplist .
                    From (state 116) steplist -> * step COMMA steplist .
            (32)steplist -> step . {RLB}
                    From (state 156) steplist -> * step .
                    From (state 122) steplist -> * step .
                    From (state 116) steplist -> * step .

                               COMMA shift 122
                                 RLB reduce 32

State 122:
                steplist -> * step COMMA steplist . {RLB}
                    To (state 121) steplist -> step * COMMA steplist .
                steplist -> step COMMA * steplist . {RLB}
                    To (state 123) steplist -> step COMMA steplist .
                    To (state 122) steplist -> * step COMMA steplist .
                    To (state 122) steplist -> * step .
                    From (state 121) steplist -> step * COMMA steplist .
                steplist -> * step . {RLB}
                    To (state 121) steplist -> step .
                    To (state 122) step -> * BIADD ID .
                    To (state 122) step -> * ID BIADD .
                    To (state 122) step -> * BIMINUS ID .
                    To (state 122) step -> * ID BIMINUS .
                    To (state 122) step -> * ID ASSIGN exp .
                step -> * BIADD ID . {COMMA,RLB}
                    To (state 124) step -> BIADD * ID .
                step -> * ID BIADD . {COMMA,RLB}
                    To (state 126) step -> ID * BIADD .
                step -> * BIMINUS ID . {COMMA,RLB}
                    To (state 131) step -> BIMINUS * ID .
                step -> * ID BIMINUS . {COMMA,RLB}
                    To (state 126) step -> ID * BIMINUS .
                step -> * ID ASSIGN exp . {COMMA,RLB}
                    To (state 126) step -> ID * ASSIGN exp .

                               BIADD shift 124
                             BIMINUS shift 131
                                  ID shift 126
                            steplist shift 123
                                step shift 121

State 123:
            (31)steplist -> step COMMA steplist . {RLB}
                    From (state 122) steplist -> step COMMA * steplist .

                                 RLB reduce 31

State 124:
                step -> BIADD * ID . {COMMA,RLB}
                    To (state 125) step -> BIADD ID .
                    From (state 156) step -> * BIADD ID .
                    From (state 116) step -> * BIADD ID .
                    From (state 122) step -> * BIADD ID .

                                  ID shift 125

State 125:
            (33)step -> BIADD ID . {COMMA,RLB}
                    From (state 124) step -> BIADD * ID .

                           [default] reduce 33

State 126:
                step -> ID * BIADD . {COMMA,RLB}
                    To (state 127) step -> ID BIADD .
                    From (state 156) step -> * ID BIADD .
                    From (state 116) step -> * ID BIADD .
                    From (state 122) step -> * ID BIADD .
                step -> ID * BIMINUS . {COMMA,RLB}
                    To (state 128) step -> ID BIMINUS .
                    From (state 156) step -> * ID BIMINUS .
                    From (state 116) step -> * ID BIMINUS .
                    From (state 122) step -> * ID BIMINUS .
                step -> ID * ASSIGN exp . {COMMA,RLB}
                    To (state 129) step -> ID ASSIGN * exp .
                    From (state 156) step -> * ID ASSIGN exp .
                    From (state 116) step -> * ID ASSIGN exp .
                    From (state 122) step -> * ID ASSIGN exp .

                              ASSIGN shift 129
                               BIADD shift 127
                             BIMINUS shift 128

State 127:
            (34)step -> ID BIADD . {COMMA,RLB}
                    From (state 126) step -> ID * BIADD .

                           [default] reduce 34

State 128:
            (36)step -> ID BIMINUS . {COMMA,RLB}
                    From (state 126) step -> ID * BIMINUS .

                           [default] reduce 36

State 129:
                step -> ID ASSIGN * exp . {COMMA,RLB}
                    To (state 130) step -> ID ASSIGN exp .
                    To (state 129) exp -> * exp BIAND exp .
                    To (state 129) exp -> * exp BIOR exp .
                    To (state 129) exp -> * exp LSS exp .
                    To (state 129) exp -> * exp LSSEQ exp .
                    To (state 129) exp -> * exp GRT exp .
                    To (state 129) exp -> * exp GRTEQ exp .
                    To (state 129) exp -> * exp EQ exp .
                    To (state 129) exp -> * exp NOTEQ exp .
                    To (state 129) exp -> * exp ADD exp .
                    To (state 129) exp -> * exp MINUS exp .
                    To (state 129) exp -> * exp MULTI exp .
                    To (state 129) exp -> * exp DIV exp .
                    To (state 129) exp -> * exp MOD exp .
                    To (state 129) exp -> * INUM .
                    To (state 129) exp -> * FNUM .
                    To (state 129) exp -> * ID .
                    To (state 129) exp -> * LLB exp RLB .
                    To (state 129) exp -> * NOT exp .
                    To (state 129) exp -> * exp AND exp .
                    To (state 129) exp -> * exp OR exp .
                    To (state 129) exp -> * exp XOR exp .
                    To (state 129) exp -> * exp BITNOT exp .
                    To (state 129) exp -> * exp COMMA exp .
                    To (state 129) exp -> * ID LMB exp RMB .
                    To (state 129) exp -> * exp ASSIGN exp .
                    From (state 126) step -> ID * ASSIGN exp .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 130) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 130

State 130:
            (37)step -> ID ASSIGN exp . {COMMA,RLB}
                    From (state 129) step -> ID ASSIGN * exp .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 129) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 129) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 129) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 129) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 129) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 129) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 129) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 129) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 129) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 129) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 129) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 129) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 129) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 129) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 129) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 129) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 129) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 129) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 129) exp -> * exp ASSIGN exp .

                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 37

State 131:
                step -> BIMINUS * ID . {COMMA,RLB}
                    To (state 132) step -> BIMINUS ID .
                    From (state 156) step -> * BIMINUS ID .
                    From (state 116) step -> * BIMINUS ID .
                    From (state 122) step -> * BIMINUS ID .

                                  ID shift 132

State 132:
            (35)step -> BIMINUS ID . {COMMA,RLB}
                    From (state 131) step -> BIMINUS * ID .

                           [default] reduce 35

State 133:
                initlist -> init * COMMA initlist . {SEMICOLON}
                    To (state 134) initlist -> init COMMA * initlist .
                    From (state 152) initlist -> * init COMMA initlist .
                    From (state 134) initlist -> * init COMMA initlist .
                    From (state 112) initlist -> * init COMMA initlist .
            (27)initlist -> init . {SEMICOLON}
                    From (state 152) initlist -> * init .
                    From (state 134) initlist -> * init .
                    From (state 112) initlist -> * init .

                               COMMA shift 134
                           SEMICOLON reduce 27

State 134:
                initlist -> * init COMMA initlist . {SEMICOLON}
                    To (state 133) initlist -> init * COMMA initlist .
                initlist -> init COMMA * initlist . {SEMICOLON}
                    To (state 135) initlist -> init COMMA initlist .
                    To (state 134) initlist -> * init COMMA initlist .
                    To (state 134) initlist -> * init .
                    From (state 133) initlist -> init * COMMA initlist .
                initlist -> * init . {SEMICOLON}
                    To (state 133) initlist -> init .
                    To (state 134) init -> * ID ASSIGN exp .
                    To (state 134) init -> * ID ADDEQ exp .
                    To (state 134) init -> * ID MINUSEQ exp .
                init -> * ID ASSIGN exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * ASSIGN exp .
                init -> * ID ADDEQ exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * ADDEQ exp .
                init -> * ID MINUSEQ exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * MINUSEQ exp .

                                  ID shift 136
                            initlist shift 135
                                init shift 133

State 135:
            (26)initlist -> init COMMA initlist . {SEMICOLON}
                    From (state 134) initlist -> init COMMA * initlist .

                           SEMICOLON reduce 26

State 136:
                init -> ID * ASSIGN exp . {COMMA,SEMICOLON}
                    To (state 137) init -> ID ASSIGN * exp .
                    From (state 152) init -> * ID ASSIGN exp .
                    From (state 112) init -> * ID ASSIGN exp .
                    From (state 134) init -> * ID ASSIGN exp .
                init -> ID * ADDEQ exp . {COMMA,SEMICOLON}
                    To (state 139) init -> ID ADDEQ * exp .
                    From (state 152) init -> * ID ADDEQ exp .
                    From (state 112) init -> * ID ADDEQ exp .
                    From (state 134) init -> * ID ADDEQ exp .
                init -> ID * MINUSEQ exp . {COMMA,SEMICOLON}
                    To (state 141) init -> ID MINUSEQ * exp .
                    From (state 152) init -> * ID MINUSEQ exp .
                    From (state 112) init -> * ID MINUSEQ exp .
                    From (state 134) init -> * ID MINUSEQ exp .

                              ASSIGN shift 137
                               ADDEQ shift 139
                             MINUSEQ shift 141

State 137:
                init -> ID ASSIGN * exp . {COMMA,SEMICOLON}
                    To (state 138) init -> ID ASSIGN exp .
                    To (state 137) exp -> * exp BIAND exp .
                    To (state 137) exp -> * exp BIOR exp .
                    To (state 137) exp -> * exp LSS exp .
                    To (state 137) exp -> * exp LSSEQ exp .
                    To (state 137) exp -> * exp GRT exp .
                    To (state 137) exp -> * exp GRTEQ exp .
                    To (state 137) exp -> * exp EQ exp .
                    To (state 137) exp -> * exp NOTEQ exp .
                    To (state 137) exp -> * exp ADD exp .
                    To (state 137) exp -> * exp MINUS exp .
                    To (state 137) exp -> * exp MULTI exp .
                    To (state 137) exp -> * exp DIV exp .
                    To (state 137) exp -> * exp MOD exp .
                    To (state 137) exp -> * INUM .
                    To (state 137) exp -> * FNUM .
                    To (state 137) exp -> * ID .
                    To (state 137) exp -> * LLB exp RLB .
                    To (state 137) exp -> * NOT exp .
                    To (state 137) exp -> * exp AND exp .
                    To (state 137) exp -> * exp OR exp .
                    To (state 137) exp -> * exp XOR exp .
                    To (state 137) exp -> * exp BITNOT exp .
                    To (state 137) exp -> * exp COMMA exp .
                    To (state 137) exp -> * ID LMB exp RMB .
                    To (state 137) exp -> * exp ASSIGN exp .
                    From (state 136) init -> ID * ASSIGN exp .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 138) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 138

State 138:
            (28)init -> ID ASSIGN exp . {COMMA,SEMICOLON}
                    From (state 137) init -> ID ASSIGN * exp .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 137) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 137) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 137) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 137) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 137) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 137) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 137) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 137) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 137) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 137) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 137) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 137) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 137) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 062) exp -> exp AND * exp .
                    From (state 137) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 064) exp -> exp OR * exp .
                    From (state 137) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 137) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 137) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 137) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 137) exp -> * exp ASSIGN exp .

                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 28

State 139:
                init -> ID ADDEQ * exp . {COMMA,SEMICOLON}
                    To (state 140) init -> ID ADDEQ exp .
                    To (state 139) exp -> * exp BIAND exp .
                    To (state 139) exp -> * exp BIOR exp .
                    To (state 139) exp -> * exp LSS exp .
                    To (state 139) exp -> * exp LSSEQ exp .
                    To (state 139) exp -> * exp GRT exp .
                    To (state 139) exp -> * exp GRTEQ exp .
                    To (state 139) exp -> * exp EQ exp .
                    To (state 139) exp -> * exp NOTEQ exp .
                    To (state 139) exp -> * exp ADD exp .
                    To (state 139) exp -> * exp MINUS exp .
                    To (state 139) exp -> * exp MULTI exp .
                    To (state 139) exp -> * exp DIV exp .
                    To (state 139) exp -> * exp MOD exp .
                    To (state 139) exp -> * INUM .
                    To (state 139) exp -> * FNUM .
                    To (state 139) exp -> * ID .
                    To (state 139) exp -> * LLB exp RLB .
                    To (state 139) exp -> * NOT exp .
                    To (state 139) exp -> * exp AND exp .
                    To (state 139) exp -> * exp OR exp .
                    To (state 139) exp -> * exp XOR exp .
                    To (state 139) exp -> * exp BITNOT exp .
                    To (state 139) exp -> * exp COMMA exp .
                    To (state 139) exp -> * ID LMB exp RMB .
                    To (state 139) exp -> * exp ASSIGN exp .
                    From (state 136) init -> ID * ADDEQ exp .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 140) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 140

State 140:
            (29)init -> ID ADDEQ exp . {COMMA,SEMICOLON}
                    From (state 139) init -> ID ADDEQ * exp .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 139) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 139) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 139) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 139) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 139) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 139) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 139) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 139) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 139) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 139) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 139) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 139) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 139) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 062) exp -> exp AND * exp .
                    From (state 139) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 064) exp -> exp OR * exp .
                    From (state 139) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 139) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 139) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 139) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 139) exp -> * exp ASSIGN exp .

                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 29

State 141:
                init -> ID MINUSEQ * exp . {COMMA,SEMICOLON}
                    To (state 142) init -> ID MINUSEQ exp .
                    To (state 141) exp -> * exp BIAND exp .
                    To (state 141) exp -> * exp BIOR exp .
                    To (state 141) exp -> * exp LSS exp .
                    To (state 141) exp -> * exp LSSEQ exp .
                    To (state 141) exp -> * exp GRT exp .
                    To (state 141) exp -> * exp GRTEQ exp .
                    To (state 141) exp -> * exp EQ exp .
                    To (state 141) exp -> * exp NOTEQ exp .
                    To (state 141) exp -> * exp ADD exp .
                    To (state 141) exp -> * exp MINUS exp .
                    To (state 141) exp -> * exp MULTI exp .
                    To (state 141) exp -> * exp DIV exp .
                    To (state 141) exp -> * exp MOD exp .
                    To (state 141) exp -> * INUM .
                    To (state 141) exp -> * FNUM .
                    To (state 141) exp -> * ID .
                    To (state 141) exp -> * LLB exp RLB .
                    To (state 141) exp -> * NOT exp .
                    To (state 141) exp -> * exp AND exp .
                    To (state 141) exp -> * exp OR exp .
                    To (state 141) exp -> * exp XOR exp .
                    To (state 141) exp -> * exp BITNOT exp .
                    To (state 141) exp -> * exp COMMA exp .
                    To (state 141) exp -> * ID LMB exp RMB .
                    To (state 141) exp -> * exp ASSIGN exp .
                    From (state 136) init -> ID * MINUSEQ exp .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 142) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 142

State 142:
            (30)init -> ID MINUSEQ exp . {COMMA,SEMICOLON}
                    From (state 141) init -> ID MINUSEQ * exp .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 141) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 141) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 141) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 141) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 141) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 141) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 141) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 141) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 141) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 141) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 141) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 141) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 141) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 062) exp -> exp AND * exp .
                    From (state 141) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 064) exp -> exp OR * exp .
                    From (state 141) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 141) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 141) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 141) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 141) exp -> * exp ASSIGN exp .

                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 30

State 143:
            (39)stmt1 -> WHILE LLB exp RLB stmt1 . {ELSE}
                    From (state 109) stmt1 -> WHILE LLB exp RLB * stmt1 .

                                ELSE reduce 39

State 144:
            (38)stmt1 -> IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    From (state 104) stmt1 -> IF LLB exp RLB stmt1 ELSE * stmt1 .

                                ELSE reduce 38

State 145:
                stmt -> IF LLB exp RLB stmt1 * ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 146) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .
                    From (state 097) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .

                                ELSE shift 146

State 146:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB stmt1 ELSE * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 105) stmt -> IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 146) stmt -> * exp SEMICOLON .
                    To (state 146) stmt -> * tp vallist SEMICOLON .
                    To (state 146) stmt -> * RETURN exp SEMICOLON .
                    To (state 146) stmt -> * LGB stmt RGB .
                    To (state 146) stmt -> * IF LLB exp RLB stmt .
                    To (state 146) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 146) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 146) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 145) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 147) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 151) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 94
                               WHILE shift 147
                                 FOR shift 151
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 105
                                 exp shift 34

State 147:
                stmt -> WHILE * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 148) stmt -> WHILE LLB * exp RLB stmt .
                    From (state 029) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 032) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 091) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 158) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 150) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 146) stmt -> * WHILE LLB exp RLB stmt .

                                 LLB shift 148

State 148:
                stmt -> WHILE LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 149) stmt -> WHILE LLB exp * RLB stmt .
                    From (state 147) stmt -> WHILE * LLB exp RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 149) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 149

State 149:
                stmt -> WHILE LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 150) stmt -> WHILE LLB exp RLB * stmt .
                    From (state 148) stmt -> WHILE LLB * exp RLB stmt .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 148) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 148) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 148) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 148) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 148) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 148) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 148) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 148) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 148) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 148) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 148) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 148) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 148) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 148) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 148) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 148) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 148) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 148) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 148) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 150

State 150:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 147) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> WHILE LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 110) stmt -> WHILE LLB exp RLB stmt .
                    To (state 150) stmt -> * exp SEMICOLON .
                    To (state 150) stmt -> * tp vallist SEMICOLON .
                    To (state 150) stmt -> * RETURN exp SEMICOLON .
                    To (state 150) stmt -> * LGB stmt RGB .
                    To (state 150) stmt -> * IF LLB exp RLB stmt .
                    To (state 150) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 150) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 150) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 149) stmt -> WHILE LLB exp * RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 151) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 94
                               WHILE shift 147
                                 FOR shift 151
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 110
                                 exp shift 34

State 151:
                stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 152) stmt -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 029) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 032) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 091) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 146) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 158) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 150) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .

                                 LLB shift 152

State 152:
                stmt -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 153) stmt -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 151) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                initlist -> * init COMMA initlist . {SEMICOLON}
                    To (state 133) initlist -> init * COMMA initlist .
                initlist -> * init . {SEMICOLON}
                    To (state 133) initlist -> init .
                    To (state 152) init -> * ID ASSIGN exp .
                    To (state 152) init -> * ID ADDEQ exp .
                    To (state 152) init -> * ID MINUSEQ exp .
                init -> * ID ASSIGN exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * ASSIGN exp .
                init -> * ID ADDEQ exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * ADDEQ exp .
                init -> * ID MINUSEQ exp . {COMMA,SEMICOLON}
                    To (state 136) init -> ID * MINUSEQ exp .

                                  ID shift 136
                            initlist shift 153
                                init shift 133

State 153:
                stmt -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 154) stmt -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt .
                    From (state 152) stmt -> FOR LLB * initlist SEMICOLON exp SEMICOLON steplist RLB stmt .

                           SEMICOLON shift 154

State 154:
                stmt -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 155) stmt -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt .
                    From (state 153) stmt -> FOR LLB initlist * SEMICOLON exp SEMICOLON steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 155) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                INUM shift 74
                                  ID shift 76
                                 LLB shift 80
                                FNUM shift 75
                                 exp shift 155

State 155:
                stmt -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 156) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt .
                    From (state 154) stmt -> FOR LLB initlist SEMICOLON * exp SEMICOLON steplist RLB stmt .
                exp -> exp * BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 154) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 154) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 154) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 154) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 154) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 154) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 154) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 154) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 154) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 154) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 154) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 154) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 154) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 062) exp -> exp AND * exp .
                    From (state 154) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 064) exp -> exp OR * exp .
                    From (state 154) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 154) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 154) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 154) exp -> * exp COMMA exp .
                exp -> exp * ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 072) exp -> exp ASSIGN * exp .
                    From (state 154) exp -> * exp ASSIGN exp .

                               COMMA shift 70
                              ASSIGN shift 72
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLON shift 156

State 156:
                stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 157) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt .
                    From (state 155) stmt -> FOR LLB initlist SEMICOLON exp * SEMICOLON steplist RLB stmt .
                steplist -> * step COMMA steplist . {RLB}
                    To (state 121) steplist -> step * COMMA steplist .
                steplist -> * step . {RLB}
                    To (state 121) steplist -> step .
                    To (state 156) step -> * BIADD ID .
                    To (state 156) step -> * ID BIADD .
                    To (state 156) step -> * BIMINUS ID .
                    To (state 156) step -> * ID BIMINUS .
                    To (state 156) step -> * ID ASSIGN exp .
                step -> * BIADD ID . {COMMA,RLB}
                    To (state 124) step -> BIADD * ID .
                step -> * ID BIADD . {COMMA,RLB}
                    To (state 126) step -> ID * BIADD .
                step -> * BIMINUS ID . {COMMA,RLB}
                    To (state 131) step -> BIMINUS * ID .
                step -> * ID BIMINUS . {COMMA,RLB}
                    To (state 126) step -> ID * BIMINUS .
                step -> * ID ASSIGN exp . {COMMA,RLB}
                    To (state 126) step -> ID * ASSIGN exp .

                               BIADD shift 124
                             BIMINUS shift 131
                                  ID shift 126
                            steplist shift 157
                                step shift 121

State 157:
                stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 158) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt .
                    From (state 156) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON * steplist RLB stmt .

                                 RLB shift 158

State 158:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLON .
                stmt -> * tp vallist SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp * vallist SEMICOLON .
                stmt -> * RETURN exp SEMICOLON . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN * exp SEMICOLON .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 147) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 151) stmt -> FOR * LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 119) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    To (state 158) stmt -> * exp SEMICOLON .
                    To (state 158) stmt -> * tp vallist SEMICOLON .
                    To (state 158) stmt -> * RETURN exp SEMICOLON .
                    To (state 158) stmt -> * LGB stmt RGB .
                    To (state 158) stmt -> * IF LLB exp RLB stmt .
                    To (state 158) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 158) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 158) stmt -> * FOR LLB initlist SEMICOLON exp SEMICOLON steplist RLB stmt .
                    From (state 157) stmt -> FOR LLB initlist SEMICOLON exp SEMICOLON steplist * RLB stmt .
                exp -> * exp BIAND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 074) exp -> INUM .
                exp -> * FNUM . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 075) exp -> FNUM .
                exp -> * ID . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 080) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 083) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 076) exp -> ID * LMB exp RMB .
                exp -> * exp ASSIGN exp . {COMMA,ASSIGN,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLON}
                    To (state 034) exp -> exp * ASSIGN exp .

                                 NOT shift 83
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 74
                                  ID shift 76
                                 LGB shift 91
                                 LLB shift 80
                              RETURN shift 88
                                  IF shift 94
                               WHILE shift 147
                                 FOR shift 151
                                FNUM shift 75
                                  tp shift 85
                                stmt shift 119
                                 exp shift 34

