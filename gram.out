State 0:
                program -> * deflist . {#}
                    To (state 001) program -> deflist .
                    To (state 000) deflist -> * tp def deflist .
                    To (state 000) deflist -> .
                deflist -> * tp def deflist . {#}
                    To (state 002) deflist -> tp * def deflist .
             (2)deflist -> . {#}
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .

                                   # reduce 2
                                 INT shift 5
                               FLOAT shift 9
                             program accept
                             deflist shift 1
                                  tp shift 2

State 1:
             (0)program -> deflist . {#}
                    From (state 000) program -> * deflist .

                                   # reduce 0

State 2:
                deflist -> tp * def deflist . {#}
                    To (state 003) deflist -> tp def * deflist .
                    To (state 002) def -> * vallist SEMICOLOM .
                    To (state 002) def -> * fundef LGB stmtlist RGB .
                    From (state 003) deflist -> * tp def deflist .
                    From (state 000) deflist -> * tp def deflist .
                vallist -> * ID COMMA vallist . {SEMICOLOM}
                    To (state 013) vallist -> ID * COMMA vallist .
                vallist -> * ID . {SEMICOLOM}
                    To (state 013) vallist -> ID .
                def -> * vallist SEMICOLOM . {#,INT,FLOAT}
                    To (state 026) def -> vallist * SEMICOLOM .
                def -> * fundef LGB stmtlist RGB . {#,INT,FLOAT}
                    To (state 028) def -> fundef * LGB stmtlist RGB .
                fundef -> * ID LLB args RLB . {LGB}
                    To (state 013) fundef -> ID * LLB args RLB .
                fundef -> * ID LLB RLB . {LGB}
                    To (state 013) fundef -> ID * LLB RLB .

                                  ID shift 13
                                 def shift 3
                             vallist shift 26
                              fundef shift 28

State 3:
                deflist -> * tp def deflist . {#}
                    To (state 002) deflist -> tp * def deflist .
                deflist -> tp def * deflist . {#}
                    To (state 004) deflist -> tp def deflist .
                    To (state 003) deflist -> * tp def deflist .
                    To (state 003) deflist -> .
                    From (state 002) deflist -> tp * def deflist .
             (2)deflist -> . {#}
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .

                                   # reduce 2
                                 INT shift 5
                               FLOAT shift 9
                             deflist shift 4
                                  tp shift 2

State 4:
             (1)deflist -> tp def deflist . {#}
                    From (state 003) deflist -> tp def * deflist .

                                   # reduce 1

State 5:
             (3)tp -> INT . {ID}
                    From (state 000) tp -> * INT .
                    From (state 156) tp -> * INT .
                    From (state 148) tp -> * INT .
                    From (state 144) tp -> * INT .
                    From (state 116) tp -> * INT .
                    From (state 107) tp -> * INT .
                    From (state 102) tp -> * INT .
                    From (state 099) tp -> * INT .
                    From (state 095) tp -> * INT .
                    From (state 089) tp -> * INT .
                    From (state 032) tp -> * INT .
                    From (state 029) tp -> * INT .
                    From (state 022) tp -> * INT .
                    From (state 017) tp -> * INT .
                    From (state 003) tp -> * INT .
                tp -> INT * LMB INUM RMB . {ID}
                    To (state 006) tp -> INT LMB * INUM RMB .
                    From (state 000) tp -> * INT LMB INUM RMB .
                    From (state 156) tp -> * INT LMB INUM RMB .
                    From (state 148) tp -> * INT LMB INUM RMB .
                    From (state 144) tp -> * INT LMB INUM RMB .
                    From (state 116) tp -> * INT LMB INUM RMB .
                    From (state 107) tp -> * INT LMB INUM RMB .
                    From (state 102) tp -> * INT LMB INUM RMB .
                    From (state 099) tp -> * INT LMB INUM RMB .
                    From (state 095) tp -> * INT LMB INUM RMB .
                    From (state 089) tp -> * INT LMB INUM RMB .
                    From (state 032) tp -> * INT LMB INUM RMB .
                    From (state 029) tp -> * INT LMB INUM RMB .
                    From (state 022) tp -> * INT LMB INUM RMB .
                    From (state 017) tp -> * INT LMB INUM RMB .
                    From (state 003) tp -> * INT LMB INUM RMB .

                                 LMB shift 6
                                  ID reduce 3

State 6:
                tp -> INT LMB * INUM RMB . {ID}
                    To (state 007) tp -> INT LMB INUM * RMB .
                    From (state 005) tp -> INT * LMB INUM RMB .

                                INUM shift 7

State 7:
                tp -> INT LMB INUM * RMB . {ID}
                    To (state 008) tp -> INT LMB INUM RMB .
                    From (state 006) tp -> INT LMB * INUM RMB .

                                 RMB shift 8

State 8:
             (5)tp -> INT LMB INUM RMB . {ID}
                    From (state 007) tp -> INT LMB INUM * RMB .

                                  ID reduce 5

State 9:
             (4)tp -> FLOAT . {ID}
                    From (state 000) tp -> * FLOAT .
                    From (state 156) tp -> * FLOAT .
                    From (state 148) tp -> * FLOAT .
                    From (state 144) tp -> * FLOAT .
                    From (state 116) tp -> * FLOAT .
                    From (state 107) tp -> * FLOAT .
                    From (state 102) tp -> * FLOAT .
                    From (state 099) tp -> * FLOAT .
                    From (state 095) tp -> * FLOAT .
                    From (state 089) tp -> * FLOAT .
                    From (state 032) tp -> * FLOAT .
                    From (state 029) tp -> * FLOAT .
                    From (state 022) tp -> * FLOAT .
                    From (state 017) tp -> * FLOAT .
                    From (state 003) tp -> * FLOAT .
                tp -> FLOAT * LMB INUM RMB . {ID}
                    To (state 010) tp -> FLOAT LMB * INUM RMB .
                    From (state 000) tp -> * FLOAT LMB INUM RMB .
                    From (state 156) tp -> * FLOAT LMB INUM RMB .
                    From (state 148) tp -> * FLOAT LMB INUM RMB .
                    From (state 144) tp -> * FLOAT LMB INUM RMB .
                    From (state 116) tp -> * FLOAT LMB INUM RMB .
                    From (state 107) tp -> * FLOAT LMB INUM RMB .
                    From (state 102) tp -> * FLOAT LMB INUM RMB .
                    From (state 099) tp -> * FLOAT LMB INUM RMB .
                    From (state 095) tp -> * FLOAT LMB INUM RMB .
                    From (state 089) tp -> * FLOAT LMB INUM RMB .
                    From (state 032) tp -> * FLOAT LMB INUM RMB .
                    From (state 029) tp -> * FLOAT LMB INUM RMB .
                    From (state 022) tp -> * FLOAT LMB INUM RMB .
                    From (state 017) tp -> * FLOAT LMB INUM RMB .
                    From (state 003) tp -> * FLOAT LMB INUM RMB .

                                 LMB shift 10
                                  ID reduce 4

State 10:
                tp -> FLOAT LMB * INUM RMB . {ID}
                    To (state 011) tp -> FLOAT LMB INUM * RMB .
                    From (state 009) tp -> FLOAT * LMB INUM RMB .

                                INUM shift 11

State 11:
                tp -> FLOAT LMB INUM * RMB . {ID}
                    To (state 012) tp -> FLOAT LMB INUM RMB .
                    From (state 010) tp -> FLOAT LMB * INUM RMB .

                                 RMB shift 12

State 12:
             (6)tp -> FLOAT LMB INUM RMB . {ID}
                    From (state 011) tp -> FLOAT LMB INUM * RMB .

                                  ID reduce 6

State 13:
                vallist -> ID * COMMA vallist . {SEMICOLOM}
                    To (state 014) vallist -> ID COMMA * vallist .
                    From (state 002) vallist -> * ID COMMA vallist .
             (8)vallist -> ID . {SEMICOLOM}
                    From (state 002) vallist -> * ID .
                fundef -> ID * LLB args RLB . {LGB}
                    To (state 017) fundef -> ID LLB * args RLB .
                    From (state 002) fundef -> * ID LLB args RLB .
                fundef -> ID * LLB RLB . {LGB}
                    To (state 017) fundef -> ID LLB * RLB .
                    From (state 002) fundef -> * ID LLB RLB .

                               COMMA shift 14
                           SEMICOLOM reduce 8
                                 LLB shift 17

State 14:
                vallist -> * ID COMMA vallist . {SEMICOLOM}
                    To (state 015) vallist -> ID * COMMA vallist .
                vallist -> ID COMMA * vallist . {SEMICOLOM}
                    To (state 016) vallist -> ID COMMA vallist .
                    To (state 014) vallist -> * ID COMMA vallist .
                    To (state 014) vallist -> * ID .
                    From (state 015) vallist -> ID * COMMA vallist .
                    From (state 013) vallist -> ID * COMMA vallist .
                vallist -> * ID . {SEMICOLOM}
                    To (state 015) vallist -> ID .

                                  ID shift 15
                             vallist shift 16

State 15:
                vallist -> ID * COMMA vallist . {SEMICOLOM}
                    To (state 014) vallist -> ID COMMA * vallist .
                    From (state 083) vallist -> * ID COMMA vallist .
                    From (state 014) vallist -> * ID COMMA vallist .
             (8)vallist -> ID . {SEMICOLOM}
                    From (state 083) vallist -> * ID .
                    From (state 014) vallist -> * ID .

                               COMMA shift 14
                           SEMICOLOM reduce 8

State 16:
             (7)vallist -> ID COMMA vallist . {SEMICOLOM}
                    From (state 014) vallist -> ID COMMA * vallist .

                           SEMICOLOM reduce 7

State 17:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                fundef -> ID LLB * args RLB . {LGB}
                    To (state 018) fundef -> ID LLB args * RLB .
                    From (state 013) fundef -> ID * LLB args RLB .
                fundef -> ID LLB * RLB . {LGB}
                    To (state 020) fundef -> ID LLB RLB .
                    From (state 013) fundef -> ID * LLB RLB .
                args -> * param COMMA args . {RLB}
                    To (state 021) args -> param * COMMA args .
                args -> * param . {RLB}
                    To (state 021) args -> param .
                    To (state 017) param -> * tp ID .
                param -> * tp ID . {COMMA,RLB}
                    To (state 024) param -> tp * ID .

                                 INT shift 5
                               FLOAT shift 9
                                 RLB shift 20
                                  tp shift 24
                                args shift 18
                               param shift 21

State 18:
                fundef -> ID LLB args * RLB . {LGB}
                    To (state 019) fundef -> ID LLB args RLB .
                    From (state 017) fundef -> ID LLB * args RLB .

                                 RLB shift 19

State 19:
            (11)fundef -> ID LLB args RLB . {LGB}
                    From (state 018) fundef -> ID LLB args * RLB .

                                 LGB reduce 11

State 20:
            (12)fundef -> ID LLB RLB . {LGB}
                    From (state 017) fundef -> ID LLB * RLB .

                                 LGB reduce 12

State 21:
                args -> param * COMMA args . {RLB}
                    To (state 022) args -> param COMMA * args .
                    From (state 022) args -> * param COMMA args .
                    From (state 017) args -> * param COMMA args .
            (14)args -> param . {RLB}
                    From (state 022) args -> * param .
                    From (state 017) args -> * param .

                               COMMA shift 22
                                 RLB reduce 14

State 22:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                args -> * param COMMA args . {RLB}
                    To (state 021) args -> param * COMMA args .
                args -> param COMMA * args . {RLB}
                    To (state 023) args -> param COMMA args .
                    To (state 022) args -> * param COMMA args .
                    To (state 022) args -> * param .
                    From (state 021) args -> param * COMMA args .
                args -> * param . {RLB}
                    To (state 021) args -> param .
                    To (state 022) param -> * tp ID .
                param -> * tp ID . {COMMA,RLB}
                    To (state 024) param -> tp * ID .

                                 INT shift 5
                               FLOAT shift 9
                                  tp shift 24
                                args shift 23
                               param shift 21

State 23:
            (13)args -> param COMMA args . {RLB}
                    From (state 022) args -> param COMMA * args .

                                 RLB reduce 13

State 24:
                param -> tp * ID . {COMMA,RLB}
                    To (state 025) param -> tp ID .
                    From (state 017) param -> * tp ID .
                    From (state 022) param -> * tp ID .

                                  ID shift 25

State 25:
            (15)param -> tp ID . {COMMA,RLB}
                    From (state 024) param -> tp * ID .

                           [default] reduce 15

State 26:
                def -> vallist * SEMICOLOM . {#,INT,FLOAT}
                    To (state 027) def -> vallist SEMICOLOM .
                    From (state 002) def -> * vallist SEMICOLOM .

                           SEMICOLOM shift 27

State 27:
             (9)def -> vallist SEMICOLOM . {#,INT,FLOAT}
                    From (state 026) def -> vallist * SEMICOLOM .

                           [default] reduce 9

State 28:
                def -> fundef * LGB stmtlist RGB . {#,INT,FLOAT}
                    To (state 029) def -> fundef LGB * stmtlist RGB .
                    From (state 002) def -> * fundef LGB stmtlist RGB .

                                 LGB shift 29

State 29:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                def -> fundef LGB * stmtlist RGB . {#,INT,FLOAT}
                    To (state 030) def -> fundef LGB stmtlist * RGB .
                    From (state 028) def -> fundef * LGB stmtlist RGB .
                stmtlist -> * stmt stmtlist . {RGB}
                    To (state 032) stmtlist -> stmt * stmtlist .
                    To (state 029) stmt -> * exp SEMICOLOM .
                    To (state 029) stmt -> * tp vallist SEMICOLOM .
                    To (state 029) stmt -> * RETURN exp SEMICOLOM .
                    To (state 029) stmt -> * LGB stmt RGB .
                    To (state 029) stmt -> * IF LLB exp RLB stmt .
                    To (state 029) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 029) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 029) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
            (17)stmtlist -> . {RGB}
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 145) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 149) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 RGB reduce 17
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 92
                               WHILE shift 145
                                 FOR shift 149
                                FNUM shift 73
                                  tp shift 83
                            stmtlist shift 30
                                stmt shift 32
                                 exp shift 34

State 30:
                def -> fundef LGB stmtlist * RGB . {#,INT,FLOAT}
                    To (state 031) def -> fundef LGB stmtlist RGB .
                    From (state 029) def -> fundef LGB * stmtlist RGB .

                                 RGB shift 31

State 31:
            (10)def -> fundef LGB stmtlist RGB . {#,INT,FLOAT}
                    From (state 030) def -> fundef LGB stmtlist * RGB .

                           [default] reduce 10

State 32:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmtlist -> * stmt stmtlist . {RGB}
                    To (state 032) stmtlist -> stmt * stmtlist .
                    To (state 032) stmt -> * exp SEMICOLOM .
                    To (state 032) stmt -> * tp vallist SEMICOLOM .
                    To (state 032) stmt -> * RETURN exp SEMICOLOM .
                    To (state 032) stmt -> * LGB stmt RGB .
                    To (state 032) stmt -> * IF LLB exp RLB stmt .
                    To (state 032) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 032) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 032) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmtlist -> stmt * stmtlist . {RGB}
                    To (state 033) stmtlist -> stmt stmtlist .
                    To (state 032) stmtlist -> * stmt stmtlist .
                    To (state 032) stmtlist -> .
                    From (state 032) stmtlist -> * stmt stmtlist .
                    From (state 029) stmtlist -> * stmt stmtlist .
            (17)stmtlist -> . {RGB}
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 145) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 149) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 RGB reduce 17
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 92
                               WHILE shift 145
                                 FOR shift 149
                                FNUM shift 73
                                  tp shift 83
                            stmtlist shift 33
                                stmt shift 32
                                 exp shift 34

State 33:
            (16)stmtlist -> stmt stmtlist . {RGB}
                    From (state 032) stmtlist -> stmt * stmtlist .

                                 RGB reduce 16

State 34:
                stmt -> exp * SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 035) stmt -> exp SEMICOLOM .
                    From (state 029) stmt -> * exp SEMICOLOM .
                    From (state 156) stmt -> * exp SEMICOLOM .
                    From (state 148) stmt -> * exp SEMICOLOM .
                    From (state 144) stmt -> * exp SEMICOLOM .
                    From (state 116) stmt -> * exp SEMICOLOM .
                    From (state 107) stmt -> * exp SEMICOLOM .
                    From (state 102) stmt -> * exp SEMICOLOM .
                    From (state 099) stmt -> * exp SEMICOLOM .
                    From (state 095) stmt -> * exp SEMICOLOM .
                    From (state 089) stmt -> * exp SEMICOLOM .
                    From (state 032) stmt -> * exp SEMICOLOM .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 029) exp -> * exp BIAND exp .
                    From (state 156) exp -> * exp BIAND exp .
                    From (state 148) exp -> * exp BIAND exp .
                    From (state 144) exp -> * exp BIAND exp .
                    From (state 116) exp -> * exp BIAND exp .
                    From (state 107) exp -> * exp BIAND exp .
                    From (state 102) exp -> * exp BIAND exp .
                    From (state 099) exp -> * exp BIAND exp .
                    From (state 095) exp -> * exp BIAND exp .
                    From (state 089) exp -> * exp BIAND exp .
                    From (state 032) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 029) exp -> * exp BIOR exp .
                    From (state 156) exp -> * exp BIOR exp .
                    From (state 148) exp -> * exp BIOR exp .
                    From (state 144) exp -> * exp BIOR exp .
                    From (state 116) exp -> * exp BIOR exp .
                    From (state 107) exp -> * exp BIOR exp .
                    From (state 102) exp -> * exp BIOR exp .
                    From (state 099) exp -> * exp BIOR exp .
                    From (state 095) exp -> * exp BIOR exp .
                    From (state 089) exp -> * exp BIOR exp .
                    From (state 032) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 029) exp -> * exp LSS exp .
                    From (state 156) exp -> * exp LSS exp .
                    From (state 148) exp -> * exp LSS exp .
                    From (state 144) exp -> * exp LSS exp .
                    From (state 116) exp -> * exp LSS exp .
                    From (state 107) exp -> * exp LSS exp .
                    From (state 102) exp -> * exp LSS exp .
                    From (state 099) exp -> * exp LSS exp .
                    From (state 095) exp -> * exp LSS exp .
                    From (state 089) exp -> * exp LSS exp .
                    From (state 032) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 029) exp -> * exp LSSEQ exp .
                    From (state 156) exp -> * exp LSSEQ exp .
                    From (state 148) exp -> * exp LSSEQ exp .
                    From (state 144) exp -> * exp LSSEQ exp .
                    From (state 116) exp -> * exp LSSEQ exp .
                    From (state 107) exp -> * exp LSSEQ exp .
                    From (state 102) exp -> * exp LSSEQ exp .
                    From (state 099) exp -> * exp LSSEQ exp .
                    From (state 095) exp -> * exp LSSEQ exp .
                    From (state 089) exp -> * exp LSSEQ exp .
                    From (state 032) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 029) exp -> * exp GRT exp .
                    From (state 156) exp -> * exp GRT exp .
                    From (state 148) exp -> * exp GRT exp .
                    From (state 144) exp -> * exp GRT exp .
                    From (state 116) exp -> * exp GRT exp .
                    From (state 107) exp -> * exp GRT exp .
                    From (state 102) exp -> * exp GRT exp .
                    From (state 099) exp -> * exp GRT exp .
                    From (state 095) exp -> * exp GRT exp .
                    From (state 089) exp -> * exp GRT exp .
                    From (state 032) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 029) exp -> * exp GRTEQ exp .
                    From (state 156) exp -> * exp GRTEQ exp .
                    From (state 148) exp -> * exp GRTEQ exp .
                    From (state 144) exp -> * exp GRTEQ exp .
                    From (state 116) exp -> * exp GRTEQ exp .
                    From (state 107) exp -> * exp GRTEQ exp .
                    From (state 102) exp -> * exp GRTEQ exp .
                    From (state 099) exp -> * exp GRTEQ exp .
                    From (state 095) exp -> * exp GRTEQ exp .
                    From (state 089) exp -> * exp GRTEQ exp .
                    From (state 032) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 029) exp -> * exp EQ exp .
                    From (state 156) exp -> * exp EQ exp .
                    From (state 148) exp -> * exp EQ exp .
                    From (state 144) exp -> * exp EQ exp .
                    From (state 116) exp -> * exp EQ exp .
                    From (state 107) exp -> * exp EQ exp .
                    From (state 102) exp -> * exp EQ exp .
                    From (state 099) exp -> * exp EQ exp .
                    From (state 095) exp -> * exp EQ exp .
                    From (state 089) exp -> * exp EQ exp .
                    From (state 032) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 029) exp -> * exp NOTEQ exp .
                    From (state 156) exp -> * exp NOTEQ exp .
                    From (state 148) exp -> * exp NOTEQ exp .
                    From (state 144) exp -> * exp NOTEQ exp .
                    From (state 116) exp -> * exp NOTEQ exp .
                    From (state 107) exp -> * exp NOTEQ exp .
                    From (state 102) exp -> * exp NOTEQ exp .
                    From (state 099) exp -> * exp NOTEQ exp .
                    From (state 095) exp -> * exp NOTEQ exp .
                    From (state 089) exp -> * exp NOTEQ exp .
                    From (state 032) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 029) exp -> * exp ADD exp .
                    From (state 156) exp -> * exp ADD exp .
                    From (state 148) exp -> * exp ADD exp .
                    From (state 144) exp -> * exp ADD exp .
                    From (state 116) exp -> * exp ADD exp .
                    From (state 107) exp -> * exp ADD exp .
                    From (state 102) exp -> * exp ADD exp .
                    From (state 099) exp -> * exp ADD exp .
                    From (state 095) exp -> * exp ADD exp .
                    From (state 089) exp -> * exp ADD exp .
                    From (state 032) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 029) exp -> * exp MINUS exp .
                    From (state 156) exp -> * exp MINUS exp .
                    From (state 148) exp -> * exp MINUS exp .
                    From (state 144) exp -> * exp MINUS exp .
                    From (state 116) exp -> * exp MINUS exp .
                    From (state 107) exp -> * exp MINUS exp .
                    From (state 102) exp -> * exp MINUS exp .
                    From (state 099) exp -> * exp MINUS exp .
                    From (state 095) exp -> * exp MINUS exp .
                    From (state 089) exp -> * exp MINUS exp .
                    From (state 032) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 029) exp -> * exp MULTI exp .
                    From (state 156) exp -> * exp MULTI exp .
                    From (state 148) exp -> * exp MULTI exp .
                    From (state 144) exp -> * exp MULTI exp .
                    From (state 116) exp -> * exp MULTI exp .
                    From (state 107) exp -> * exp MULTI exp .
                    From (state 102) exp -> * exp MULTI exp .
                    From (state 099) exp -> * exp MULTI exp .
                    From (state 095) exp -> * exp MULTI exp .
                    From (state 089) exp -> * exp MULTI exp .
                    From (state 032) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 029) exp -> * exp DIV exp .
                    From (state 156) exp -> * exp DIV exp .
                    From (state 148) exp -> * exp DIV exp .
                    From (state 144) exp -> * exp DIV exp .
                    From (state 116) exp -> * exp DIV exp .
                    From (state 107) exp -> * exp DIV exp .
                    From (state 102) exp -> * exp DIV exp .
                    From (state 099) exp -> * exp DIV exp .
                    From (state 095) exp -> * exp DIV exp .
                    From (state 089) exp -> * exp DIV exp .
                    From (state 032) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 029) exp -> * exp MOD exp .
                    From (state 156) exp -> * exp MOD exp .
                    From (state 148) exp -> * exp MOD exp .
                    From (state 144) exp -> * exp MOD exp .
                    From (state 116) exp -> * exp MOD exp .
                    From (state 107) exp -> * exp MOD exp .
                    From (state 102) exp -> * exp MOD exp .
                    From (state 099) exp -> * exp MOD exp .
                    From (state 095) exp -> * exp MOD exp .
                    From (state 089) exp -> * exp MOD exp .
                    From (state 032) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 062) exp -> exp AND * exp .
                    From (state 029) exp -> * exp AND exp .
                    From (state 156) exp -> * exp AND exp .
                    From (state 148) exp -> * exp AND exp .
                    From (state 144) exp -> * exp AND exp .
                    From (state 116) exp -> * exp AND exp .
                    From (state 107) exp -> * exp AND exp .
                    From (state 102) exp -> * exp AND exp .
                    From (state 099) exp -> * exp AND exp .
                    From (state 095) exp -> * exp AND exp .
                    From (state 089) exp -> * exp AND exp .
                    From (state 032) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 064) exp -> exp OR * exp .
                    From (state 029) exp -> * exp OR exp .
                    From (state 156) exp -> * exp OR exp .
                    From (state 148) exp -> * exp OR exp .
                    From (state 144) exp -> * exp OR exp .
                    From (state 116) exp -> * exp OR exp .
                    From (state 107) exp -> * exp OR exp .
                    From (state 102) exp -> * exp OR exp .
                    From (state 099) exp -> * exp OR exp .
                    From (state 095) exp -> * exp OR exp .
                    From (state 089) exp -> * exp OR exp .
                    From (state 032) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 029) exp -> * exp XOR exp .
                    From (state 156) exp -> * exp XOR exp .
                    From (state 148) exp -> * exp XOR exp .
                    From (state 144) exp -> * exp XOR exp .
                    From (state 116) exp -> * exp XOR exp .
                    From (state 107) exp -> * exp XOR exp .
                    From (state 102) exp -> * exp XOR exp .
                    From (state 099) exp -> * exp XOR exp .
                    From (state 095) exp -> * exp XOR exp .
                    From (state 089) exp -> * exp XOR exp .
                    From (state 032) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 029) exp -> * exp BITNOT exp .
                    From (state 156) exp -> * exp BITNOT exp .
                    From (state 148) exp -> * exp BITNOT exp .
                    From (state 144) exp -> * exp BITNOT exp .
                    From (state 116) exp -> * exp BITNOT exp .
                    From (state 107) exp -> * exp BITNOT exp .
                    From (state 102) exp -> * exp BITNOT exp .
                    From (state 099) exp -> * exp BITNOT exp .
                    From (state 095) exp -> * exp BITNOT exp .
                    From (state 089) exp -> * exp BITNOT exp .
                    From (state 032) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 029) exp -> * exp COMMA exp .
                    From (state 156) exp -> * exp COMMA exp .
                    From (state 148) exp -> * exp COMMA exp .
                    From (state 144) exp -> * exp COMMA exp .
                    From (state 116) exp -> * exp COMMA exp .
                    From (state 107) exp -> * exp COMMA exp .
                    From (state 102) exp -> * exp COMMA exp .
                    From (state 099) exp -> * exp COMMA exp .
                    From (state 095) exp -> * exp COMMA exp .
                    From (state 089) exp -> * exp COMMA exp .
                    From (state 032) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLOM shift 35

State 35:
            (18)stmt -> exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 034) stmt -> exp * SEMICOLOM .

                           [default] reduce 18

State 36:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * BIAND exp .
                exp -> exp BIAND * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp BIAND exp .
                    To (state 036) exp -> * exp BIAND exp .
                    To (state 036) exp -> * exp BIOR exp .
                    To (state 036) exp -> * exp LSS exp .
                    To (state 036) exp -> * exp LSSEQ exp .
                    To (state 036) exp -> * exp GRT exp .
                    To (state 036) exp -> * exp GRTEQ exp .
                    To (state 036) exp -> * exp EQ exp .
                    To (state 036) exp -> * exp NOTEQ exp .
                    To (state 036) exp -> * exp ADD exp .
                    To (state 036) exp -> * exp MINUS exp .
                    To (state 036) exp -> * exp MULTI exp .
                    To (state 036) exp -> * exp DIV exp .
                    To (state 036) exp -> * exp MOD exp .
                    To (state 036) exp -> * INUM .
                    To (state 036) exp -> * FNUM .
                    To (state 036) exp -> * ID .
                    To (state 036) exp -> * LLB exp RLB .
                    To (state 036) exp -> * NOT exp .
                    To (state 036) exp -> * exp AND exp .
                    To (state 036) exp -> * exp OR exp .
                    To (state 036) exp -> * exp XOR exp .
                    To (state 036) exp -> * exp BITNOT exp .
                    To (state 036) exp -> * exp COMMA exp .
                    To (state 036) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * BIAND exp .
                    From (state 147) exp -> exp * BIAND exp .
                    From (state 153) exp -> exp * BIAND exp .
                    From (state 098) exp -> exp * BIAND exp .
                    From (state 106) exp -> exp * BIAND exp .
                    From (state 140) exp -> exp * BIAND exp .
                    From (state 138) exp -> exp * BIAND exp .
                    From (state 136) exp -> exp * BIAND exp .
                    From (state 113) exp -> exp * BIAND exp .
                    From (state 128) exp -> exp * BIAND exp .
                    From (state 087) exp -> exp * BIAND exp .
                    From (state 082) exp -> exp * BIAND exp .
                    From (state 079) exp -> exp * BIAND exp .
                    From (state 076) exp -> exp * BIAND exp .
                    From (state 071) exp -> exp * BIAND exp .
                    From (state 069) exp -> exp * BIAND exp .
                    From (state 067) exp -> exp * BIAND exp .
                    From (state 065) exp -> exp * BIAND exp .
                    From (state 063) exp -> exp * BIAND exp .
                    From (state 061) exp -> exp * BIAND exp .
                    From (state 059) exp -> exp * BIAND exp .
                    From (state 057) exp -> exp * BIAND exp .
                    From (state 055) exp -> exp * BIAND exp .
                    From (state 053) exp -> exp * BIAND exp .
                    From (state 051) exp -> exp * BIAND exp .
                    From (state 049) exp -> exp * BIAND exp .
                    From (state 047) exp -> exp * BIAND exp .
                    From (state 045) exp -> exp * BIAND exp .
                    From (state 043) exp -> exp * BIAND exp .
                    From (state 041) exp -> exp * BIAND exp .
                    From (state 039) exp -> exp * BIAND exp .
                    From (state 037) exp -> exp * BIAND exp .
                    From (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 037) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 37

State 37:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 036) exp -> * exp BIAND exp .
            (41)exp -> exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 036) exp -> exp BIAND * exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 036) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 036) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 036) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 036) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 036) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 036) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 036) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 036) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 036) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 036) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 036) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 036) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 036) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 036) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 036) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 036) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 036) exp -> * exp COMMA exp .

                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 41

State 38:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * BIOR exp .
                exp -> exp BIOR * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp BIOR exp .
                    To (state 038) exp -> * exp BIAND exp .
                    To (state 038) exp -> * exp BIOR exp .
                    To (state 038) exp -> * exp LSS exp .
                    To (state 038) exp -> * exp LSSEQ exp .
                    To (state 038) exp -> * exp GRT exp .
                    To (state 038) exp -> * exp GRTEQ exp .
                    To (state 038) exp -> * exp EQ exp .
                    To (state 038) exp -> * exp NOTEQ exp .
                    To (state 038) exp -> * exp ADD exp .
                    To (state 038) exp -> * exp MINUS exp .
                    To (state 038) exp -> * exp MULTI exp .
                    To (state 038) exp -> * exp DIV exp .
                    To (state 038) exp -> * exp MOD exp .
                    To (state 038) exp -> * INUM .
                    To (state 038) exp -> * FNUM .
                    To (state 038) exp -> * ID .
                    To (state 038) exp -> * LLB exp RLB .
                    To (state 038) exp -> * NOT exp .
                    To (state 038) exp -> * exp AND exp .
                    To (state 038) exp -> * exp OR exp .
                    To (state 038) exp -> * exp XOR exp .
                    To (state 038) exp -> * exp BITNOT exp .
                    To (state 038) exp -> * exp COMMA exp .
                    To (state 038) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * BIOR exp .
                    From (state 147) exp -> exp * BIOR exp .
                    From (state 153) exp -> exp * BIOR exp .
                    From (state 098) exp -> exp * BIOR exp .
                    From (state 106) exp -> exp * BIOR exp .
                    From (state 140) exp -> exp * BIOR exp .
                    From (state 138) exp -> exp * BIOR exp .
                    From (state 136) exp -> exp * BIOR exp .
                    From (state 113) exp -> exp * BIOR exp .
                    From (state 128) exp -> exp * BIOR exp .
                    From (state 087) exp -> exp * BIOR exp .
                    From (state 034) exp -> exp * BIOR exp .
                    From (state 082) exp -> exp * BIOR exp .
                    From (state 079) exp -> exp * BIOR exp .
                    From (state 076) exp -> exp * BIOR exp .
                    From (state 071) exp -> exp * BIOR exp .
                    From (state 069) exp -> exp * BIOR exp .
                    From (state 067) exp -> exp * BIOR exp .
                    From (state 065) exp -> exp * BIOR exp .
                    From (state 063) exp -> exp * BIOR exp .
                    From (state 061) exp -> exp * BIOR exp .
                    From (state 059) exp -> exp * BIOR exp .
                    From (state 057) exp -> exp * BIOR exp .
                    From (state 055) exp -> exp * BIOR exp .
                    From (state 053) exp -> exp * BIOR exp .
                    From (state 051) exp -> exp * BIOR exp .
                    From (state 049) exp -> exp * BIOR exp .
                    From (state 047) exp -> exp * BIOR exp .
                    From (state 045) exp -> exp * BIOR exp .
                    From (state 043) exp -> exp * BIOR exp .
                    From (state 041) exp -> exp * BIOR exp .
                    From (state 039) exp -> exp * BIOR exp .
                    From (state 037) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 039) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 39

State 39:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 038) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 038) exp -> * exp BIOR exp .
            (42)exp -> exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 038) exp -> exp BIOR * exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 038) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 038) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 038) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 038) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 038) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 038) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 038) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 038) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 038) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 038) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 038) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 038) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 038) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 038) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 038) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 038) exp -> * exp COMMA exp .

                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 42

State 40:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * LSS exp .
                exp -> exp LSS * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp LSS exp .
                    To (state 040) exp -> * exp BIAND exp .
                    To (state 040) exp -> * exp BIOR exp .
                    To (state 040) exp -> * exp LSS exp .
                    To (state 040) exp -> * exp LSSEQ exp .
                    To (state 040) exp -> * exp GRT exp .
                    To (state 040) exp -> * exp GRTEQ exp .
                    To (state 040) exp -> * exp EQ exp .
                    To (state 040) exp -> * exp NOTEQ exp .
                    To (state 040) exp -> * exp ADD exp .
                    To (state 040) exp -> * exp MINUS exp .
                    To (state 040) exp -> * exp MULTI exp .
                    To (state 040) exp -> * exp DIV exp .
                    To (state 040) exp -> * exp MOD exp .
                    To (state 040) exp -> * INUM .
                    To (state 040) exp -> * FNUM .
                    To (state 040) exp -> * ID .
                    To (state 040) exp -> * LLB exp RLB .
                    To (state 040) exp -> * NOT exp .
                    To (state 040) exp -> * exp AND exp .
                    To (state 040) exp -> * exp OR exp .
                    To (state 040) exp -> * exp XOR exp .
                    To (state 040) exp -> * exp BITNOT exp .
                    To (state 040) exp -> * exp COMMA exp .
                    To (state 040) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * LSS exp .
                    From (state 147) exp -> exp * LSS exp .
                    From (state 153) exp -> exp * LSS exp .
                    From (state 098) exp -> exp * LSS exp .
                    From (state 106) exp -> exp * LSS exp .
                    From (state 140) exp -> exp * LSS exp .
                    From (state 138) exp -> exp * LSS exp .
                    From (state 136) exp -> exp * LSS exp .
                    From (state 113) exp -> exp * LSS exp .
                    From (state 128) exp -> exp * LSS exp .
                    From (state 087) exp -> exp * LSS exp .
                    From (state 034) exp -> exp * LSS exp .
                    From (state 037) exp -> exp * LSS exp .
                    From (state 082) exp -> exp * LSS exp .
                    From (state 079) exp -> exp * LSS exp .
                    From (state 076) exp -> exp * LSS exp .
                    From (state 071) exp -> exp * LSS exp .
                    From (state 069) exp -> exp * LSS exp .
                    From (state 067) exp -> exp * LSS exp .
                    From (state 065) exp -> exp * LSS exp .
                    From (state 063) exp -> exp * LSS exp .
                    From (state 061) exp -> exp * LSS exp .
                    From (state 059) exp -> exp * LSS exp .
                    From (state 057) exp -> exp * LSS exp .
                    From (state 055) exp -> exp * LSS exp .
                    From (state 053) exp -> exp * LSS exp .
                    From (state 051) exp -> exp * LSS exp .
                    From (state 049) exp -> exp * LSS exp .
                    From (state 047) exp -> exp * LSS exp .
                    From (state 045) exp -> exp * LSS exp .
                    From (state 043) exp -> exp * LSS exp .
                    From (state 041) exp -> exp * LSS exp .
                    From (state 039) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 041) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 41

State 41:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 040) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 040) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 040) exp -> * exp LSS exp .
            (43)exp -> exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 040) exp -> exp LSS * exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 040) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 040) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 040) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 040) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 040) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 040) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 040) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 040) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 040) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 040) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 040) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 040) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 040) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 040) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 040) exp -> * exp COMMA exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 43

State 42:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * LSSEQ exp .
                exp -> exp LSSEQ * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp LSSEQ exp .
                    To (state 042) exp -> * exp BIAND exp .
                    To (state 042) exp -> * exp BIOR exp .
                    To (state 042) exp -> * exp LSS exp .
                    To (state 042) exp -> * exp LSSEQ exp .
                    To (state 042) exp -> * exp GRT exp .
                    To (state 042) exp -> * exp GRTEQ exp .
                    To (state 042) exp -> * exp EQ exp .
                    To (state 042) exp -> * exp NOTEQ exp .
                    To (state 042) exp -> * exp ADD exp .
                    To (state 042) exp -> * exp MINUS exp .
                    To (state 042) exp -> * exp MULTI exp .
                    To (state 042) exp -> * exp DIV exp .
                    To (state 042) exp -> * exp MOD exp .
                    To (state 042) exp -> * INUM .
                    To (state 042) exp -> * FNUM .
                    To (state 042) exp -> * ID .
                    To (state 042) exp -> * LLB exp RLB .
                    To (state 042) exp -> * NOT exp .
                    To (state 042) exp -> * exp AND exp .
                    To (state 042) exp -> * exp OR exp .
                    To (state 042) exp -> * exp XOR exp .
                    To (state 042) exp -> * exp BITNOT exp .
                    To (state 042) exp -> * exp COMMA exp .
                    To (state 042) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * LSSEQ exp .
                    From (state 147) exp -> exp * LSSEQ exp .
                    From (state 153) exp -> exp * LSSEQ exp .
                    From (state 098) exp -> exp * LSSEQ exp .
                    From (state 106) exp -> exp * LSSEQ exp .
                    From (state 140) exp -> exp * LSSEQ exp .
                    From (state 138) exp -> exp * LSSEQ exp .
                    From (state 136) exp -> exp * LSSEQ exp .
                    From (state 113) exp -> exp * LSSEQ exp .
                    From (state 128) exp -> exp * LSSEQ exp .
                    From (state 087) exp -> exp * LSSEQ exp .
                    From (state 034) exp -> exp * LSSEQ exp .
                    From (state 037) exp -> exp * LSSEQ exp .
                    From (state 039) exp -> exp * LSSEQ exp .
                    From (state 082) exp -> exp * LSSEQ exp .
                    From (state 079) exp -> exp * LSSEQ exp .
                    From (state 076) exp -> exp * LSSEQ exp .
                    From (state 071) exp -> exp * LSSEQ exp .
                    From (state 069) exp -> exp * LSSEQ exp .
                    From (state 067) exp -> exp * LSSEQ exp .
                    From (state 065) exp -> exp * LSSEQ exp .
                    From (state 063) exp -> exp * LSSEQ exp .
                    From (state 061) exp -> exp * LSSEQ exp .
                    From (state 059) exp -> exp * LSSEQ exp .
                    From (state 057) exp -> exp * LSSEQ exp .
                    From (state 055) exp -> exp * LSSEQ exp .
                    From (state 053) exp -> exp * LSSEQ exp .
                    From (state 051) exp -> exp * LSSEQ exp .
                    From (state 049) exp -> exp * LSSEQ exp .
                    From (state 047) exp -> exp * LSSEQ exp .
                    From (state 045) exp -> exp * LSSEQ exp .
                    From (state 043) exp -> exp * LSSEQ exp .
                    From (state 041) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 043) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 43

State 43:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 042) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 042) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 042) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 042) exp -> * exp LSSEQ exp .
            (44)exp -> exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 042) exp -> exp LSSEQ * exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 042) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 042) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 042) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 042) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 042) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 042) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 042) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 042) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 042) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 042) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 042) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 042) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 042) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 042) exp -> * exp COMMA exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 44

State 44:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * GRT exp .
                exp -> exp GRT * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp GRT exp .
                    To (state 044) exp -> * exp BIAND exp .
                    To (state 044) exp -> * exp BIOR exp .
                    To (state 044) exp -> * exp LSS exp .
                    To (state 044) exp -> * exp LSSEQ exp .
                    To (state 044) exp -> * exp GRT exp .
                    To (state 044) exp -> * exp GRTEQ exp .
                    To (state 044) exp -> * exp EQ exp .
                    To (state 044) exp -> * exp NOTEQ exp .
                    To (state 044) exp -> * exp ADD exp .
                    To (state 044) exp -> * exp MINUS exp .
                    To (state 044) exp -> * exp MULTI exp .
                    To (state 044) exp -> * exp DIV exp .
                    To (state 044) exp -> * exp MOD exp .
                    To (state 044) exp -> * INUM .
                    To (state 044) exp -> * FNUM .
                    To (state 044) exp -> * ID .
                    To (state 044) exp -> * LLB exp RLB .
                    To (state 044) exp -> * NOT exp .
                    To (state 044) exp -> * exp AND exp .
                    To (state 044) exp -> * exp OR exp .
                    To (state 044) exp -> * exp XOR exp .
                    To (state 044) exp -> * exp BITNOT exp .
                    To (state 044) exp -> * exp COMMA exp .
                    To (state 044) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * GRT exp .
                    From (state 147) exp -> exp * GRT exp .
                    From (state 153) exp -> exp * GRT exp .
                    From (state 098) exp -> exp * GRT exp .
                    From (state 106) exp -> exp * GRT exp .
                    From (state 140) exp -> exp * GRT exp .
                    From (state 138) exp -> exp * GRT exp .
                    From (state 136) exp -> exp * GRT exp .
                    From (state 113) exp -> exp * GRT exp .
                    From (state 128) exp -> exp * GRT exp .
                    From (state 087) exp -> exp * GRT exp .
                    From (state 034) exp -> exp * GRT exp .
                    From (state 037) exp -> exp * GRT exp .
                    From (state 039) exp -> exp * GRT exp .
                    From (state 041) exp -> exp * GRT exp .
                    From (state 082) exp -> exp * GRT exp .
                    From (state 079) exp -> exp * GRT exp .
                    From (state 076) exp -> exp * GRT exp .
                    From (state 071) exp -> exp * GRT exp .
                    From (state 069) exp -> exp * GRT exp .
                    From (state 067) exp -> exp * GRT exp .
                    From (state 065) exp -> exp * GRT exp .
                    From (state 063) exp -> exp * GRT exp .
                    From (state 061) exp -> exp * GRT exp .
                    From (state 059) exp -> exp * GRT exp .
                    From (state 057) exp -> exp * GRT exp .
                    From (state 055) exp -> exp * GRT exp .
                    From (state 053) exp -> exp * GRT exp .
                    From (state 051) exp -> exp * GRT exp .
                    From (state 049) exp -> exp * GRT exp .
                    From (state 047) exp -> exp * GRT exp .
                    From (state 045) exp -> exp * GRT exp .
                    From (state 043) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 045) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 45

State 45:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 044) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 044) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 044) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 044) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 044) exp -> * exp GRT exp .
            (45)exp -> exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 044) exp -> exp GRT * exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 044) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 044) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 044) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 044) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 044) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 044) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 044) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 044) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 044) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 044) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 044) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 044) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 044) exp -> * exp COMMA exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 45

State 46:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * GRTEQ exp .
                exp -> exp GRTEQ * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp GRTEQ exp .
                    To (state 046) exp -> * exp BIAND exp .
                    To (state 046) exp -> * exp BIOR exp .
                    To (state 046) exp -> * exp LSS exp .
                    To (state 046) exp -> * exp LSSEQ exp .
                    To (state 046) exp -> * exp GRT exp .
                    To (state 046) exp -> * exp GRTEQ exp .
                    To (state 046) exp -> * exp EQ exp .
                    To (state 046) exp -> * exp NOTEQ exp .
                    To (state 046) exp -> * exp ADD exp .
                    To (state 046) exp -> * exp MINUS exp .
                    To (state 046) exp -> * exp MULTI exp .
                    To (state 046) exp -> * exp DIV exp .
                    To (state 046) exp -> * exp MOD exp .
                    To (state 046) exp -> * INUM .
                    To (state 046) exp -> * FNUM .
                    To (state 046) exp -> * ID .
                    To (state 046) exp -> * LLB exp RLB .
                    To (state 046) exp -> * NOT exp .
                    To (state 046) exp -> * exp AND exp .
                    To (state 046) exp -> * exp OR exp .
                    To (state 046) exp -> * exp XOR exp .
                    To (state 046) exp -> * exp BITNOT exp .
                    To (state 046) exp -> * exp COMMA exp .
                    To (state 046) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * GRTEQ exp .
                    From (state 147) exp -> exp * GRTEQ exp .
                    From (state 153) exp -> exp * GRTEQ exp .
                    From (state 098) exp -> exp * GRTEQ exp .
                    From (state 106) exp -> exp * GRTEQ exp .
                    From (state 140) exp -> exp * GRTEQ exp .
                    From (state 138) exp -> exp * GRTEQ exp .
                    From (state 136) exp -> exp * GRTEQ exp .
                    From (state 113) exp -> exp * GRTEQ exp .
                    From (state 128) exp -> exp * GRTEQ exp .
                    From (state 087) exp -> exp * GRTEQ exp .
                    From (state 034) exp -> exp * GRTEQ exp .
                    From (state 037) exp -> exp * GRTEQ exp .
                    From (state 039) exp -> exp * GRTEQ exp .
                    From (state 041) exp -> exp * GRTEQ exp .
                    From (state 043) exp -> exp * GRTEQ exp .
                    From (state 082) exp -> exp * GRTEQ exp .
                    From (state 079) exp -> exp * GRTEQ exp .
                    From (state 076) exp -> exp * GRTEQ exp .
                    From (state 071) exp -> exp * GRTEQ exp .
                    From (state 069) exp -> exp * GRTEQ exp .
                    From (state 067) exp -> exp * GRTEQ exp .
                    From (state 065) exp -> exp * GRTEQ exp .
                    From (state 063) exp -> exp * GRTEQ exp .
                    From (state 061) exp -> exp * GRTEQ exp .
                    From (state 059) exp -> exp * GRTEQ exp .
                    From (state 057) exp -> exp * GRTEQ exp .
                    From (state 055) exp -> exp * GRTEQ exp .
                    From (state 053) exp -> exp * GRTEQ exp .
                    From (state 051) exp -> exp * GRTEQ exp .
                    From (state 049) exp -> exp * GRTEQ exp .
                    From (state 047) exp -> exp * GRTEQ exp .
                    From (state 045) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 047) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 47

State 47:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 046) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 046) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 046) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 046) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 046) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 046) exp -> * exp GRTEQ exp .
            (46)exp -> exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 046) exp -> exp GRTEQ * exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 046) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 046) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 046) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 046) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 046) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 046) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 046) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 046) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 046) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 046) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 046) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 046) exp -> * exp COMMA exp .

                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 46

State 48:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * EQ exp .
                exp -> exp EQ * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp EQ exp .
                    To (state 048) exp -> * exp BIAND exp .
                    To (state 048) exp -> * exp BIOR exp .
                    To (state 048) exp -> * exp LSS exp .
                    To (state 048) exp -> * exp LSSEQ exp .
                    To (state 048) exp -> * exp GRT exp .
                    To (state 048) exp -> * exp GRTEQ exp .
                    To (state 048) exp -> * exp EQ exp .
                    To (state 048) exp -> * exp NOTEQ exp .
                    To (state 048) exp -> * exp ADD exp .
                    To (state 048) exp -> * exp MINUS exp .
                    To (state 048) exp -> * exp MULTI exp .
                    To (state 048) exp -> * exp DIV exp .
                    To (state 048) exp -> * exp MOD exp .
                    To (state 048) exp -> * INUM .
                    To (state 048) exp -> * FNUM .
                    To (state 048) exp -> * ID .
                    To (state 048) exp -> * LLB exp RLB .
                    To (state 048) exp -> * NOT exp .
                    To (state 048) exp -> * exp AND exp .
                    To (state 048) exp -> * exp OR exp .
                    To (state 048) exp -> * exp XOR exp .
                    To (state 048) exp -> * exp BITNOT exp .
                    To (state 048) exp -> * exp COMMA exp .
                    To (state 048) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * EQ exp .
                    From (state 147) exp -> exp * EQ exp .
                    From (state 153) exp -> exp * EQ exp .
                    From (state 098) exp -> exp * EQ exp .
                    From (state 106) exp -> exp * EQ exp .
                    From (state 140) exp -> exp * EQ exp .
                    From (state 138) exp -> exp * EQ exp .
                    From (state 136) exp -> exp * EQ exp .
                    From (state 113) exp -> exp * EQ exp .
                    From (state 128) exp -> exp * EQ exp .
                    From (state 087) exp -> exp * EQ exp .
                    From (state 034) exp -> exp * EQ exp .
                    From (state 037) exp -> exp * EQ exp .
                    From (state 039) exp -> exp * EQ exp .
                    From (state 041) exp -> exp * EQ exp .
                    From (state 043) exp -> exp * EQ exp .
                    From (state 045) exp -> exp * EQ exp .
                    From (state 082) exp -> exp * EQ exp .
                    From (state 079) exp -> exp * EQ exp .
                    From (state 076) exp -> exp * EQ exp .
                    From (state 071) exp -> exp * EQ exp .
                    From (state 069) exp -> exp * EQ exp .
                    From (state 067) exp -> exp * EQ exp .
                    From (state 065) exp -> exp * EQ exp .
                    From (state 063) exp -> exp * EQ exp .
                    From (state 061) exp -> exp * EQ exp .
                    From (state 059) exp -> exp * EQ exp .
                    From (state 057) exp -> exp * EQ exp .
                    From (state 055) exp -> exp * EQ exp .
                    From (state 053) exp -> exp * EQ exp .
                    From (state 051) exp -> exp * EQ exp .
                    From (state 049) exp -> exp * EQ exp .
                    From (state 047) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 049) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 49

State 49:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 048) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 048) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 048) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 048) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 048) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 048) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 048) exp -> * exp EQ exp .
            (47)exp -> exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 048) exp -> exp EQ * exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 048) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 048) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 048) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 048) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 048) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 048) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 048) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 048) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 048) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 048) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 048) exp -> * exp COMMA exp .

                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 47

State 50:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * NOTEQ exp .
                exp -> exp NOTEQ * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp NOTEQ exp .
                    To (state 050) exp -> * exp BIAND exp .
                    To (state 050) exp -> * exp BIOR exp .
                    To (state 050) exp -> * exp LSS exp .
                    To (state 050) exp -> * exp LSSEQ exp .
                    To (state 050) exp -> * exp GRT exp .
                    To (state 050) exp -> * exp GRTEQ exp .
                    To (state 050) exp -> * exp EQ exp .
                    To (state 050) exp -> * exp NOTEQ exp .
                    To (state 050) exp -> * exp ADD exp .
                    To (state 050) exp -> * exp MINUS exp .
                    To (state 050) exp -> * exp MULTI exp .
                    To (state 050) exp -> * exp DIV exp .
                    To (state 050) exp -> * exp MOD exp .
                    To (state 050) exp -> * INUM .
                    To (state 050) exp -> * FNUM .
                    To (state 050) exp -> * ID .
                    To (state 050) exp -> * LLB exp RLB .
                    To (state 050) exp -> * NOT exp .
                    To (state 050) exp -> * exp AND exp .
                    To (state 050) exp -> * exp OR exp .
                    To (state 050) exp -> * exp XOR exp .
                    To (state 050) exp -> * exp BITNOT exp .
                    To (state 050) exp -> * exp COMMA exp .
                    To (state 050) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * NOTEQ exp .
                    From (state 147) exp -> exp * NOTEQ exp .
                    From (state 153) exp -> exp * NOTEQ exp .
                    From (state 098) exp -> exp * NOTEQ exp .
                    From (state 106) exp -> exp * NOTEQ exp .
                    From (state 140) exp -> exp * NOTEQ exp .
                    From (state 138) exp -> exp * NOTEQ exp .
                    From (state 136) exp -> exp * NOTEQ exp .
                    From (state 113) exp -> exp * NOTEQ exp .
                    From (state 128) exp -> exp * NOTEQ exp .
                    From (state 087) exp -> exp * NOTEQ exp .
                    From (state 034) exp -> exp * NOTEQ exp .
                    From (state 037) exp -> exp * NOTEQ exp .
                    From (state 039) exp -> exp * NOTEQ exp .
                    From (state 041) exp -> exp * NOTEQ exp .
                    From (state 043) exp -> exp * NOTEQ exp .
                    From (state 045) exp -> exp * NOTEQ exp .
                    From (state 047) exp -> exp * NOTEQ exp .
                    From (state 082) exp -> exp * NOTEQ exp .
                    From (state 079) exp -> exp * NOTEQ exp .
                    From (state 076) exp -> exp * NOTEQ exp .
                    From (state 071) exp -> exp * NOTEQ exp .
                    From (state 069) exp -> exp * NOTEQ exp .
                    From (state 067) exp -> exp * NOTEQ exp .
                    From (state 065) exp -> exp * NOTEQ exp .
                    From (state 063) exp -> exp * NOTEQ exp .
                    From (state 061) exp -> exp * NOTEQ exp .
                    From (state 059) exp -> exp * NOTEQ exp .
                    From (state 057) exp -> exp * NOTEQ exp .
                    From (state 055) exp -> exp * NOTEQ exp .
                    From (state 053) exp -> exp * NOTEQ exp .
                    From (state 051) exp -> exp * NOTEQ exp .
                    From (state 049) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 051) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 51

State 51:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 050) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 050) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 050) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 050) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 050) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 050) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 050) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 050) exp -> * exp NOTEQ exp .
            (48)exp -> exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 050) exp -> exp NOTEQ * exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 050) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 050) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 050) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 050) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 050) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 050) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 050) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 050) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 050) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 050) exp -> * exp COMMA exp .

                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 48

State 52:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * ADD exp .
                exp -> exp ADD * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp ADD exp .
                    To (state 052) exp -> * exp BIAND exp .
                    To (state 052) exp -> * exp BIOR exp .
                    To (state 052) exp -> * exp LSS exp .
                    To (state 052) exp -> * exp LSSEQ exp .
                    To (state 052) exp -> * exp GRT exp .
                    To (state 052) exp -> * exp GRTEQ exp .
                    To (state 052) exp -> * exp EQ exp .
                    To (state 052) exp -> * exp NOTEQ exp .
                    To (state 052) exp -> * exp ADD exp .
                    To (state 052) exp -> * exp MINUS exp .
                    To (state 052) exp -> * exp MULTI exp .
                    To (state 052) exp -> * exp DIV exp .
                    To (state 052) exp -> * exp MOD exp .
                    To (state 052) exp -> * INUM .
                    To (state 052) exp -> * FNUM .
                    To (state 052) exp -> * ID .
                    To (state 052) exp -> * LLB exp RLB .
                    To (state 052) exp -> * NOT exp .
                    To (state 052) exp -> * exp AND exp .
                    To (state 052) exp -> * exp OR exp .
                    To (state 052) exp -> * exp XOR exp .
                    To (state 052) exp -> * exp BITNOT exp .
                    To (state 052) exp -> * exp COMMA exp .
                    To (state 052) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * ADD exp .
                    From (state 147) exp -> exp * ADD exp .
                    From (state 153) exp -> exp * ADD exp .
                    From (state 098) exp -> exp * ADD exp .
                    From (state 106) exp -> exp * ADD exp .
                    From (state 140) exp -> exp * ADD exp .
                    From (state 138) exp -> exp * ADD exp .
                    From (state 136) exp -> exp * ADD exp .
                    From (state 113) exp -> exp * ADD exp .
                    From (state 128) exp -> exp * ADD exp .
                    From (state 087) exp -> exp * ADD exp .
                    From (state 034) exp -> exp * ADD exp .
                    From (state 037) exp -> exp * ADD exp .
                    From (state 039) exp -> exp * ADD exp .
                    From (state 041) exp -> exp * ADD exp .
                    From (state 043) exp -> exp * ADD exp .
                    From (state 045) exp -> exp * ADD exp .
                    From (state 047) exp -> exp * ADD exp .
                    From (state 049) exp -> exp * ADD exp .
                    From (state 082) exp -> exp * ADD exp .
                    From (state 079) exp -> exp * ADD exp .
                    From (state 076) exp -> exp * ADD exp .
                    From (state 071) exp -> exp * ADD exp .
                    From (state 069) exp -> exp * ADD exp .
                    From (state 067) exp -> exp * ADD exp .
                    From (state 065) exp -> exp * ADD exp .
                    From (state 063) exp -> exp * ADD exp .
                    From (state 061) exp -> exp * ADD exp .
                    From (state 059) exp -> exp * ADD exp .
                    From (state 057) exp -> exp * ADD exp .
                    From (state 055) exp -> exp * ADD exp .
                    From (state 053) exp -> exp * ADD exp .
                    From (state 051) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 053) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 53

State 53:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 052) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 052) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 052) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 052) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 052) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 052) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 052) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 052) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 052) exp -> * exp ADD exp .
            (49)exp -> exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 052) exp -> exp ADD * exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 052) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 052) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 052) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 052) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 052) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 052) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 052) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 052) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 052) exp -> * exp COMMA exp .

                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 49

State 54:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * MINUS exp .
                exp -> exp MINUS * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp MINUS exp .
                    To (state 054) exp -> * exp BIAND exp .
                    To (state 054) exp -> * exp BIOR exp .
                    To (state 054) exp -> * exp LSS exp .
                    To (state 054) exp -> * exp LSSEQ exp .
                    To (state 054) exp -> * exp GRT exp .
                    To (state 054) exp -> * exp GRTEQ exp .
                    To (state 054) exp -> * exp EQ exp .
                    To (state 054) exp -> * exp NOTEQ exp .
                    To (state 054) exp -> * exp ADD exp .
                    To (state 054) exp -> * exp MINUS exp .
                    To (state 054) exp -> * exp MULTI exp .
                    To (state 054) exp -> * exp DIV exp .
                    To (state 054) exp -> * exp MOD exp .
                    To (state 054) exp -> * INUM .
                    To (state 054) exp -> * FNUM .
                    To (state 054) exp -> * ID .
                    To (state 054) exp -> * LLB exp RLB .
                    To (state 054) exp -> * NOT exp .
                    To (state 054) exp -> * exp AND exp .
                    To (state 054) exp -> * exp OR exp .
                    To (state 054) exp -> * exp XOR exp .
                    To (state 054) exp -> * exp BITNOT exp .
                    To (state 054) exp -> * exp COMMA exp .
                    To (state 054) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * MINUS exp .
                    From (state 147) exp -> exp * MINUS exp .
                    From (state 153) exp -> exp * MINUS exp .
                    From (state 098) exp -> exp * MINUS exp .
                    From (state 106) exp -> exp * MINUS exp .
                    From (state 140) exp -> exp * MINUS exp .
                    From (state 138) exp -> exp * MINUS exp .
                    From (state 136) exp -> exp * MINUS exp .
                    From (state 113) exp -> exp * MINUS exp .
                    From (state 128) exp -> exp * MINUS exp .
                    From (state 087) exp -> exp * MINUS exp .
                    From (state 034) exp -> exp * MINUS exp .
                    From (state 037) exp -> exp * MINUS exp .
                    From (state 039) exp -> exp * MINUS exp .
                    From (state 041) exp -> exp * MINUS exp .
                    From (state 043) exp -> exp * MINUS exp .
                    From (state 045) exp -> exp * MINUS exp .
                    From (state 047) exp -> exp * MINUS exp .
                    From (state 049) exp -> exp * MINUS exp .
                    From (state 051) exp -> exp * MINUS exp .
                    From (state 082) exp -> exp * MINUS exp .
                    From (state 079) exp -> exp * MINUS exp .
                    From (state 076) exp -> exp * MINUS exp .
                    From (state 071) exp -> exp * MINUS exp .
                    From (state 069) exp -> exp * MINUS exp .
                    From (state 067) exp -> exp * MINUS exp .
                    From (state 065) exp -> exp * MINUS exp .
                    From (state 063) exp -> exp * MINUS exp .
                    From (state 061) exp -> exp * MINUS exp .
                    From (state 059) exp -> exp * MINUS exp .
                    From (state 057) exp -> exp * MINUS exp .
                    From (state 055) exp -> exp * MINUS exp .
                    From (state 053) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 055) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 55

State 55:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 054) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 054) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 054) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 054) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 054) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 054) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 054) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 054) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 054) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 054) exp -> * exp MINUS exp .
            (50)exp -> exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 054) exp -> exp MINUS * exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 054) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 054) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 054) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 054) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 054) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 054) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 054) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 054) exp -> * exp COMMA exp .

                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 50

State 56:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * MULTI exp .
                exp -> exp MULTI * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp MULTI exp .
                    To (state 056) exp -> * exp BIAND exp .
                    To (state 056) exp -> * exp BIOR exp .
                    To (state 056) exp -> * exp LSS exp .
                    To (state 056) exp -> * exp LSSEQ exp .
                    To (state 056) exp -> * exp GRT exp .
                    To (state 056) exp -> * exp GRTEQ exp .
                    To (state 056) exp -> * exp EQ exp .
                    To (state 056) exp -> * exp NOTEQ exp .
                    To (state 056) exp -> * exp ADD exp .
                    To (state 056) exp -> * exp MINUS exp .
                    To (state 056) exp -> * exp MULTI exp .
                    To (state 056) exp -> * exp DIV exp .
                    To (state 056) exp -> * exp MOD exp .
                    To (state 056) exp -> * INUM .
                    To (state 056) exp -> * FNUM .
                    To (state 056) exp -> * ID .
                    To (state 056) exp -> * LLB exp RLB .
                    To (state 056) exp -> * NOT exp .
                    To (state 056) exp -> * exp AND exp .
                    To (state 056) exp -> * exp OR exp .
                    To (state 056) exp -> * exp XOR exp .
                    To (state 056) exp -> * exp BITNOT exp .
                    To (state 056) exp -> * exp COMMA exp .
                    To (state 056) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * MULTI exp .
                    From (state 147) exp -> exp * MULTI exp .
                    From (state 153) exp -> exp * MULTI exp .
                    From (state 098) exp -> exp * MULTI exp .
                    From (state 106) exp -> exp * MULTI exp .
                    From (state 140) exp -> exp * MULTI exp .
                    From (state 138) exp -> exp * MULTI exp .
                    From (state 136) exp -> exp * MULTI exp .
                    From (state 113) exp -> exp * MULTI exp .
                    From (state 128) exp -> exp * MULTI exp .
                    From (state 087) exp -> exp * MULTI exp .
                    From (state 034) exp -> exp * MULTI exp .
                    From (state 037) exp -> exp * MULTI exp .
                    From (state 039) exp -> exp * MULTI exp .
                    From (state 041) exp -> exp * MULTI exp .
                    From (state 043) exp -> exp * MULTI exp .
                    From (state 045) exp -> exp * MULTI exp .
                    From (state 047) exp -> exp * MULTI exp .
                    From (state 049) exp -> exp * MULTI exp .
                    From (state 051) exp -> exp * MULTI exp .
                    From (state 053) exp -> exp * MULTI exp .
                    From (state 082) exp -> exp * MULTI exp .
                    From (state 079) exp -> exp * MULTI exp .
                    From (state 076) exp -> exp * MULTI exp .
                    From (state 071) exp -> exp * MULTI exp .
                    From (state 069) exp -> exp * MULTI exp .
                    From (state 067) exp -> exp * MULTI exp .
                    From (state 065) exp -> exp * MULTI exp .
                    From (state 063) exp -> exp * MULTI exp .
                    From (state 061) exp -> exp * MULTI exp .
                    From (state 059) exp -> exp * MULTI exp .
                    From (state 057) exp -> exp * MULTI exp .
                    From (state 055) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 057) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 57

State 57:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 056) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 056) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 056) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 056) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 056) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 056) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 056) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 056) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 056) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 056) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 056) exp -> * exp MULTI exp .
            (51)exp -> exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 056) exp -> exp MULTI * exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 056) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 056) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 056) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 056) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 056) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 056) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 056) exp -> * exp COMMA exp .

                              BITNOT shift 68
                           [default] reduce 51

State 58:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * DIV exp .
                exp -> exp DIV * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp DIV exp .
                    To (state 058) exp -> * exp BIAND exp .
                    To (state 058) exp -> * exp BIOR exp .
                    To (state 058) exp -> * exp LSS exp .
                    To (state 058) exp -> * exp LSSEQ exp .
                    To (state 058) exp -> * exp GRT exp .
                    To (state 058) exp -> * exp GRTEQ exp .
                    To (state 058) exp -> * exp EQ exp .
                    To (state 058) exp -> * exp NOTEQ exp .
                    To (state 058) exp -> * exp ADD exp .
                    To (state 058) exp -> * exp MINUS exp .
                    To (state 058) exp -> * exp MULTI exp .
                    To (state 058) exp -> * exp DIV exp .
                    To (state 058) exp -> * exp MOD exp .
                    To (state 058) exp -> * INUM .
                    To (state 058) exp -> * FNUM .
                    To (state 058) exp -> * ID .
                    To (state 058) exp -> * LLB exp RLB .
                    To (state 058) exp -> * NOT exp .
                    To (state 058) exp -> * exp AND exp .
                    To (state 058) exp -> * exp OR exp .
                    To (state 058) exp -> * exp XOR exp .
                    To (state 058) exp -> * exp BITNOT exp .
                    To (state 058) exp -> * exp COMMA exp .
                    To (state 058) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * DIV exp .
                    From (state 147) exp -> exp * DIV exp .
                    From (state 153) exp -> exp * DIV exp .
                    From (state 098) exp -> exp * DIV exp .
                    From (state 106) exp -> exp * DIV exp .
                    From (state 140) exp -> exp * DIV exp .
                    From (state 138) exp -> exp * DIV exp .
                    From (state 136) exp -> exp * DIV exp .
                    From (state 113) exp -> exp * DIV exp .
                    From (state 128) exp -> exp * DIV exp .
                    From (state 087) exp -> exp * DIV exp .
                    From (state 034) exp -> exp * DIV exp .
                    From (state 037) exp -> exp * DIV exp .
                    From (state 039) exp -> exp * DIV exp .
                    From (state 041) exp -> exp * DIV exp .
                    From (state 043) exp -> exp * DIV exp .
                    From (state 045) exp -> exp * DIV exp .
                    From (state 047) exp -> exp * DIV exp .
                    From (state 049) exp -> exp * DIV exp .
                    From (state 051) exp -> exp * DIV exp .
                    From (state 053) exp -> exp * DIV exp .
                    From (state 055) exp -> exp * DIV exp .
                    From (state 082) exp -> exp * DIV exp .
                    From (state 079) exp -> exp * DIV exp .
                    From (state 076) exp -> exp * DIV exp .
                    From (state 071) exp -> exp * DIV exp .
                    From (state 069) exp -> exp * DIV exp .
                    From (state 067) exp -> exp * DIV exp .
                    From (state 065) exp -> exp * DIV exp .
                    From (state 063) exp -> exp * DIV exp .
                    From (state 061) exp -> exp * DIV exp .
                    From (state 059) exp -> exp * DIV exp .
                    From (state 057) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 059) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 59

State 59:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 058) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 058) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 058) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 058) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 058) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 058) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 058) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 058) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 058) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 058) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 058) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 058) exp -> * exp DIV exp .
            (52)exp -> exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 058) exp -> exp DIV * exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 058) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 058) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 058) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 058) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 058) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 058) exp -> * exp COMMA exp .

                              BITNOT shift 68
                           [default] reduce 52

State 60:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * MOD exp .
                exp -> exp MOD * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp MOD exp .
                    To (state 060) exp -> * exp BIAND exp .
                    To (state 060) exp -> * exp BIOR exp .
                    To (state 060) exp -> * exp LSS exp .
                    To (state 060) exp -> * exp LSSEQ exp .
                    To (state 060) exp -> * exp GRT exp .
                    To (state 060) exp -> * exp GRTEQ exp .
                    To (state 060) exp -> * exp EQ exp .
                    To (state 060) exp -> * exp NOTEQ exp .
                    To (state 060) exp -> * exp ADD exp .
                    To (state 060) exp -> * exp MINUS exp .
                    To (state 060) exp -> * exp MULTI exp .
                    To (state 060) exp -> * exp DIV exp .
                    To (state 060) exp -> * exp MOD exp .
                    To (state 060) exp -> * INUM .
                    To (state 060) exp -> * FNUM .
                    To (state 060) exp -> * ID .
                    To (state 060) exp -> * LLB exp RLB .
                    To (state 060) exp -> * NOT exp .
                    To (state 060) exp -> * exp AND exp .
                    To (state 060) exp -> * exp OR exp .
                    To (state 060) exp -> * exp XOR exp .
                    To (state 060) exp -> * exp BITNOT exp .
                    To (state 060) exp -> * exp COMMA exp .
                    To (state 060) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * MOD exp .
                    From (state 147) exp -> exp * MOD exp .
                    From (state 153) exp -> exp * MOD exp .
                    From (state 098) exp -> exp * MOD exp .
                    From (state 106) exp -> exp * MOD exp .
                    From (state 140) exp -> exp * MOD exp .
                    From (state 138) exp -> exp * MOD exp .
                    From (state 136) exp -> exp * MOD exp .
                    From (state 113) exp -> exp * MOD exp .
                    From (state 128) exp -> exp * MOD exp .
                    From (state 087) exp -> exp * MOD exp .
                    From (state 034) exp -> exp * MOD exp .
                    From (state 037) exp -> exp * MOD exp .
                    From (state 039) exp -> exp * MOD exp .
                    From (state 041) exp -> exp * MOD exp .
                    From (state 043) exp -> exp * MOD exp .
                    From (state 045) exp -> exp * MOD exp .
                    From (state 047) exp -> exp * MOD exp .
                    From (state 049) exp -> exp * MOD exp .
                    From (state 051) exp -> exp * MOD exp .
                    From (state 053) exp -> exp * MOD exp .
                    From (state 055) exp -> exp * MOD exp .
                    From (state 057) exp -> exp * MOD exp .
                    From (state 082) exp -> exp * MOD exp .
                    From (state 079) exp -> exp * MOD exp .
                    From (state 076) exp -> exp * MOD exp .
                    From (state 071) exp -> exp * MOD exp .
                    From (state 069) exp -> exp * MOD exp .
                    From (state 067) exp -> exp * MOD exp .
                    From (state 065) exp -> exp * MOD exp .
                    From (state 063) exp -> exp * MOD exp .
                    From (state 061) exp -> exp * MOD exp .
                    From (state 059) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 061) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 61

State 61:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 060) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 060) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 060) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 060) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 060) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 060) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 060) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 060) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 060) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 060) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 060) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 060) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 060) exp -> * exp MOD exp .
            (53)exp -> exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 060) exp -> exp MOD * exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 060) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 060) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 060) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 060) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 060) exp -> * exp COMMA exp .

                              BITNOT shift 68
                           [default] reduce 53

State 62:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * AND exp .
                exp -> exp AND * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp AND exp .
                    To (state 062) exp -> * exp BIAND exp .
                    To (state 062) exp -> * exp BIOR exp .
                    To (state 062) exp -> * exp LSS exp .
                    To (state 062) exp -> * exp LSSEQ exp .
                    To (state 062) exp -> * exp GRT exp .
                    To (state 062) exp -> * exp GRTEQ exp .
                    To (state 062) exp -> * exp EQ exp .
                    To (state 062) exp -> * exp NOTEQ exp .
                    To (state 062) exp -> * exp ADD exp .
                    To (state 062) exp -> * exp MINUS exp .
                    To (state 062) exp -> * exp MULTI exp .
                    To (state 062) exp -> * exp DIV exp .
                    To (state 062) exp -> * exp MOD exp .
                    To (state 062) exp -> * INUM .
                    To (state 062) exp -> * FNUM .
                    To (state 062) exp -> * ID .
                    To (state 062) exp -> * LLB exp RLB .
                    To (state 062) exp -> * NOT exp .
                    To (state 062) exp -> * exp AND exp .
                    To (state 062) exp -> * exp OR exp .
                    To (state 062) exp -> * exp XOR exp .
                    To (state 062) exp -> * exp BITNOT exp .
                    To (state 062) exp -> * exp COMMA exp .
                    To (state 062) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * AND exp .
                    From (state 147) exp -> exp * AND exp .
                    From (state 153) exp -> exp * AND exp .
                    From (state 098) exp -> exp * AND exp .
                    From (state 106) exp -> exp * AND exp .
                    From (state 140) exp -> exp * AND exp .
                    From (state 138) exp -> exp * AND exp .
                    From (state 136) exp -> exp * AND exp .
                    From (state 113) exp -> exp * AND exp .
                    From (state 128) exp -> exp * AND exp .
                    From (state 087) exp -> exp * AND exp .
                    From (state 034) exp -> exp * AND exp .
                    From (state 037) exp -> exp * AND exp .
                    From (state 039) exp -> exp * AND exp .
                    From (state 041) exp -> exp * AND exp .
                    From (state 043) exp -> exp * AND exp .
                    From (state 045) exp -> exp * AND exp .
                    From (state 047) exp -> exp * AND exp .
                    From (state 049) exp -> exp * AND exp .
                    From (state 051) exp -> exp * AND exp .
                    From (state 053) exp -> exp * AND exp .
                    From (state 055) exp -> exp * AND exp .
                    From (state 057) exp -> exp * AND exp .
                    From (state 059) exp -> exp * AND exp .
                    From (state 082) exp -> exp * AND exp .
                    From (state 079) exp -> exp * AND exp .
                    From (state 076) exp -> exp * AND exp .
                    From (state 071) exp -> exp * AND exp .
                    From (state 069) exp -> exp * AND exp .
                    From (state 067) exp -> exp * AND exp .
                    From (state 065) exp -> exp * AND exp .
                    From (state 063) exp -> exp * AND exp .
                    From (state 061) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 063) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 63

State 63:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 062) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 062) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 062) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 062) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 062) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 062) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 062) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 062) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 062) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 062) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 062) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 062) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 062) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 062) exp -> * exp AND exp .
            (59)exp -> exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 062) exp -> exp AND * exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 062) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 062) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 062) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 062) exp -> * exp COMMA exp .

                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 59

State 64:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * OR exp .
                exp -> exp OR * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp OR exp .
                    To (state 064) exp -> * exp BIAND exp .
                    To (state 064) exp -> * exp BIOR exp .
                    To (state 064) exp -> * exp LSS exp .
                    To (state 064) exp -> * exp LSSEQ exp .
                    To (state 064) exp -> * exp GRT exp .
                    To (state 064) exp -> * exp GRTEQ exp .
                    To (state 064) exp -> * exp EQ exp .
                    To (state 064) exp -> * exp NOTEQ exp .
                    To (state 064) exp -> * exp ADD exp .
                    To (state 064) exp -> * exp MINUS exp .
                    To (state 064) exp -> * exp MULTI exp .
                    To (state 064) exp -> * exp DIV exp .
                    To (state 064) exp -> * exp MOD exp .
                    To (state 064) exp -> * INUM .
                    To (state 064) exp -> * FNUM .
                    To (state 064) exp -> * ID .
                    To (state 064) exp -> * LLB exp RLB .
                    To (state 064) exp -> * NOT exp .
                    To (state 064) exp -> * exp AND exp .
                    To (state 064) exp -> * exp OR exp .
                    To (state 064) exp -> * exp XOR exp .
                    To (state 064) exp -> * exp BITNOT exp .
                    To (state 064) exp -> * exp COMMA exp .
                    To (state 064) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * OR exp .
                    From (state 147) exp -> exp * OR exp .
                    From (state 153) exp -> exp * OR exp .
                    From (state 098) exp -> exp * OR exp .
                    From (state 106) exp -> exp * OR exp .
                    From (state 140) exp -> exp * OR exp .
                    From (state 138) exp -> exp * OR exp .
                    From (state 136) exp -> exp * OR exp .
                    From (state 113) exp -> exp * OR exp .
                    From (state 128) exp -> exp * OR exp .
                    From (state 087) exp -> exp * OR exp .
                    From (state 034) exp -> exp * OR exp .
                    From (state 037) exp -> exp * OR exp .
                    From (state 039) exp -> exp * OR exp .
                    From (state 041) exp -> exp * OR exp .
                    From (state 043) exp -> exp * OR exp .
                    From (state 045) exp -> exp * OR exp .
                    From (state 047) exp -> exp * OR exp .
                    From (state 049) exp -> exp * OR exp .
                    From (state 051) exp -> exp * OR exp .
                    From (state 053) exp -> exp * OR exp .
                    From (state 055) exp -> exp * OR exp .
                    From (state 057) exp -> exp * OR exp .
                    From (state 059) exp -> exp * OR exp .
                    From (state 061) exp -> exp * OR exp .
                    From (state 082) exp -> exp * OR exp .
                    From (state 079) exp -> exp * OR exp .
                    From (state 076) exp -> exp * OR exp .
                    From (state 071) exp -> exp * OR exp .
                    From (state 069) exp -> exp * OR exp .
                    From (state 067) exp -> exp * OR exp .
                    From (state 065) exp -> exp * OR exp .
                    From (state 063) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 065) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 65

State 65:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 064) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 064) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 064) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 064) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 064) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 064) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 064) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 064) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 064) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 064) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 064) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 064) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 064) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 064) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 064) exp -> * exp OR exp .
            (60)exp -> exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 064) exp -> exp OR * exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 064) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 064) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 064) exp -> * exp COMMA exp .

                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 60

State 66:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * XOR exp .
                exp -> exp XOR * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp XOR exp .
                    To (state 066) exp -> * exp BIAND exp .
                    To (state 066) exp -> * exp BIOR exp .
                    To (state 066) exp -> * exp LSS exp .
                    To (state 066) exp -> * exp LSSEQ exp .
                    To (state 066) exp -> * exp GRT exp .
                    To (state 066) exp -> * exp GRTEQ exp .
                    To (state 066) exp -> * exp EQ exp .
                    To (state 066) exp -> * exp NOTEQ exp .
                    To (state 066) exp -> * exp ADD exp .
                    To (state 066) exp -> * exp MINUS exp .
                    To (state 066) exp -> * exp MULTI exp .
                    To (state 066) exp -> * exp DIV exp .
                    To (state 066) exp -> * exp MOD exp .
                    To (state 066) exp -> * INUM .
                    To (state 066) exp -> * FNUM .
                    To (state 066) exp -> * ID .
                    To (state 066) exp -> * LLB exp RLB .
                    To (state 066) exp -> * NOT exp .
                    To (state 066) exp -> * exp AND exp .
                    To (state 066) exp -> * exp OR exp .
                    To (state 066) exp -> * exp XOR exp .
                    To (state 066) exp -> * exp BITNOT exp .
                    To (state 066) exp -> * exp COMMA exp .
                    To (state 066) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * XOR exp .
                    From (state 147) exp -> exp * XOR exp .
                    From (state 153) exp -> exp * XOR exp .
                    From (state 098) exp -> exp * XOR exp .
                    From (state 106) exp -> exp * XOR exp .
                    From (state 140) exp -> exp * XOR exp .
                    From (state 138) exp -> exp * XOR exp .
                    From (state 136) exp -> exp * XOR exp .
                    From (state 113) exp -> exp * XOR exp .
                    From (state 128) exp -> exp * XOR exp .
                    From (state 087) exp -> exp * XOR exp .
                    From (state 034) exp -> exp * XOR exp .
                    From (state 037) exp -> exp * XOR exp .
                    From (state 039) exp -> exp * XOR exp .
                    From (state 041) exp -> exp * XOR exp .
                    From (state 043) exp -> exp * XOR exp .
                    From (state 045) exp -> exp * XOR exp .
                    From (state 047) exp -> exp * XOR exp .
                    From (state 049) exp -> exp * XOR exp .
                    From (state 051) exp -> exp * XOR exp .
                    From (state 053) exp -> exp * XOR exp .
                    From (state 055) exp -> exp * XOR exp .
                    From (state 057) exp -> exp * XOR exp .
                    From (state 059) exp -> exp * XOR exp .
                    From (state 061) exp -> exp * XOR exp .
                    From (state 063) exp -> exp * XOR exp .
                    From (state 082) exp -> exp * XOR exp .
                    From (state 079) exp -> exp * XOR exp .
                    From (state 076) exp -> exp * XOR exp .
                    From (state 071) exp -> exp * XOR exp .
                    From (state 069) exp -> exp * XOR exp .
                    From (state 067) exp -> exp * XOR exp .
                    From (state 065) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 067) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 67

State 67:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 066) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 066) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 066) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 066) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 066) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 066) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 066) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 066) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 066) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 066) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 066) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 066) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 066) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 066) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 066) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 066) exp -> * exp XOR exp .
            (61)exp -> exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 066) exp -> exp XOR * exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 066) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 066) exp -> * exp COMMA exp .

                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 61

State 68:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * BITNOT exp .
                exp -> exp BITNOT * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp BITNOT exp .
                    To (state 068) exp -> * exp BIAND exp .
                    To (state 068) exp -> * exp BIOR exp .
                    To (state 068) exp -> * exp LSS exp .
                    To (state 068) exp -> * exp LSSEQ exp .
                    To (state 068) exp -> * exp GRT exp .
                    To (state 068) exp -> * exp GRTEQ exp .
                    To (state 068) exp -> * exp EQ exp .
                    To (state 068) exp -> * exp NOTEQ exp .
                    To (state 068) exp -> * exp ADD exp .
                    To (state 068) exp -> * exp MINUS exp .
                    To (state 068) exp -> * exp MULTI exp .
                    To (state 068) exp -> * exp DIV exp .
                    To (state 068) exp -> * exp MOD exp .
                    To (state 068) exp -> * INUM .
                    To (state 068) exp -> * FNUM .
                    To (state 068) exp -> * ID .
                    To (state 068) exp -> * LLB exp RLB .
                    To (state 068) exp -> * NOT exp .
                    To (state 068) exp -> * exp AND exp .
                    To (state 068) exp -> * exp OR exp .
                    To (state 068) exp -> * exp XOR exp .
                    To (state 068) exp -> * exp BITNOT exp .
                    To (state 068) exp -> * exp COMMA exp .
                    To (state 068) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * BITNOT exp .
                    From (state 147) exp -> exp * BITNOT exp .
                    From (state 153) exp -> exp * BITNOT exp .
                    From (state 098) exp -> exp * BITNOT exp .
                    From (state 106) exp -> exp * BITNOT exp .
                    From (state 140) exp -> exp * BITNOT exp .
                    From (state 138) exp -> exp * BITNOT exp .
                    From (state 136) exp -> exp * BITNOT exp .
                    From (state 113) exp -> exp * BITNOT exp .
                    From (state 128) exp -> exp * BITNOT exp .
                    From (state 087) exp -> exp * BITNOT exp .
                    From (state 034) exp -> exp * BITNOT exp .
                    From (state 037) exp -> exp * BITNOT exp .
                    From (state 039) exp -> exp * BITNOT exp .
                    From (state 041) exp -> exp * BITNOT exp .
                    From (state 043) exp -> exp * BITNOT exp .
                    From (state 045) exp -> exp * BITNOT exp .
                    From (state 047) exp -> exp * BITNOT exp .
                    From (state 049) exp -> exp * BITNOT exp .
                    From (state 051) exp -> exp * BITNOT exp .
                    From (state 053) exp -> exp * BITNOT exp .
                    From (state 055) exp -> exp * BITNOT exp .
                    From (state 057) exp -> exp * BITNOT exp .
                    From (state 059) exp -> exp * BITNOT exp .
                    From (state 061) exp -> exp * BITNOT exp .
                    From (state 063) exp -> exp * BITNOT exp .
                    From (state 065) exp -> exp * BITNOT exp .
                    From (state 082) exp -> exp * BITNOT exp .
                    From (state 079) exp -> exp * BITNOT exp .
                    From (state 076) exp -> exp * BITNOT exp .
                    From (state 071) exp -> exp * BITNOT exp .
                    From (state 069) exp -> exp * BITNOT exp .
                    From (state 067) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 069) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 69

State 69:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 068) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 068) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 068) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 068) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 068) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 068) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 068) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 068) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 068) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 068) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 068) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 068) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 068) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 068) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 068) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 068) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 068) exp -> * exp BITNOT exp .
            (62)exp -> exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 068) exp -> exp BITNOT * exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 068) exp -> * exp COMMA exp .

                              BITNOT shift 68
                           [default] reduce 62

State 70:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp * COMMA exp .
                exp -> exp COMMA * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 071) exp -> exp COMMA exp .
                    To (state 070) exp -> * exp BIAND exp .
                    To (state 070) exp -> * exp BIOR exp .
                    To (state 070) exp -> * exp LSS exp .
                    To (state 070) exp -> * exp LSSEQ exp .
                    To (state 070) exp -> * exp GRT exp .
                    To (state 070) exp -> * exp GRTEQ exp .
                    To (state 070) exp -> * exp EQ exp .
                    To (state 070) exp -> * exp NOTEQ exp .
                    To (state 070) exp -> * exp ADD exp .
                    To (state 070) exp -> * exp MINUS exp .
                    To (state 070) exp -> * exp MULTI exp .
                    To (state 070) exp -> * exp DIV exp .
                    To (state 070) exp -> * exp MOD exp .
                    To (state 070) exp -> * INUM .
                    To (state 070) exp -> * FNUM .
                    To (state 070) exp -> * ID .
                    To (state 070) exp -> * LLB exp RLB .
                    To (state 070) exp -> * NOT exp .
                    To (state 070) exp -> * exp AND exp .
                    To (state 070) exp -> * exp OR exp .
                    To (state 070) exp -> * exp XOR exp .
                    To (state 070) exp -> * exp BITNOT exp .
                    To (state 070) exp -> * exp COMMA exp .
                    To (state 070) exp -> * ID LMB exp RMB .
                    From (state 094) exp -> exp * COMMA exp .
                    From (state 147) exp -> exp * COMMA exp .
                    From (state 153) exp -> exp * COMMA exp .
                    From (state 098) exp -> exp * COMMA exp .
                    From (state 106) exp -> exp * COMMA exp .
                    From (state 140) exp -> exp * COMMA exp .
                    From (state 138) exp -> exp * COMMA exp .
                    From (state 136) exp -> exp * COMMA exp .
                    From (state 113) exp -> exp * COMMA exp .
                    From (state 128) exp -> exp * COMMA exp .
                    From (state 087) exp -> exp * COMMA exp .
                    From (state 034) exp -> exp * COMMA exp .
                    From (state 037) exp -> exp * COMMA exp .
                    From (state 039) exp -> exp * COMMA exp .
                    From (state 041) exp -> exp * COMMA exp .
                    From (state 043) exp -> exp * COMMA exp .
                    From (state 045) exp -> exp * COMMA exp .
                    From (state 047) exp -> exp * COMMA exp .
                    From (state 049) exp -> exp * COMMA exp .
                    From (state 051) exp -> exp * COMMA exp .
                    From (state 053) exp -> exp * COMMA exp .
                    From (state 055) exp -> exp * COMMA exp .
                    From (state 057) exp -> exp * COMMA exp .
                    From (state 059) exp -> exp * COMMA exp .
                    From (state 061) exp -> exp * COMMA exp .
                    From (state 063) exp -> exp * COMMA exp .
                    From (state 065) exp -> exp * COMMA exp .
                    From (state 067) exp -> exp * COMMA exp .
                    From (state 082) exp -> exp * COMMA exp .
                    From (state 079) exp -> exp * COMMA exp .
                    From (state 076) exp -> exp * COMMA exp .
                    From (state 071) exp -> exp * COMMA exp .
                    From (state 069) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 71

State 71:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 070) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 070) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 070) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 070) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 070) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 070) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 070) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 070) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 070) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 070) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 070) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 070) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 070) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 070) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 070) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 070) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 070) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 070) exp -> * exp COMMA exp .
            (63)exp -> exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 070) exp -> exp COMMA * exp .

                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 63

State 72:
            (54)exp -> INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 029) exp -> * INUM .
                    From (state 032) exp -> * INUM .
                    From (state 089) exp -> * INUM .
                    From (state 093) exp -> * INUM .
                    From (state 095) exp -> * INUM .
                    From (state 144) exp -> * INUM .
                    From (state 146) exp -> * INUM .
                    From (state 148) exp -> * INUM .
                    From (state 152) exp -> * INUM .
                    From (state 156) exp -> * INUM .
                    From (state 097) exp -> * INUM .
                    From (state 099) exp -> * INUM .
                    From (state 102) exp -> * INUM .
                    From (state 105) exp -> * INUM .
                    From (state 107) exp -> * INUM .
                    From (state 139) exp -> * INUM .
                    From (state 137) exp -> * INUM .
                    From (state 135) exp -> * INUM .
                    From (state 112) exp -> * INUM .
                    From (state 127) exp -> * INUM .
                    From (state 116) exp -> * INUM .
                    From (state 086) exp -> * INUM .
                    From (state 036) exp -> * INUM .
                    From (state 038) exp -> * INUM .
                    From (state 040) exp -> * INUM .
                    From (state 042) exp -> * INUM .
                    From (state 044) exp -> * INUM .
                    From (state 046) exp -> * INUM .
                    From (state 048) exp -> * INUM .
                    From (state 050) exp -> * INUM .
                    From (state 052) exp -> * INUM .
                    From (state 054) exp -> * INUM .
                    From (state 056) exp -> * INUM .
                    From (state 058) exp -> * INUM .
                    From (state 060) exp -> * INUM .
                    From (state 062) exp -> * INUM .
                    From (state 064) exp -> * INUM .
                    From (state 066) exp -> * INUM .
                    From (state 068) exp -> * INUM .
                    From (state 081) exp -> * INUM .
                    From (state 078) exp -> * INUM .
                    From (state 075) exp -> * INUM .
                    From (state 070) exp -> * INUM .

                           [default] reduce 54

State 73:
            (55)exp -> FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 029) exp -> * FNUM .
                    From (state 032) exp -> * FNUM .
                    From (state 089) exp -> * FNUM .
                    From (state 093) exp -> * FNUM .
                    From (state 095) exp -> * FNUM .
                    From (state 144) exp -> * FNUM .
                    From (state 146) exp -> * FNUM .
                    From (state 148) exp -> * FNUM .
                    From (state 152) exp -> * FNUM .
                    From (state 156) exp -> * FNUM .
                    From (state 097) exp -> * FNUM .
                    From (state 099) exp -> * FNUM .
                    From (state 102) exp -> * FNUM .
                    From (state 105) exp -> * FNUM .
                    From (state 107) exp -> * FNUM .
                    From (state 139) exp -> * FNUM .
                    From (state 137) exp -> * FNUM .
                    From (state 135) exp -> * FNUM .
                    From (state 112) exp -> * FNUM .
                    From (state 127) exp -> * FNUM .
                    From (state 116) exp -> * FNUM .
                    From (state 086) exp -> * FNUM .
                    From (state 036) exp -> * FNUM .
                    From (state 038) exp -> * FNUM .
                    From (state 040) exp -> * FNUM .
                    From (state 042) exp -> * FNUM .
                    From (state 044) exp -> * FNUM .
                    From (state 046) exp -> * FNUM .
                    From (state 048) exp -> * FNUM .
                    From (state 050) exp -> * FNUM .
                    From (state 052) exp -> * FNUM .
                    From (state 054) exp -> * FNUM .
                    From (state 056) exp -> * FNUM .
                    From (state 058) exp -> * FNUM .
                    From (state 060) exp -> * FNUM .
                    From (state 062) exp -> * FNUM .
                    From (state 064) exp -> * FNUM .
                    From (state 066) exp -> * FNUM .
                    From (state 068) exp -> * FNUM .
                    From (state 081) exp -> * FNUM .
                    From (state 078) exp -> * FNUM .
                    From (state 075) exp -> * FNUM .
                    From (state 070) exp -> * FNUM .

                           [default] reduce 55

State 74:
            (56)exp -> ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 029) exp -> * ID .
                    From (state 032) exp -> * ID .
                    From (state 089) exp -> * ID .
                    From (state 093) exp -> * ID .
                    From (state 095) exp -> * ID .
                    From (state 144) exp -> * ID .
                    From (state 146) exp -> * ID .
                    From (state 148) exp -> * ID .
                    From (state 152) exp -> * ID .
                    From (state 156) exp -> * ID .
                    From (state 097) exp -> * ID .
                    From (state 099) exp -> * ID .
                    From (state 102) exp -> * ID .
                    From (state 105) exp -> * ID .
                    From (state 107) exp -> * ID .
                    From (state 139) exp -> * ID .
                    From (state 137) exp -> * ID .
                    From (state 135) exp -> * ID .
                    From (state 112) exp -> * ID .
                    From (state 127) exp -> * ID .
                    From (state 116) exp -> * ID .
                    From (state 086) exp -> * ID .
                    From (state 036) exp -> * ID .
                    From (state 038) exp -> * ID .
                    From (state 040) exp -> * ID .
                    From (state 042) exp -> * ID .
                    From (state 044) exp -> * ID .
                    From (state 046) exp -> * ID .
                    From (state 048) exp -> * ID .
                    From (state 050) exp -> * ID .
                    From (state 052) exp -> * ID .
                    From (state 054) exp -> * ID .
                    From (state 056) exp -> * ID .
                    From (state 058) exp -> * ID .
                    From (state 060) exp -> * ID .
                    From (state 062) exp -> * ID .
                    From (state 064) exp -> * ID .
                    From (state 066) exp -> * ID .
                    From (state 068) exp -> * ID .
                    From (state 081) exp -> * ID .
                    From (state 078) exp -> * ID .
                    From (state 075) exp -> * ID .
                    From (state 070) exp -> * ID .
                exp -> ID * LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 075) exp -> ID LMB * exp RMB .
                    From (state 029) exp -> * ID LMB exp RMB .
                    From (state 032) exp -> * ID LMB exp RMB .
                    From (state 089) exp -> * ID LMB exp RMB .
                    From (state 093) exp -> * ID LMB exp RMB .
                    From (state 095) exp -> * ID LMB exp RMB .
                    From (state 144) exp -> * ID LMB exp RMB .
                    From (state 146) exp -> * ID LMB exp RMB .
                    From (state 148) exp -> * ID LMB exp RMB .
                    From (state 152) exp -> * ID LMB exp RMB .
                    From (state 156) exp -> * ID LMB exp RMB .
                    From (state 097) exp -> * ID LMB exp RMB .
                    From (state 099) exp -> * ID LMB exp RMB .
                    From (state 102) exp -> * ID LMB exp RMB .
                    From (state 105) exp -> * ID LMB exp RMB .
                    From (state 107) exp -> * ID LMB exp RMB .
                    From (state 139) exp -> * ID LMB exp RMB .
                    From (state 137) exp -> * ID LMB exp RMB .
                    From (state 135) exp -> * ID LMB exp RMB .
                    From (state 112) exp -> * ID LMB exp RMB .
                    From (state 127) exp -> * ID LMB exp RMB .
                    From (state 116) exp -> * ID LMB exp RMB .
                    From (state 086) exp -> * ID LMB exp RMB .
                    From (state 036) exp -> * ID LMB exp RMB .
                    From (state 038) exp -> * ID LMB exp RMB .
                    From (state 040) exp -> * ID LMB exp RMB .
                    From (state 042) exp -> * ID LMB exp RMB .
                    From (state 044) exp -> * ID LMB exp RMB .
                    From (state 046) exp -> * ID LMB exp RMB .
                    From (state 048) exp -> * ID LMB exp RMB .
                    From (state 050) exp -> * ID LMB exp RMB .
                    From (state 052) exp -> * ID LMB exp RMB .
                    From (state 054) exp -> * ID LMB exp RMB .
                    From (state 056) exp -> * ID LMB exp RMB .
                    From (state 058) exp -> * ID LMB exp RMB .
                    From (state 060) exp -> * ID LMB exp RMB .
                    From (state 062) exp -> * ID LMB exp RMB .
                    From (state 064) exp -> * ID LMB exp RMB .
                    From (state 066) exp -> * ID LMB exp RMB .
                    From (state 068) exp -> * ID LMB exp RMB .
                    From (state 081) exp -> * ID LMB exp RMB .
                    From (state 078) exp -> * ID LMB exp RMB .
                    From (state 075) exp -> * ID LMB exp RMB .
                    From (state 070) exp -> * ID LMB exp RMB .

                                 LMB shift 75
                           [default] reduce 56

State 75:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 076) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 074) exp -> ID * LMB exp RMB .
                exp -> ID LMB * exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 076) exp -> ID LMB exp * RMB .
                    From (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 76

State 76:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 075) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 075) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 075) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 075) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 075) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 075) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 075) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 075) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 075) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 075) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 075) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 075) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 075) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 075) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 075) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 075) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 075) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 075) exp -> * exp COMMA exp .
                exp -> ID LMB exp * RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 077) exp -> ID LMB exp RMB .
                    From (state 075) exp -> ID LMB * exp RMB .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RMB shift 77

State 77:
            (64)exp -> ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 076) exp -> ID LMB exp * RMB .

                           [default] reduce 64

State 78:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> LLB * exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 079) exp -> LLB exp * RLB .
                    From (state 029) exp -> * LLB exp RLB .
                    From (state 032) exp -> * LLB exp RLB .
                    From (state 089) exp -> * LLB exp RLB .
                    From (state 093) exp -> * LLB exp RLB .
                    From (state 095) exp -> * LLB exp RLB .
                    From (state 144) exp -> * LLB exp RLB .
                    From (state 146) exp -> * LLB exp RLB .
                    From (state 148) exp -> * LLB exp RLB .
                    From (state 152) exp -> * LLB exp RLB .
                    From (state 156) exp -> * LLB exp RLB .
                    From (state 097) exp -> * LLB exp RLB .
                    From (state 099) exp -> * LLB exp RLB .
                    From (state 102) exp -> * LLB exp RLB .
                    From (state 105) exp -> * LLB exp RLB .
                    From (state 107) exp -> * LLB exp RLB .
                    From (state 139) exp -> * LLB exp RLB .
                    From (state 137) exp -> * LLB exp RLB .
                    From (state 135) exp -> * LLB exp RLB .
                    From (state 112) exp -> * LLB exp RLB .
                    From (state 127) exp -> * LLB exp RLB .
                    From (state 116) exp -> * LLB exp RLB .
                    From (state 086) exp -> * LLB exp RLB .
                    From (state 036) exp -> * LLB exp RLB .
                    From (state 038) exp -> * LLB exp RLB .
                    From (state 040) exp -> * LLB exp RLB .
                    From (state 042) exp -> * LLB exp RLB .
                    From (state 044) exp -> * LLB exp RLB .
                    From (state 046) exp -> * LLB exp RLB .
                    From (state 048) exp -> * LLB exp RLB .
                    From (state 050) exp -> * LLB exp RLB .
                    From (state 052) exp -> * LLB exp RLB .
                    From (state 054) exp -> * LLB exp RLB .
                    From (state 056) exp -> * LLB exp RLB .
                    From (state 058) exp -> * LLB exp RLB .
                    From (state 060) exp -> * LLB exp RLB .
                    From (state 062) exp -> * LLB exp RLB .
                    From (state 064) exp -> * LLB exp RLB .
                    From (state 066) exp -> * LLB exp RLB .
                    From (state 068) exp -> * LLB exp RLB .
                    From (state 070) exp -> * LLB exp RLB .
                    From (state 081) exp -> * LLB exp RLB .
                    From (state 078) exp -> * LLB exp RLB .
                    From (state 075) exp -> * LLB exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 079) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 79

State 79:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 078) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 078) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 078) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 078) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 078) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 078) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 078) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 078) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 078) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 078) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 078) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 078) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 078) exp -> * exp MOD exp .
                exp -> LLB exp * RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 080) exp -> LLB exp RLB .
                    From (state 078) exp -> LLB * exp RLB .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 078) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 078) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 078) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 078) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 078) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 80

State 80:
            (57)exp -> LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 079) exp -> LLB exp * RLB .

                           [default] reduce 57

State 81:
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> NOT * exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> NOT exp .
                    To (state 081) exp -> * exp BIAND exp .
                    To (state 081) exp -> * exp BIOR exp .
                    To (state 081) exp -> * exp LSS exp .
                    To (state 081) exp -> * exp LSSEQ exp .
                    To (state 081) exp -> * exp GRT exp .
                    To (state 081) exp -> * exp GRTEQ exp .
                    To (state 081) exp -> * exp EQ exp .
                    To (state 081) exp -> * exp NOTEQ exp .
                    To (state 081) exp -> * exp ADD exp .
                    To (state 081) exp -> * exp MINUS exp .
                    To (state 081) exp -> * exp MULTI exp .
                    To (state 081) exp -> * exp DIV exp .
                    To (state 081) exp -> * exp MOD exp .
                    To (state 081) exp -> * INUM .
                    To (state 081) exp -> * FNUM .
                    To (state 081) exp -> * ID .
                    To (state 081) exp -> * LLB exp RLB .
                    To (state 081) exp -> * NOT exp .
                    To (state 081) exp -> * exp AND exp .
                    To (state 081) exp -> * exp OR exp .
                    To (state 081) exp -> * exp XOR exp .
                    To (state 081) exp -> * exp BITNOT exp .
                    To (state 081) exp -> * exp COMMA exp .
                    To (state 081) exp -> * ID LMB exp RMB .
                    From (state 029) exp -> * NOT exp .
                    From (state 032) exp -> * NOT exp .
                    From (state 089) exp -> * NOT exp .
                    From (state 093) exp -> * NOT exp .
                    From (state 095) exp -> * NOT exp .
                    From (state 144) exp -> * NOT exp .
                    From (state 146) exp -> * NOT exp .
                    From (state 148) exp -> * NOT exp .
                    From (state 152) exp -> * NOT exp .
                    From (state 156) exp -> * NOT exp .
                    From (state 097) exp -> * NOT exp .
                    From (state 099) exp -> * NOT exp .
                    From (state 102) exp -> * NOT exp .
                    From (state 105) exp -> * NOT exp .
                    From (state 107) exp -> * NOT exp .
                    From (state 139) exp -> * NOT exp .
                    From (state 137) exp -> * NOT exp .
                    From (state 135) exp -> * NOT exp .
                    From (state 112) exp -> * NOT exp .
                    From (state 127) exp -> * NOT exp .
                    From (state 116) exp -> * NOT exp .
                    From (state 086) exp -> * NOT exp .
                    From (state 036) exp -> * NOT exp .
                    From (state 038) exp -> * NOT exp .
                    From (state 040) exp -> * NOT exp .
                    From (state 042) exp -> * NOT exp .
                    From (state 044) exp -> * NOT exp .
                    From (state 046) exp -> * NOT exp .
                    From (state 048) exp -> * NOT exp .
                    From (state 050) exp -> * NOT exp .
                    From (state 052) exp -> * NOT exp .
                    From (state 054) exp -> * NOT exp .
                    From (state 056) exp -> * NOT exp .
                    From (state 058) exp -> * NOT exp .
                    From (state 060) exp -> * NOT exp .
                    From (state 062) exp -> * NOT exp .
                    From (state 064) exp -> * NOT exp .
                    From (state 066) exp -> * NOT exp .
                    From (state 068) exp -> * NOT exp .
                    From (state 070) exp -> * NOT exp .
                    From (state 075) exp -> * NOT exp .
                    From (state 081) exp -> * NOT exp .
                    From (state 078) exp -> * NOT exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 082) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 82

State 82:
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 081) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 081) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 081) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 081) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 081) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 081) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 081) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 081) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 081) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 081) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 081) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 081) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 081) exp -> * exp MOD exp .
            (58)exp -> NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    From (state 081) exp -> NOT * exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 081) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 081) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 081) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 081) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RMB,SEMICOLOM,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 081) exp -> * exp COMMA exp .

                              BITNOT shift 68
                           [default] reduce 58

State 83:
                vallist -> * ID COMMA vallist . {SEMICOLOM}
                    To (state 015) vallist -> ID * COMMA vallist .
                vallist -> * ID . {SEMICOLOM}
                    To (state 015) vallist -> ID .
                stmt -> tp * vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 084) stmt -> tp vallist * SEMICOLOM .
                    From (state 029) stmt -> * tp vallist SEMICOLOM .
                    From (state 156) stmt -> * tp vallist SEMICOLOM .
                    From (state 148) stmt -> * tp vallist SEMICOLOM .
                    From (state 144) stmt -> * tp vallist SEMICOLOM .
                    From (state 116) stmt -> * tp vallist SEMICOLOM .
                    From (state 107) stmt -> * tp vallist SEMICOLOM .
                    From (state 102) stmt -> * tp vallist SEMICOLOM .
                    From (state 099) stmt -> * tp vallist SEMICOLOM .
                    From (state 095) stmt -> * tp vallist SEMICOLOM .
                    From (state 089) stmt -> * tp vallist SEMICOLOM .
                    From (state 032) stmt -> * tp vallist SEMICOLOM .

                                  ID shift 15
                             vallist shift 84

State 84:
                stmt -> tp vallist * SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 085) stmt -> tp vallist SEMICOLOM .
                    From (state 083) stmt -> tp * vallist SEMICOLOM .

                           SEMICOLOM shift 85

State 85:
            (19)stmt -> tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 084) stmt -> tp vallist * SEMICOLOM .

                           [default] reduce 19

State 86:
                stmt -> RETURN * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 087) stmt -> RETURN exp * SEMICOLOM .
                    From (state 029) stmt -> * RETURN exp SEMICOLOM .
                    From (state 156) stmt -> * RETURN exp SEMICOLOM .
                    From (state 148) stmt -> * RETURN exp SEMICOLOM .
                    From (state 144) stmt -> * RETURN exp SEMICOLOM .
                    From (state 116) stmt -> * RETURN exp SEMICOLOM .
                    From (state 107) stmt -> * RETURN exp SEMICOLOM .
                    From (state 102) stmt -> * RETURN exp SEMICOLOM .
                    From (state 099) stmt -> * RETURN exp SEMICOLOM .
                    From (state 095) stmt -> * RETURN exp SEMICOLOM .
                    From (state 089) stmt -> * RETURN exp SEMICOLOM .
                    From (state 032) stmt -> * RETURN exp SEMICOLOM .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 087) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 87

State 87:
                stmt -> RETURN exp * SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 088) stmt -> RETURN exp SEMICOLOM .
                    From (state 086) stmt -> RETURN * exp SEMICOLOM .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 086) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 086) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 086) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 086) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 086) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 086) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 086) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 086) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 086) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 086) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 086) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 086) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 086) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 062) exp -> exp AND * exp .
                    From (state 086) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 064) exp -> exp OR * exp .
                    From (state 086) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 086) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 086) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 086) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLOM shift 88

State 88:
            (20)stmt -> RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 087) stmt -> RETURN exp * SEMICOLOM .

                           [default] reduce 20

State 89:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {RGB}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {RGB}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {RGB}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {RGB}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> LGB * stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 090) stmt -> LGB stmt * RGB .
                    From (state 029) stmt -> * LGB stmt RGB .
                    From (state 156) stmt -> * LGB stmt RGB .
                    From (state 148) stmt -> * LGB stmt RGB .
                    From (state 144) stmt -> * LGB stmt RGB .
                    From (state 116) stmt -> * LGB stmt RGB .
                    From (state 107) stmt -> * LGB stmt RGB .
                    From (state 102) stmt -> * LGB stmt RGB .
                    From (state 099) stmt -> * LGB stmt RGB .
                    From (state 095) stmt -> * LGB stmt RGB .
                    From (state 089) stmt -> * LGB stmt RGB .
                    From (state 032) stmt -> * LGB stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {RGB}
                    To (state 092) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {RGB}
                    To (state 092) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {RGB}
                    To (state 145) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {RGB}
                    To (state 149) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 92
                               WHILE shift 145
                                 FOR shift 149
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 90
                                 exp shift 34

State 90:
                stmt -> LGB stmt * RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 091) stmt -> LGB stmt RGB .
                    From (state 089) stmt -> LGB * stmt RGB .

                                 RGB shift 91

State 91:
            (21)stmt -> LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 090) stmt -> LGB stmt * RGB .

                           [default] reduce 21

State 92:
                stmt -> IF * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 093) stmt -> IF LLB * exp RLB stmt .
                    From (state 029) stmt -> * IF LLB exp RLB stmt .
                    From (state 032) stmt -> * IF LLB exp RLB stmt .
                    From (state 156) stmt -> * IF LLB exp RLB stmt .
                    From (state 148) stmt -> * IF LLB exp RLB stmt .
                    From (state 144) stmt -> * IF LLB exp RLB stmt .
                    From (state 089) stmt -> * IF LLB exp RLB stmt .
                stmt -> IF * LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 093) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                    From (state 029) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 032) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 156) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 148) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 144) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 089) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .

                                 LLB shift 93

State 93:
                stmt -> IF LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF LLB exp * RLB stmt .
                    From (state 092) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB * exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 094) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                    From (state 092) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 094) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 94

State 94:
                stmt -> IF LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 095) stmt -> IF LLB exp RLB * stmt .
                    From (state 093) stmt -> IF LLB * exp RLB stmt .
                stmt -> IF LLB exp * RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 095) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .
                    From (state 093) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 093) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 093) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 093) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 093) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 093) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 093) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 093) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 093) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 093) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 093) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 093) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 093) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 093) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 093) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 093) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 093) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 093) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 093) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 95

State 95:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 100) stmt -> IF LLB exp RLB stmt .
                    To (state 095) stmt -> * exp SEMICOLOM .
                    To (state 095) stmt -> * tp vallist SEMICOLOM .
                    To (state 095) stmt -> * RETURN exp SEMICOLOM .
                    To (state 095) stmt -> * LGB stmt RGB .
                    To (state 095) stmt -> * IF LLB exp RLB stmt .
                    To (state 095) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 095) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 095) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 094) stmt -> IF LLB exp * RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB * stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 143) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                    From (state 094) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 104) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 109) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 096) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 104) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 109) stmt1 -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 96
                               WHILE shift 104
                                 FOR shift 109
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 100
                                 exp shift 34
                               stmt1 shift 143

State 96:
                stmt -> IF * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 097) stmt -> IF LLB * exp RLB stmt .
                    From (state 116) stmt -> * IF LLB exp RLB stmt .
                    From (state 107) stmt -> * IF LLB exp RLB stmt .
                    From (state 102) stmt -> * IF LLB exp RLB stmt .
                    From (state 099) stmt -> * IF LLB exp RLB stmt .
                    From (state 095) stmt -> * IF LLB exp RLB stmt .
                stmt -> IF * LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 097) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                    From (state 116) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 107) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 102) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 099) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    From (state 095) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 097) stmt1 -> IF LLB * exp RLB stmt1 ELSE stmt1 .
                    From (state 116) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 107) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 102) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 099) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    From (state 095) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .

                                 LLB shift 97

State 97:
                stmt -> IF LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF LLB exp * RLB stmt .
                    From (state 096) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB * exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 098) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                    From (state 096) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt1 -> IF LLB * exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 098) stmt1 -> IF LLB exp * RLB stmt1 ELSE stmt1 .
                    From (state 096) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 098) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 98

State 98:
                stmt -> IF LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 099) stmt -> IF LLB exp RLB * stmt .
                    From (state 097) stmt -> IF LLB * exp RLB stmt .
                stmt -> IF LLB exp * RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 099) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .
                    From (state 097) stmt -> IF LLB * exp RLB stmt1 ELSE stmt .
                stmt1 -> IF LLB exp * RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 099) stmt1 -> IF LLB exp RLB * stmt1 ELSE stmt1 .
                    From (state 097) stmt1 -> IF LLB * exp RLB stmt1 ELSE stmt1 .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 097) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 097) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 097) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 097) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 097) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 097) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 097) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 097) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 097) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 097) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 097) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 097) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 097) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 097) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 097) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 097) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 097) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 097) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 99

State 99:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt .
                stmt -> IF LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 100) stmt -> IF LLB exp RLB stmt .
                    To (state 099) stmt -> * exp SEMICOLOM .
                    To (state 099) stmt -> * tp vallist SEMICOLOM .
                    To (state 099) stmt -> * RETURN exp SEMICOLOM .
                    To (state 099) stmt -> * LGB stmt RGB .
                    To (state 099) stmt -> * IF LLB exp RLB stmt .
                    To (state 099) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 099) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 099) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 098) stmt -> IF LLB exp * RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB * stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 101) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                    From (state 098) stmt -> IF LLB exp * RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 104) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 109) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 096) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> IF LLB exp RLB * stmt1 ELSE stmt1 . {ELSE}
                    To (state 101) stmt1 -> IF LLB exp RLB stmt1 * ELSE stmt1 .
                    From (state 098) stmt1 -> IF LLB exp * RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 104) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 109) stmt1 -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 96
                               WHILE shift 104
                                 FOR shift 109
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 100
                                 exp shift 34
                               stmt1 shift 101

State 100:
            (22)stmt -> IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 095) stmt -> IF LLB exp RLB * stmt .
                    From (state 099) stmt -> IF LLB exp RLB * stmt .

                           [default] reduce 22

State 101:
                stmt -> IF LLB exp RLB stmt1 * ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 102) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .
                    From (state 099) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .
                stmt1 -> IF LLB exp RLB stmt1 * ELSE stmt1 . {ELSE}
                    To (state 102) stmt1 -> IF LLB exp RLB stmt1 ELSE * stmt1 .
                    From (state 099) stmt1 -> IF LLB exp RLB * stmt1 ELSE stmt1 .

                                ELSE shift 102

State 102:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB stmt1 ELSE * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 103) stmt -> IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 102) stmt -> * exp SEMICOLOM .
                    To (state 102) stmt -> * tp vallist SEMICOLOM .
                    To (state 102) stmt -> * RETURN exp SEMICOLOM .
                    To (state 102) stmt -> * LGB stmt RGB .
                    To (state 102) stmt -> * IF LLB exp RLB stmt .
                    To (state 102) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 102) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 102) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 101) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 104) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 109) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 096) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> IF LLB exp RLB stmt1 ELSE * stmt1 . {ELSE}
                    To (state 142) stmt1 -> IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 102) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 102) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    To (state 102) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 101) stmt1 -> IF LLB exp RLB stmt1 * ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 104) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 109) stmt1 -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 96
                               WHILE shift 104
                                 FOR shift 109
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 103
                                 exp shift 34
                               stmt1 shift 142

State 103:
            (23)stmt -> IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 144) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .
                    From (state 102) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .

                           [default] reduce 23

State 104:
                stmt -> WHILE * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 105) stmt -> WHILE LLB * exp RLB stmt .
                    From (state 095) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 099) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 116) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 107) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 102) stmt -> * WHILE LLB exp RLB stmt .
                stmt1 -> WHILE * LLB exp RLB stmt1 . {ELSE}
                    To (state 105) stmt1 -> WHILE LLB * exp RLB stmt1 .
                    From (state 095) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 099) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 116) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 107) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    From (state 102) stmt1 -> * WHILE LLB exp RLB stmt1 .

                                 LLB shift 105

State 105:
                stmt -> WHILE LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 106) stmt -> WHILE LLB exp * RLB stmt .
                    From (state 104) stmt -> WHILE * LLB exp RLB stmt .
                stmt1 -> WHILE LLB * exp RLB stmt1 . {ELSE}
                    To (state 106) stmt1 -> WHILE LLB exp * RLB stmt1 .
                    From (state 104) stmt1 -> WHILE * LLB exp RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 106) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 106

State 106:
                stmt -> WHILE LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 107) stmt -> WHILE LLB exp RLB * stmt .
                    From (state 105) stmt -> WHILE LLB * exp RLB stmt .
                stmt1 -> WHILE LLB exp * RLB stmt1 . {ELSE}
                    To (state 107) stmt1 -> WHILE LLB exp RLB * stmt1 .
                    From (state 105) stmt1 -> WHILE LLB * exp RLB stmt1 .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 105) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 105) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 105) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 105) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 105) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 105) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 105) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 105) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 105) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 105) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 105) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 105) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 105) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 105) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 105) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 105) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 105) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 105) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 107

State 107:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 104) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> WHILE LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 108) stmt -> WHILE LLB exp RLB stmt .
                    To (state 107) stmt -> * exp SEMICOLOM .
                    To (state 107) stmt -> * tp vallist SEMICOLOM .
                    To (state 107) stmt -> * RETURN exp SEMICOLOM .
                    To (state 107) stmt -> * LGB stmt RGB .
                    To (state 107) stmt -> * IF LLB exp RLB stmt .
                    To (state 107) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 107) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 107) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 106) stmt -> WHILE LLB exp * RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 109) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 096) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 104) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> WHILE LLB exp RLB * stmt1 . {ELSE}
                    To (state 141) stmt1 -> WHILE LLB exp RLB stmt1 .
                    To (state 107) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 107) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    To (state 107) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 106) stmt1 -> WHILE LLB exp * RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 109) stmt1 -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 96
                               WHILE shift 104
                                 FOR shift 109
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 108
                                 exp shift 34
                               stmt1 shift 141

State 108:
            (24)stmt -> WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 148) stmt -> WHILE LLB exp RLB * stmt .
                    From (state 107) stmt -> WHILE LLB exp RLB * stmt .

                           [default] reduce 24

State 109:
                stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 110) stmt -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 095) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 099) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 102) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 116) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 107) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt1 -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 110) stmt1 -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 095) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 099) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 102) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 116) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 107) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .

                                 LLB shift 110

State 110:
                stmt -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 111) stmt -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 109) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                initlist -> * init COMMA initlist . {SEMICOLOM}
                    To (state 131) initlist -> init * COMMA initlist .
                initlist -> * init . {SEMICOLOM}
                    To (state 131) initlist -> init .
                    To (state 110) init -> * ID ASSIGN exp .
                    To (state 110) init -> * ID ADDEQ exp .
                    To (state 110) init -> * ID MINUSEQ exp .
                init -> * ID ASSIGN exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * ASSIGN exp .
                init -> * ID ADDEQ exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * ADDEQ exp .
                init -> * ID MINUSEQ exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * MINUSEQ exp .
                stmt1 -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 111) stmt1 -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 109) stmt1 -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .

                                  ID shift 134
                            initlist shift 111
                                init shift 131

State 111:
                stmt -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 112) stmt -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt .
                    From (state 110) stmt -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt1 -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 112) stmt1 -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt1 .
                    From (state 110) stmt1 -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .

                           SEMICOLOM shift 112

State 112:
                stmt -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 113) stmt -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt .
                    From (state 111) stmt -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt1 -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 113) stmt1 -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt1 .
                    From (state 111) stmt1 -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 113) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 113

State 113:
                stmt -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 114) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt .
                    From (state 112) stmt -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt .
                stmt1 -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 114) stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt1 .
                    From (state 112) stmt1 -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt1 .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 112) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 112) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 112) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 112) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 112) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 112) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 112) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 112) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 112) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 112) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 112) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 112) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 112) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 062) exp -> exp AND * exp .
                    From (state 112) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 064) exp -> exp OR * exp .
                    From (state 112) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 112) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 112) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 112) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLOM shift 114

State 114:
                stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 115) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt .
                    From (state 113) stmt -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt .
                steplist -> * step COMMA steplist . {RLB}
                    To (state 119) steplist -> step * COMMA steplist .
                steplist -> * step . {RLB}
                    To (state 119) steplist -> step .
                    To (state 114) step -> * BIADD ID .
                    To (state 114) step -> * ID BIADD .
                    To (state 114) step -> * BIMINUS ID .
                    To (state 114) step -> * ID BIMINUS .
                    To (state 114) step -> * ID ASSIGN exp .
                step -> * BIADD ID . {COMMA,RLB}
                    To (state 122) step -> BIADD * ID .
                step -> * ID BIADD . {COMMA,RLB}
                    To (state 124) step -> ID * BIADD .
                step -> * BIMINUS ID . {COMMA,RLB}
                    To (state 129) step -> BIMINUS * ID .
                step -> * ID BIMINUS . {COMMA,RLB}
                    To (state 124) step -> ID * BIMINUS .
                step -> * ID ASSIGN exp . {COMMA,RLB}
                    To (state 124) step -> ID * ASSIGN exp .
                stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt1 . {ELSE}
                    To (state 115) stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt1 .
                    From (state 113) stmt1 -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt1 .

                               BIADD shift 122
                             BIMINUS shift 129
                                  ID shift 124
                            steplist shift 115
                                step shift 119

State 115:
                stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 116) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt .
                    From (state 114) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt .
                stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt1 . {ELSE}
                    To (state 116) stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt1 .
                    From (state 114) stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt1 .

                                 RLB shift 116

State 116:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 096) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 104) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 109) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 117) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    To (state 116) stmt -> * exp SEMICOLOM .
                    To (state 116) stmt -> * tp vallist SEMICOLOM .
                    To (state 116) stmt -> * RETURN exp SEMICOLOM .
                    To (state 116) stmt -> * LGB stmt RGB .
                    To (state 116) stmt -> * IF LLB exp RLB stmt .
                    To (state 116) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 116) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 116) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 115) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt .
                stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    To (state 096) stmt1 -> IF * LLB exp RLB stmt1 ELSE stmt1 .
                stmt1 -> * WHILE LLB exp RLB stmt1 . {ELSE}
                    To (state 104) stmt1 -> WHILE * LLB exp RLB stmt1 .
                stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    To (state 109) stmt1 -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt1 . {ELSE}
                    To (state 118) stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    To (state 116) stmt1 -> * IF LLB exp RLB stmt1 ELSE stmt1 .
                    To (state 116) stmt1 -> * WHILE LLB exp RLB stmt1 .
                    To (state 116) stmt1 -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 .
                    From (state 115) stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt1 .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 96
                               WHILE shift 104
                                 FOR shift 109
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 117
                                 exp shift 34
                               stmt1 shift 118

State 117:
            (25)stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    From (state 156) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt .
                    From (state 116) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt .

                           [default] reduce 25

State 118:
            (40)stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt1 . {ELSE}
                    From (state 116) stmt1 -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt1 .

                                ELSE reduce 40

State 119:
                steplist -> step * COMMA steplist . {RLB}
                    To (state 120) steplist -> step COMMA * steplist .
                    From (state 154) steplist -> * step COMMA steplist .
                    From (state 120) steplist -> * step COMMA steplist .
                    From (state 114) steplist -> * step COMMA steplist .
            (32)steplist -> step . {RLB}
                    From (state 154) steplist -> * step .
                    From (state 120) steplist -> * step .
                    From (state 114) steplist -> * step .

                               COMMA shift 120
                                 RLB reduce 32

State 120:
                steplist -> * step COMMA steplist . {RLB}
                    To (state 119) steplist -> step * COMMA steplist .
                steplist -> step COMMA * steplist . {RLB}
                    To (state 121) steplist -> step COMMA steplist .
                    To (state 120) steplist -> * step COMMA steplist .
                    To (state 120) steplist -> * step .
                    From (state 119) steplist -> step * COMMA steplist .
                steplist -> * step . {RLB}
                    To (state 119) steplist -> step .
                    To (state 120) step -> * BIADD ID .
                    To (state 120) step -> * ID BIADD .
                    To (state 120) step -> * BIMINUS ID .
                    To (state 120) step -> * ID BIMINUS .
                    To (state 120) step -> * ID ASSIGN exp .
                step -> * BIADD ID . {COMMA,RLB}
                    To (state 122) step -> BIADD * ID .
                step -> * ID BIADD . {COMMA,RLB}
                    To (state 124) step -> ID * BIADD .
                step -> * BIMINUS ID . {COMMA,RLB}
                    To (state 129) step -> BIMINUS * ID .
                step -> * ID BIMINUS . {COMMA,RLB}
                    To (state 124) step -> ID * BIMINUS .
                step -> * ID ASSIGN exp . {COMMA,RLB}
                    To (state 124) step -> ID * ASSIGN exp .

                               BIADD shift 122
                             BIMINUS shift 129
                                  ID shift 124
                            steplist shift 121
                                step shift 119

State 121:
            (31)steplist -> step COMMA steplist . {RLB}
                    From (state 120) steplist -> step COMMA * steplist .

                                 RLB reduce 31

State 122:
                step -> BIADD * ID . {COMMA,RLB}
                    To (state 123) step -> BIADD ID .
                    From (state 154) step -> * BIADD ID .
                    From (state 114) step -> * BIADD ID .
                    From (state 120) step -> * BIADD ID .

                                  ID shift 123

State 123:
            (33)step -> BIADD ID . {COMMA,RLB}
                    From (state 122) step -> BIADD * ID .

                           [default] reduce 33

State 124:
                step -> ID * BIADD . {COMMA,RLB}
                    To (state 125) step -> ID BIADD .
                    From (state 154) step -> * ID BIADD .
                    From (state 114) step -> * ID BIADD .
                    From (state 120) step -> * ID BIADD .
                step -> ID * BIMINUS . {COMMA,RLB}
                    To (state 126) step -> ID BIMINUS .
                    From (state 154) step -> * ID BIMINUS .
                    From (state 114) step -> * ID BIMINUS .
                    From (state 120) step -> * ID BIMINUS .
                step -> ID * ASSIGN exp . {COMMA,RLB}
                    To (state 127) step -> ID ASSIGN * exp .
                    From (state 154) step -> * ID ASSIGN exp .
                    From (state 114) step -> * ID ASSIGN exp .
                    From (state 120) step -> * ID ASSIGN exp .

                              ASSIGN shift 127
                               BIADD shift 125
                             BIMINUS shift 126

State 125:
            (34)step -> ID BIADD . {COMMA,RLB}
                    From (state 124) step -> ID * BIADD .

                           [default] reduce 34

State 126:
            (36)step -> ID BIMINUS . {COMMA,RLB}
                    From (state 124) step -> ID * BIMINUS .

                           [default] reduce 36

State 127:
                step -> ID ASSIGN * exp . {COMMA,RLB}
                    To (state 128) step -> ID ASSIGN exp .
                    To (state 127) exp -> * exp BIAND exp .
                    To (state 127) exp -> * exp BIOR exp .
                    To (state 127) exp -> * exp LSS exp .
                    To (state 127) exp -> * exp LSSEQ exp .
                    To (state 127) exp -> * exp GRT exp .
                    To (state 127) exp -> * exp GRTEQ exp .
                    To (state 127) exp -> * exp EQ exp .
                    To (state 127) exp -> * exp NOTEQ exp .
                    To (state 127) exp -> * exp ADD exp .
                    To (state 127) exp -> * exp MINUS exp .
                    To (state 127) exp -> * exp MULTI exp .
                    To (state 127) exp -> * exp DIV exp .
                    To (state 127) exp -> * exp MOD exp .
                    To (state 127) exp -> * INUM .
                    To (state 127) exp -> * FNUM .
                    To (state 127) exp -> * ID .
                    To (state 127) exp -> * LLB exp RLB .
                    To (state 127) exp -> * NOT exp .
                    To (state 127) exp -> * exp AND exp .
                    To (state 127) exp -> * exp OR exp .
                    To (state 127) exp -> * exp XOR exp .
                    To (state 127) exp -> * exp BITNOT exp .
                    To (state 127) exp -> * exp COMMA exp .
                    To (state 127) exp -> * ID LMB exp RMB .
                    From (state 124) step -> ID * ASSIGN exp .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 128) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 128

State 128:
            (37)step -> ID ASSIGN exp . {COMMA,RLB}
                    From (state 127) step -> ID ASSIGN * exp .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 127) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 127) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 127) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 127) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 127) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 127) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 127) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 127) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 127) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 127) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 127) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 127) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 127) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 127) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 127) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 127) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 127) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 127) exp -> * exp COMMA exp .

                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 37

State 129:
                step -> BIMINUS * ID . {COMMA,RLB}
                    To (state 130) step -> BIMINUS ID .
                    From (state 154) step -> * BIMINUS ID .
                    From (state 114) step -> * BIMINUS ID .
                    From (state 120) step -> * BIMINUS ID .

                                  ID shift 130

State 130:
            (35)step -> BIMINUS ID . {COMMA,RLB}
                    From (state 129) step -> BIMINUS * ID .

                           [default] reduce 35

State 131:
                initlist -> init * COMMA initlist . {SEMICOLOM}
                    To (state 132) initlist -> init COMMA * initlist .
                    From (state 150) initlist -> * init COMMA initlist .
                    From (state 132) initlist -> * init COMMA initlist .
                    From (state 110) initlist -> * init COMMA initlist .
            (27)initlist -> init . {SEMICOLOM}
                    From (state 150) initlist -> * init .
                    From (state 132) initlist -> * init .
                    From (state 110) initlist -> * init .

                               COMMA shift 132
                           SEMICOLOM reduce 27

State 132:
                initlist -> * init COMMA initlist . {SEMICOLOM}
                    To (state 131) initlist -> init * COMMA initlist .
                initlist -> init COMMA * initlist . {SEMICOLOM}
                    To (state 133) initlist -> init COMMA initlist .
                    To (state 132) initlist -> * init COMMA initlist .
                    To (state 132) initlist -> * init .
                    From (state 131) initlist -> init * COMMA initlist .
                initlist -> * init . {SEMICOLOM}
                    To (state 131) initlist -> init .
                    To (state 132) init -> * ID ASSIGN exp .
                    To (state 132) init -> * ID ADDEQ exp .
                    To (state 132) init -> * ID MINUSEQ exp .
                init -> * ID ASSIGN exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * ASSIGN exp .
                init -> * ID ADDEQ exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * ADDEQ exp .
                init -> * ID MINUSEQ exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * MINUSEQ exp .

                                  ID shift 134
                            initlist shift 133
                                init shift 131

State 133:
            (26)initlist -> init COMMA initlist . {SEMICOLOM}
                    From (state 132) initlist -> init COMMA * initlist .

                           SEMICOLOM reduce 26

State 134:
                init -> ID * ASSIGN exp . {COMMA,SEMICOLOM}
                    To (state 135) init -> ID ASSIGN * exp .
                    From (state 150) init -> * ID ASSIGN exp .
                    From (state 110) init -> * ID ASSIGN exp .
                    From (state 132) init -> * ID ASSIGN exp .
                init -> ID * ADDEQ exp . {COMMA,SEMICOLOM}
                    To (state 137) init -> ID ADDEQ * exp .
                    From (state 150) init -> * ID ADDEQ exp .
                    From (state 110) init -> * ID ADDEQ exp .
                    From (state 132) init -> * ID ADDEQ exp .
                init -> ID * MINUSEQ exp . {COMMA,SEMICOLOM}
                    To (state 139) init -> ID MINUSEQ * exp .
                    From (state 150) init -> * ID MINUSEQ exp .
                    From (state 110) init -> * ID MINUSEQ exp .
                    From (state 132) init -> * ID MINUSEQ exp .

                              ASSIGN shift 135
                               ADDEQ shift 137
                             MINUSEQ shift 139

State 135:
                init -> ID ASSIGN * exp . {COMMA,SEMICOLOM}
                    To (state 136) init -> ID ASSIGN exp .
                    To (state 135) exp -> * exp BIAND exp .
                    To (state 135) exp -> * exp BIOR exp .
                    To (state 135) exp -> * exp LSS exp .
                    To (state 135) exp -> * exp LSSEQ exp .
                    To (state 135) exp -> * exp GRT exp .
                    To (state 135) exp -> * exp GRTEQ exp .
                    To (state 135) exp -> * exp EQ exp .
                    To (state 135) exp -> * exp NOTEQ exp .
                    To (state 135) exp -> * exp ADD exp .
                    To (state 135) exp -> * exp MINUS exp .
                    To (state 135) exp -> * exp MULTI exp .
                    To (state 135) exp -> * exp DIV exp .
                    To (state 135) exp -> * exp MOD exp .
                    To (state 135) exp -> * INUM .
                    To (state 135) exp -> * FNUM .
                    To (state 135) exp -> * ID .
                    To (state 135) exp -> * LLB exp RLB .
                    To (state 135) exp -> * NOT exp .
                    To (state 135) exp -> * exp AND exp .
                    To (state 135) exp -> * exp OR exp .
                    To (state 135) exp -> * exp XOR exp .
                    To (state 135) exp -> * exp BITNOT exp .
                    To (state 135) exp -> * exp COMMA exp .
                    To (state 135) exp -> * ID LMB exp RMB .
                    From (state 134) init -> ID * ASSIGN exp .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 136) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 136

State 136:
            (28)init -> ID ASSIGN exp . {COMMA,SEMICOLOM}
                    From (state 135) init -> ID ASSIGN * exp .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 135) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 135) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 135) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 135) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 135) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 135) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 135) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 135) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 135) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 135) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 135) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 135) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 135) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 062) exp -> exp AND * exp .
                    From (state 135) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 064) exp -> exp OR * exp .
                    From (state 135) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 135) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 135) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 135) exp -> * exp COMMA exp .

                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 28

State 137:
                init -> ID ADDEQ * exp . {COMMA,SEMICOLOM}
                    To (state 138) init -> ID ADDEQ exp .
                    To (state 137) exp -> * exp BIAND exp .
                    To (state 137) exp -> * exp BIOR exp .
                    To (state 137) exp -> * exp LSS exp .
                    To (state 137) exp -> * exp LSSEQ exp .
                    To (state 137) exp -> * exp GRT exp .
                    To (state 137) exp -> * exp GRTEQ exp .
                    To (state 137) exp -> * exp EQ exp .
                    To (state 137) exp -> * exp NOTEQ exp .
                    To (state 137) exp -> * exp ADD exp .
                    To (state 137) exp -> * exp MINUS exp .
                    To (state 137) exp -> * exp MULTI exp .
                    To (state 137) exp -> * exp DIV exp .
                    To (state 137) exp -> * exp MOD exp .
                    To (state 137) exp -> * INUM .
                    To (state 137) exp -> * FNUM .
                    To (state 137) exp -> * ID .
                    To (state 137) exp -> * LLB exp RLB .
                    To (state 137) exp -> * NOT exp .
                    To (state 137) exp -> * exp AND exp .
                    To (state 137) exp -> * exp OR exp .
                    To (state 137) exp -> * exp XOR exp .
                    To (state 137) exp -> * exp BITNOT exp .
                    To (state 137) exp -> * exp COMMA exp .
                    To (state 137) exp -> * ID LMB exp RMB .
                    From (state 134) init -> ID * ADDEQ exp .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 138) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 138

State 138:
            (29)init -> ID ADDEQ exp . {COMMA,SEMICOLOM}
                    From (state 137) init -> ID ADDEQ * exp .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 137) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 137) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 137) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 137) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 137) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 137) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 137) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 137) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 137) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 137) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 137) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 137) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 137) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 062) exp -> exp AND * exp .
                    From (state 137) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 064) exp -> exp OR * exp .
                    From (state 137) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 137) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 137) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 137) exp -> * exp COMMA exp .

                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 29

State 139:
                init -> ID MINUSEQ * exp . {COMMA,SEMICOLOM}
                    To (state 140) init -> ID MINUSEQ exp .
                    To (state 139) exp -> * exp BIAND exp .
                    To (state 139) exp -> * exp BIOR exp .
                    To (state 139) exp -> * exp LSS exp .
                    To (state 139) exp -> * exp LSSEQ exp .
                    To (state 139) exp -> * exp GRT exp .
                    To (state 139) exp -> * exp GRTEQ exp .
                    To (state 139) exp -> * exp EQ exp .
                    To (state 139) exp -> * exp NOTEQ exp .
                    To (state 139) exp -> * exp ADD exp .
                    To (state 139) exp -> * exp MINUS exp .
                    To (state 139) exp -> * exp MULTI exp .
                    To (state 139) exp -> * exp DIV exp .
                    To (state 139) exp -> * exp MOD exp .
                    To (state 139) exp -> * INUM .
                    To (state 139) exp -> * FNUM .
                    To (state 139) exp -> * ID .
                    To (state 139) exp -> * LLB exp RLB .
                    To (state 139) exp -> * NOT exp .
                    To (state 139) exp -> * exp AND exp .
                    To (state 139) exp -> * exp OR exp .
                    To (state 139) exp -> * exp XOR exp .
                    To (state 139) exp -> * exp BITNOT exp .
                    To (state 139) exp -> * exp COMMA exp .
                    To (state 139) exp -> * ID LMB exp RMB .
                    From (state 134) init -> ID * MINUSEQ exp .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 140) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 140

State 140:
            (30)init -> ID MINUSEQ exp . {COMMA,SEMICOLOM}
                    From (state 139) init -> ID MINUSEQ * exp .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 139) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 139) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 139) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 139) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 139) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 139) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 139) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 139) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 139) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 139) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 139) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 139) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 139) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 062) exp -> exp AND * exp .
                    From (state 139) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 064) exp -> exp OR * exp .
                    From (state 139) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 139) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 139) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 139) exp -> * exp COMMA exp .

                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           [default] reduce 30

State 141:
            (39)stmt1 -> WHILE LLB exp RLB stmt1 . {ELSE}
                    From (state 107) stmt1 -> WHILE LLB exp RLB * stmt1 .

                                ELSE reduce 39

State 142:
            (38)stmt1 -> IF LLB exp RLB stmt1 ELSE stmt1 . {ELSE}
                    From (state 102) stmt1 -> IF LLB exp RLB stmt1 ELSE * stmt1 .

                                ELSE reduce 38

State 143:
                stmt -> IF LLB exp RLB stmt1 * ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 144) stmt -> IF LLB exp RLB stmt1 ELSE * stmt .
                    From (state 095) stmt -> IF LLB exp RLB * stmt1 ELSE stmt .

                                ELSE shift 144

State 144:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> IF LLB exp RLB stmt1 ELSE * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 103) stmt -> IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 144) stmt -> * exp SEMICOLOM .
                    To (state 144) stmt -> * tp vallist SEMICOLOM .
                    To (state 144) stmt -> * RETURN exp SEMICOLOM .
                    To (state 144) stmt -> * LGB stmt RGB .
                    To (state 144) stmt -> * IF LLB exp RLB stmt .
                    To (state 144) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 144) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 144) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 143) stmt -> IF LLB exp RLB stmt1 * ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 145) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 149) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 92
                               WHILE shift 145
                                 FOR shift 149
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 103
                                 exp shift 34

State 145:
                stmt -> WHILE * LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 146) stmt -> WHILE LLB * exp RLB stmt .
                    From (state 029) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 032) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 089) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 156) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 148) stmt -> * WHILE LLB exp RLB stmt .
                    From (state 144) stmt -> * WHILE LLB exp RLB stmt .

                                 LLB shift 146

State 146:
                stmt -> WHILE LLB * exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 147) stmt -> WHILE LLB exp * RLB stmt .
                    From (state 145) stmt -> WHILE * LLB exp RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 147) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 147

State 147:
                stmt -> WHILE LLB exp * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 148) stmt -> WHILE LLB exp RLB * stmt .
                    From (state 146) stmt -> WHILE LLB * exp RLB stmt .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 146) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 146) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 146) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 146) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 146) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 146) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 146) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 146) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 146) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 146) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 146) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 146) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 146) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 062) exp -> exp AND * exp .
                    From (state 146) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 064) exp -> exp OR * exp .
                    From (state 146) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 146) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 146) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,RLB}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 146) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                                 RLB shift 148

State 148:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 145) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> WHILE LLB exp RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 108) stmt -> WHILE LLB exp RLB stmt .
                    To (state 148) stmt -> * exp SEMICOLOM .
                    To (state 148) stmt -> * tp vallist SEMICOLOM .
                    To (state 148) stmt -> * RETURN exp SEMICOLOM .
                    To (state 148) stmt -> * LGB stmt RGB .
                    To (state 148) stmt -> * IF LLB exp RLB stmt .
                    To (state 148) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 148) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 148) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 147) stmt -> WHILE LLB exp * RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 149) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 92
                               WHILE shift 145
                                 FOR shift 149
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 108
                                 exp shift 34

State 149:
                stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 150) stmt -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 029) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 032) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 089) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 144) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 156) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 148) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .

                                 LLB shift 150

State 150:
                stmt -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 151) stmt -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 149) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                initlist -> * init COMMA initlist . {SEMICOLOM}
                    To (state 131) initlist -> init * COMMA initlist .
                initlist -> * init . {SEMICOLOM}
                    To (state 131) initlist -> init .
                    To (state 150) init -> * ID ASSIGN exp .
                    To (state 150) init -> * ID ADDEQ exp .
                    To (state 150) init -> * ID MINUSEQ exp .
                init -> * ID ASSIGN exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * ASSIGN exp .
                init -> * ID ADDEQ exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * ADDEQ exp .
                init -> * ID MINUSEQ exp . {COMMA,SEMICOLOM}
                    To (state 134) init -> ID * MINUSEQ exp .

                                  ID shift 134
                            initlist shift 151
                                init shift 131

State 151:
                stmt -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 152) stmt -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt .
                    From (state 150) stmt -> FOR LLB * initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .

                           SEMICOLOM shift 152

State 152:
                stmt -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 153) stmt -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt .
                    From (state 151) stmt -> FOR LLB initlist * SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 153) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                INUM shift 72
                                  ID shift 74
                                 LLB shift 78
                                FNUM shift 73
                                 exp shift 153

State 153:
                stmt -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 154) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt .
                    From (state 152) stmt -> FOR LLB initlist SEMICOLOM * exp SEMICOLOM steplist RLB stmt .
                exp -> exp * BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 036) exp -> exp BIAND * exp .
                    From (state 152) exp -> * exp BIAND exp .
                exp -> exp * BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 038) exp -> exp BIOR * exp .
                    From (state 152) exp -> * exp BIOR exp .
                exp -> exp * LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 040) exp -> exp LSS * exp .
                    From (state 152) exp -> * exp LSS exp .
                exp -> exp * LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 042) exp -> exp LSSEQ * exp .
                    From (state 152) exp -> * exp LSSEQ exp .
                exp -> exp * GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 044) exp -> exp GRT * exp .
                    From (state 152) exp -> * exp GRT exp .
                exp -> exp * GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 046) exp -> exp GRTEQ * exp .
                    From (state 152) exp -> * exp GRTEQ exp .
                exp -> exp * EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 048) exp -> exp EQ * exp .
                    From (state 152) exp -> * exp EQ exp .
                exp -> exp * NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 050) exp -> exp NOTEQ * exp .
                    From (state 152) exp -> * exp NOTEQ exp .
                exp -> exp * ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 052) exp -> exp ADD * exp .
                    From (state 152) exp -> * exp ADD exp .
                exp -> exp * MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 054) exp -> exp MINUS * exp .
                    From (state 152) exp -> * exp MINUS exp .
                exp -> exp * MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 056) exp -> exp MULTI * exp .
                    From (state 152) exp -> * exp MULTI exp .
                exp -> exp * DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 058) exp -> exp DIV * exp .
                    From (state 152) exp -> * exp DIV exp .
                exp -> exp * MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 060) exp -> exp MOD * exp .
                    From (state 152) exp -> * exp MOD exp .
                exp -> exp * AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 062) exp -> exp AND * exp .
                    From (state 152) exp -> * exp AND exp .
                exp -> exp * OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 064) exp -> exp OR * exp .
                    From (state 152) exp -> * exp OR exp .
                exp -> exp * XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 066) exp -> exp XOR * exp .
                    From (state 152) exp -> * exp XOR exp .
                exp -> exp * BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 068) exp -> exp BITNOT * exp .
                    From (state 152) exp -> * exp BITNOT exp .
                exp -> exp * COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 070) exp -> exp COMMA * exp .
                    From (state 152) exp -> * exp COMMA exp .

                               COMMA shift 70
                                BIOR shift 38
                               BIAND shift 36
                                  OR shift 64
                                 XOR shift 66
                                 AND shift 62
                                  EQ shift 48
                               NOTEQ shift 50
                                 LSS shift 40
                               LSSEQ shift 42
                                 GRT shift 44
                               GRTEQ shift 46
                                 ADD shift 52
                               MINUS shift 54
                                 DIV shift 58
                                 MOD shift 60
                               MULTI shift 56
                              BITNOT shift 68
                           SEMICOLOM shift 154

State 154:
                stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 155) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt .
                    From (state 153) stmt -> FOR LLB initlist SEMICOLOM exp * SEMICOLOM steplist RLB stmt .
                steplist -> * step COMMA steplist . {RLB}
                    To (state 119) steplist -> step * COMMA steplist .
                steplist -> * step . {RLB}
                    To (state 119) steplist -> step .
                    To (state 154) step -> * BIADD ID .
                    To (state 154) step -> * ID BIADD .
                    To (state 154) step -> * BIMINUS ID .
                    To (state 154) step -> * ID BIMINUS .
                    To (state 154) step -> * ID ASSIGN exp .
                step -> * BIADD ID . {COMMA,RLB}
                    To (state 122) step -> BIADD * ID .
                step -> * ID BIADD . {COMMA,RLB}
                    To (state 124) step -> ID * BIADD .
                step -> * BIMINUS ID . {COMMA,RLB}
                    To (state 129) step -> BIMINUS * ID .
                step -> * ID BIMINUS . {COMMA,RLB}
                    To (state 124) step -> ID * BIMINUS .
                step -> * ID ASSIGN exp . {COMMA,RLB}
                    To (state 124) step -> ID * ASSIGN exp .

                               BIADD shift 122
                             BIMINUS shift 129
                                  ID shift 124
                            steplist shift 155
                                step shift 119

State 155:
                stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 156) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt .
                    From (state 154) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM * steplist RLB stmt .

                                 RLB shift 156

State 156:
                tp -> * INT . {ID}
                    To (state 005) tp -> INT .
                tp -> * FLOAT . {ID}
                    To (state 009) tp -> FLOAT .
                tp -> * INT LMB INUM RMB . {ID}
                    To (state 005) tp -> INT * LMB INUM RMB .
                tp -> * FLOAT LMB INUM RMB . {ID}
                    To (state 009) tp -> FLOAT * LMB INUM RMB .
                stmt -> * exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 034) stmt -> exp * SEMICOLOM .
                stmt -> * tp vallist SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 083) stmt -> tp * vallist SEMICOLOM .
                stmt -> * RETURN exp SEMICOLOM . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 086) stmt -> RETURN * exp SEMICOLOM .
                stmt -> * LGB stmt RGB . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 089) stmt -> LGB * stmt RGB .
                stmt -> * IF LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt .
                stmt -> * IF LLB exp RLB stmt1 ELSE stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 092) stmt -> IF * LLB exp RLB stmt1 ELSE stmt .
                stmt -> * WHILE LLB exp RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 145) stmt -> WHILE * LLB exp RLB stmt .
                stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 149) stmt -> FOR * LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB * stmt . {NOT,INT,FLOAT,INUM,ID,LGB,RGB,LLB,RETURN,IF,WHILE,FOR,FNUM}
                    To (state 117) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    To (state 156) stmt -> * exp SEMICOLOM .
                    To (state 156) stmt -> * tp vallist SEMICOLOM .
                    To (state 156) stmt -> * RETURN exp SEMICOLOM .
                    To (state 156) stmt -> * LGB stmt RGB .
                    To (state 156) stmt -> * IF LLB exp RLB stmt .
                    To (state 156) stmt -> * IF LLB exp RLB stmt1 ELSE stmt .
                    To (state 156) stmt -> * WHILE LLB exp RLB stmt .
                    To (state 156) stmt -> * FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist RLB stmt .
                    From (state 155) stmt -> FOR LLB initlist SEMICOLOM exp SEMICOLOM steplist * RLB stmt .
                exp -> * exp BIAND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIAND exp .
                exp -> * exp BIOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BIOR exp .
                exp -> * exp LSS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSS exp .
                exp -> * exp LSSEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * LSSEQ exp .
                exp -> * exp GRT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRT exp .
                exp -> * exp GRTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * GRTEQ exp .
                exp -> * exp EQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * EQ exp .
                exp -> * exp NOTEQ exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * NOTEQ exp .
                exp -> * exp ADD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * ADD exp .
                exp -> * exp MINUS exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MINUS exp .
                exp -> * exp MULTI exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MULTI exp .
                exp -> * exp DIV exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * DIV exp .
                exp -> * exp MOD exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * MOD exp .
                exp -> * INUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 072) exp -> INUM .
                exp -> * FNUM . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 073) exp -> FNUM .
                exp -> * ID . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID .
                exp -> * LLB exp RLB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 078) exp -> LLB * exp RLB .
                exp -> * NOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 081) exp -> NOT * exp .
                exp -> * exp AND exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * AND exp .
                exp -> * exp OR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * OR exp .
                exp -> * exp XOR exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * XOR exp .
                exp -> * exp BITNOT exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * BITNOT exp .
                exp -> * exp COMMA exp . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 034) exp -> exp * COMMA exp .
                exp -> * ID LMB exp RMB . {COMMA,BIOR,BIAND,OR,XOR,AND,EQ,NOTEQ,LSS,LSSEQ,GRT,GRTEQ,ADD,MINUS,DIV,MOD,MULTI,BITNOT,SEMICOLOM}
                    To (state 074) exp -> ID * LMB exp RMB .

                                 NOT shift 81
                                 INT shift 5
                               FLOAT shift 9
                                INUM shift 72
                                  ID shift 74
                                 LGB shift 89
                                 LLB shift 78
                              RETURN shift 86
                                  IF shift 92
                               WHILE shift 145
                                 FOR shift 149
                                FNUM shift 73
                                  tp shift 83
                                stmt shift 117
                                 exp shift 34

